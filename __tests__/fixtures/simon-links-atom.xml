<?xml version="1.0" encoding="utf-8"?>
<feed xml:lang="en-us" xmlns="http://www.w3.org/2005/Atom"><title>Simon Willison's Weblog: Blogmarks</title><link href="http://simonwillison.net/" rel="alternate"></link><link href="http://simonwillison.net/atom/links/" rel="self"></link><id>http://simonwillison.net/</id><updated>2019-05-30T04:35:42+00:00</updated><author><name>Simon Willison</name></author><entry><title>Los Angeles Weedmaps analysis</title><link href="http://simonwillison.net/2019/May/30/los-angeles-weedmaps-analysis/#atom-blogmarks" rel="alternate"></link><published>2019-05-30T04:35:42+00:00</published><updated>2019-05-30T04:35:42+00:00</updated><id>http://simonwillison.net/2019/May/30/los-angeles-weedmaps-analysis/#atom-blogmarks</id><summary type="html">&lt;p&gt;&lt;a href="https://nbviewer.jupyter.org/github/datadesk/la-weedmaps-analysis/blob/master/notebook.ipynb"&gt;Los Angeles Weedmaps analysis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ben Welsh at the LA Times published this Jupyter notebook showing the full working behind a story they published about LA&amp;#39;s black market weed dispensaries. I picked up several useful tricks from it - including how to load points into a geopandas GeoDataFrame (in epsg:4326 aka WGS 84) and how to then join that against the LA Times neighborhoods GeoJSON boundaries file.&lt;/p&gt;

    &lt;p&gt;Via &lt;a href="https://twitter.com/palewire/status/1133723284116086784"&gt;Ben Welsh&lt;/a&gt;&lt;/p&gt;

</summary><category term="datajournalism"></category><category term="gis"></category><category term="latimes"></category><category term="pandas"></category><category term="jupyter"></category></entry><entry><title>Building a stateless API proxy</title><link href="http://simonwillison.net/2019/May/30/building-a-stateless-api-proxy/#atom-blogmarks" rel="alternate"></link><published>2019-05-30T04:28:55+00:00</published><updated>2019-05-30T04:28:55+00:00</updated><id>http://simonwillison.net/2019/May/30/building-a-stateless-api-proxy/#atom-blogmarks</id><summary type="html">&lt;p&gt;&lt;a href="https://blog.thea.codes/building-a-stateless-api-proxy/"&gt;Building a stateless API proxy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a really clever idea. The GitHub API is infuriatingly coarsely grained with its permissions: you often end up having to create a token with way more permissions than you actually need for your project. Thea Flowers proposes running your own proxy in front of their API that adds more finely grained permissions, based on custom encrypted proxy API tokens that use JWT to encode the original API key along with the permissions you want to grant to that particular token (as a list of regular expressions matching paths on the underlying API).&lt;/p&gt;

    &lt;p&gt;Via &lt;a href="https://twitter.com/theavalkyrie/status/1133864634178424832"&gt;@theavalkyrie&lt;/a&gt;&lt;/p&gt;

</summary><category term="apis"></category><category term="encryption"></category><category term="github"></category><category term="proxy"></category><category term="security"></category></entry><entry><title>datasette-jq</title><link href="http://simonwillison.net/2019/May/30/datasette-jq/#atom-blogmarks" rel="alternate"></link><published>2019-05-30T01:52:57+00:00</published><updated>2019-05-30T01:52:57+00:00</updated><id>http://simonwillison.net/2019/May/30/datasette-jq/#atom-blogmarks</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/simonw/datasette-jq"&gt;datasette-jq&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I released another tiny Datasette plugin: datasette-jq registers a single custom SQL function, jq(), which lets you execute the jq expression language against a JSON column (or literal value) to filter and transform the JSON data. The README includes a link to a live demo - it&amp;#39;s a neat way to play with the jq micro-language.&lt;/p&gt;

    &lt;p&gt;Via &lt;a href="https://twitter.com/simonw/status/1133912206859313152"&gt;@simonw&lt;/a&gt;&lt;/p&gt;

</summary><category term="projects"></category><category term="datasette"></category><category term="jq"></category></entry><entry><title>Falsehoods Programmers Believe About Search</title><link href="http://simonwillison.net/2019/May/29/falsehoods-programmers-believe-about-search/#atom-blogmarks" rel="alternate"></link><published>2019-05-29T20:09:23+00:00</published><updated>2019-05-29T20:09:23+00:00</updated><id>http://simonwillison.net/2019/May/29/falsehoods-programmers-believe-about-search/#atom-blogmarks</id><summary type="html">&lt;p&gt;&lt;a href="https://opensourceconnections.com/blog/2019/05/29/falsehoods-programmers-believe-about-search/"&gt;Falsehoods Programmers Believe About Search&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These are great. &amp;quot;When you find the boolean operator ‘OR’, you always know it doesn’t mean Oregon&amp;quot;.&lt;/p&gt;

    &lt;p&gt;Via &lt;a href="https://news.ycombinator.com/item?id=20039891"&gt;Hacker News&lt;/a&gt;&lt;/p&gt;

</summary><category term="search"></category></entry><entry><title>gls: Goroutine local storage</title><link href="http://simonwillison.net/2019/May/28/gls-goroutine-local-storage/#atom-blogmarks" rel="alternate"></link><published>2019-05-28T23:13:38+00:00</published><updated>2019-05-28T23:13:38+00:00</updated><id>http://simonwillison.net/2019/May/28/gls-goroutine-local-storage/#atom-blogmarks</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/jtolds/gls"&gt;gls: Goroutine local storage&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Go doesn&amp;#39;t provide a mechanism for having &amp;quot;goroutine local&amp;quot; variables (like threadlocals in Python but for goroutines), and the structure of the language makes it really hard to get something working. JT Olio figured out a truly legendary hack: Go&amp;#39;s introspection lets you see the current stack, so he figured out a way to encode a base-16 identifer tag into the call order of 16 special nested functions. I particularly like the &amp;quot;What are people saying?&amp;quot; section of the README: &amp;quot;Wow, that&amp;#39;s horrifying.&amp;quot; - &amp;quot;This is the most terrible thing I have seen in a very long time.&amp;quot; - &amp;quot;Where is it getting a context from? Is this serializing all the requests? What the heck is the client being bound to? What are these tags? Why does he need callers? Oh god no. No no no.&amp;quot;&lt;/p&gt;

    &lt;p&gt;Via &lt;a href="https://twitter.com/aboodman/status/1133507328458649600"&gt;Aaron Boodman&lt;/a&gt;&lt;/p&gt;

</summary><category term="go"></category><category term="hacks"></category></entry><entry><title>Zdog</title><link href="http://simonwillison.net/2019/May/28/zdog/#atom-blogmarks" rel="alternate"></link><published>2019-05-28T21:59:27+00:00</published><updated>2019-05-28T21:59:27+00:00</updated><id>http://simonwillison.net/2019/May/28/zdog/#atom-blogmarks</id><summary type="html">&lt;p&gt;&lt;a href="https://zzz.dog/"&gt;Zdog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Well this is absolutely delightful: Zdog is a pseudo-3D engine for canvas and SVG that outputs 3D models rendered as super-stylish flat shapes. It&amp;#39;s hard to describe with words - go play with the demos!&lt;/p&gt;

    &lt;p&gt;Via &lt;a href="https://twitter.com/desandro/status/1133373535542489088"&gt;Dave DeSandro&lt;/a&gt;&lt;/p&gt;

</summary><category term="3d"></category><category term="canvas"></category></entry><entry><title>Using dependabot to bump Django on my blog from 2.2 to 2.2.1</title><link href="http://simonwillison.net/2019/May/27/dependabot/#atom-blogmarks" rel="alternate"></link><published>2019-05-27T01:24:48+00:00</published><updated>2019-05-27T01:24:48+00:00</updated><id>http://simonwillison.net/2019/May/27/dependabot/#atom-blogmarks</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/simonw/simonwillisonblog/pull/25"&gt;Using dependabot to bump Django on my blog from 2.2 to 2.2.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub recently acquired dependabot and made it free, and I decided to try it out on my blog. It&amp;#39;s a really neat piece of automation: it scans your requirements.txt (plus a number of other packaging definitions across several different languages), checks for updates to your dependencies and opens pull requests against any that it finds. Combine it with a CI service such as Circle CI and your tests will run automatically against the pull request, letting you know if it&amp;#39;s safe to merge. dependabot constantly rebases other changes against the pull request to try and ensure it will merge as cleanly as possible.&lt;/p&gt;

    &lt;p&gt;Via &lt;a href="https://nimbleindustries.io/2019/05/26/dependabot-is-now-free-and-its-amazing/"&gt;Dependabot is Now Free and It&amp;#39;s Amazing&lt;/a&gt;&lt;/p&gt;

</summary><category term="django"></category><category term="github"></category></entry><entry><title>sqlite-utils 1.0</title><link href="http://simonwillison.net/2019/May/25/sqlite-utils-1/#atom-blogmarks" rel="alternate"></link><published>2019-05-25T01:20:37+00:00</published><updated>2019-05-25T01:20:37+00:00</updated><id>http://simonwillison.net/2019/May/25/sqlite-utils-1/#atom-blogmarks</id><summary type="html">&lt;p&gt;&lt;a href="https://sqlite-utils.readthedocs.io/en/latest/changelog.html#v1-0"&gt;sqlite-utils 1.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I just released sqlite-utils 1.0, with a couple of handy new features over 0.14: it can now automatically add columns to a database table if you attempt to insert data which doesn&amp;#39;t quite fit (using alter=True in the Python API or the --alter option to the &amp;quot;sqlite-utils insert&amp;quot; command). It also has the ability to output nested JSON column values on the command-line using the new --json-cols option. This is the first project I&amp;#39;ve marked as a 1.0 release in a very long time - I&amp;#39;ll be sticking to semver for this project from now on, bumping the major version only in the case of a backwards incompatible change.&lt;/p&gt;

</summary><category term="projects"></category><category term="sqlite"></category><category term="versioning"></category></entry><entry><title>WebAssembly at eBay: A Real-World Use Case</title><link href="http://simonwillison.net/2019/May/22/webassembly-ebay-real-world-use-case/#atom-blogmarks" rel="alternate"></link><published>2019-05-22T20:30:58+00:00</published><updated>2019-05-22T20:30:58+00:00</updated><id>http://simonwillison.net/2019/May/22/webassembly-ebay-real-world-use-case/#atom-blogmarks</id><summary type="html">&lt;p&gt;&lt;a href="https://medium.com/ebaytech/webassembly-at-ebay-a-real-world-use-case-ef888f38b537"&gt;WebAssembly at eBay: A Real-World Use Case&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;eBay used WebAssembly to run a C++ barcode reading library inside a web worker, passing images from the camera in order to provide a barcode scanning interface as part of their mobile web &amp;quot;add listing&amp;quot; page (a feature that had already proved successful in their native mobile apps). This is a great write-up, with lots of detail about how they compiled the library. They ended up running three barcode solutions in parallel web workers - two using WebAssembly, one in pure JavaScript - because their testing showed that racing between three implementations greatly increased the chance of a match due to how the different libraries handled poor quality or out-of-focus images.&lt;/p&gt;

    &lt;p&gt;Via &lt;a href="https://twitter.com/senthil_hi/status/1131252395520929792"&gt;@senthil_hi&lt;/a&gt;&lt;/p&gt;

</summary><category term="webassembly"></category></entry><entry><title>Terrarium by Fastly Labs</title><link href="http://simonwillison.net/2019/May/21/terrarium-fastly-labs/#atom-blogmarks" rel="alternate"></link><published>2019-05-21T20:51:37+00:00</published><updated>2019-05-21T20:51:37+00:00</updated><id>http://simonwillison.net/2019/May/21/terrarium-fastly-labs/#atom-blogmarks</id><summary type="html">&lt;p&gt;&lt;a href="https://wasm.fastlylabs.com/"&gt;Terrarium by Fastly Labs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fastly have been investing heavily in WebAssembly, which makes sense as it provides an excellent option for a sandboxed environment for executing server-side code at the edge of their CDN offering. Terrarium is their &amp;quot;playground for experimenting with edge-side WebAssembly&amp;quot; - it lets you write a program in Rust, C, TypeScript or Wat (WebAssembly text format), compile it to WebAssembly and deploy it to a URL with a single button-click. It&amp;#39;s just a demo for the moment so deployments only persist for 15 minutes, but it&amp;#39;s a fascinating sandbox to play around with.&lt;/p&gt;

</summary><category term="rust"></category><category term="webassembly"></category></entry><entry><title>Monaco Editor</title><link href="http://simonwillison.net/2019/May/21/monaco-editor/#atom-blogmarks" rel="alternate"></link><published>2019-05-21T20:47:12+00:00</published><updated>2019-05-21T20:47:12+00:00</updated><id>http://simonwillison.net/2019/May/21/monaco-editor/#atom-blogmarks</id><summary type="html">&lt;p&gt;&lt;a href="https://microsoft.github.io/monaco-editor/"&gt;Monaco Editor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;VS Code is MIT licensed and built on top of Electron. I thought &amp;quot;huh, I wonder if I could run the editor component embedded in a web app&amp;quot; - and it turns out Microsoft have already extracted out the code editor component into an open source JavaScript package called Monaco. Looks very slick, though sadly it&amp;#39;s not supported in mobile browsers.&lt;/p&gt;

</summary><category term="editor"></category><category term="javascript"></category><category term="microsoft"></category><category term="opensource"></category></entry><entry><title>Public Data Release of Stack Overflow’s 2019 Developer Survey</title><link href="http://simonwillison.net/2019/May/21/public-data-release-of-stack-overflows-2019-developer-survey/#atom-blogmarks" rel="alternate"></link><published>2019-05-21T18:51:43+00:00</published><updated>2019-05-21T18:51:43+00:00</updated><id>http://simonwillison.net/2019/May/21/public-data-release-of-stack-overflows-2019-developer-survey/#atom-blogmarks</id><summary type="html">&lt;p&gt;&lt;a href="https://stackoverflow.blog/2019/05/21/public-data-release-of-stack-overflows-2019-developer-survey/"&gt;Public Data Release of Stack Overflow’s 2019 Developer Survey&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s the Stack Overflow announcement of their developer survey public data release, which discusses the Glitch partnership and mentions Datasette.&lt;/p&gt;

</summary><category term="glitch"></category><category term="stackoverflow"></category><category term="datasette"></category></entry><entry><title>Discover Insights in Developer Survey Results</title><link href="http://simonwillison.net/2019/May/21/discover-insights-developer-survey-results/#atom-blogmarks" rel="alternate"></link><published>2019-05-21T18:50:22+00:00</published><updated>2019-05-21T18:50:22+00:00</updated><id>http://simonwillison.net/2019/May/21/discover-insights-developer-survey-results/#atom-blogmarks</id><summary type="html">&lt;p&gt;&lt;a href="https://glitch.com/culture/discover-insights-explore-developer-survey-results-2019/"&gt;Discover Insights in Developer Survey Results&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stack Overflow partnered with Glitch and used Datasette to host the full data set from Stack Overflow&amp;#39;s 2019 Developer Survey!&lt;/p&gt;

</summary><category term="glitch"></category><category term="stackoverflow"></category><category term="datasette"></category></entry><entry><title>django-lifecycle</title><link href="http://simonwillison.net/2019/May/15/django-lifecycle/#atom-blogmarks" rel="alternate"></link><published>2019-05-15T23:34:55+00:00</published><updated>2019-05-15T23:34:55+00:00</updated><id>http://simonwillison.net/2019/May/15/django-lifecycle/#atom-blogmarks</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/rsinger86/django-lifecycle"&gt;django-lifecycle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Interesting alternative to Django signals by Robert Singer. It provides a model mixin class which over-rides the Django ORM&amp;#39;s save() method, tracking which model attributes have been changed. Then it lets you add methods to your model with a @hook annotation allowing you to specify things like &amp;quot;run this method before saving if the status changed&amp;quot; or &amp;quot;run this after an object has been deleted&amp;quot;.&lt;/p&gt;

    &lt;p&gt;Via &lt;a href="https://twitter.com/webology/status/1128801534391836678"&gt;Jeff Triplett&lt;/a&gt;&lt;/p&gt;

</summary><category term="django"></category></entry><entry><title>Why I (Still) Love Tech: In Defense of a Difficult Industry</title><link href="http://simonwillison.net/2019/May/15/in-defense-of-a-difficult-industry/#atom-blogmarks" rel="alternate"></link><published>2019-05-15T15:45:20+00:00</published><updated>2019-05-15T15:45:20+00:00</updated><id>http://simonwillison.net/2019/May/15/in-defense-of-a-difficult-industry/#atom-blogmarks</id><summary type="html">&lt;p&gt;&lt;a href="https://www.wired.com/story/why-we-love-tech-defense-difficult-industry/"&gt;Why I (Still) Love Tech: In Defense of a Difficult Industry&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you only read one longform piece this week, make it this one. Utterly delightful prose and a bunch of different messages that resonated with me deeply.&lt;/p&gt;

    &lt;p&gt;Via &lt;a href="https://daringfireball.net/linked/2019/05/14/ford-loves-tech"&gt;Daring Fireball&lt;/a&gt;&lt;/p&gt;

</summary><category term="paulford"></category></entry></feed>
