<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/">
  <channel>
    <title>remy sharp's b:log</title>
    <atom:link href="https://remysharp.com/feed/" rel="self" type="application/rss+xml"></atom:link>
    <link>https://remysharp.com</link>
    <description>About [code] and all that jazz</description>
    <lastBuildDate>Thu, 23 May 2019 13:03:50 +0000</lastBuildDate>
    <language>en-US</language>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>All I want for Christmas is…</title>
      <guid isPermaLink="false">all-i-want-for-christmas</guid>
      <link>https://remysharp.com/2019/05/21/all-i-want-for-christmas</link>
      <pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate>
      <description><![CDATA[…my two front teeth. A song, that for reasons beyond my comprehension, went around my childhood household like a bad smell.
As a child, I think around 9 or 10, I was going down a slide, my best friend at the top with his feet apart standing on the slide, and I'd slide under him, face down. Eventually I clipped his feet, he fell down on the back of my head, and my front teeth met the metal, going down the slide on their own accord.
This is a journey of the last 12 months and my front teef.]]></description>
      <content:encoded><![CDATA[
<p>…my two front teeth. A song, that for reasons beyond my comprehension, went around my childhood household <a href="https://www.youtube.com/watch?v=WI02_UJ1C6I">like a bad smell</a>.</p>
<p>As a child, I <em>think</em> around 9 or 10, I was going down a slide, my best friend at the top with his feet apart standing on the slide, and I'd slide under him, face down. Eventually I clipped his feet, he fell down on the back of my head, and my front teeth met the metal, going down the slide on their own accord.</p>
<p>This is a journey of the last 12 months and my front teef.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><p>Fair warning, this is a) a personal post, b) got some pictures that aren't super pretty to look at!</p>
<h2>22 year old crowns</h2>
<p>I had crowns put in when I was 17 - which meant my teeth had fully grown, but I wouldn't be charged as an adult for the dental work. I was actually put under general anaesthetic if you can believe it, and stayed in over night at the hospital. I'm sure it doesn't work that way these days.</p>
<p>Crowns of this sort generally last, I was told, for 18 years. Mine lasted 22 years quite happily. I was 39 when some problems occurred. Frustratingly, there was nothing wrong with my crowns.</p>
<p>I'd noticed my left front tooth was slightly wobbly. I'd had problems years before with small abscess above the tooth but it had sorted itself out by itself. So I visited the dentist.</p>
<p>Wobbly tooth? X-ray scan. Crack in the root. Although the teeth are mostly crowns, they still sit on teeth (though one had the root completely removed, but I can't remember which). The tooth in question had a crack in the depth of the tooth, deep in the gum and the dentist, without question, stated it needed to be removed and it couldn't be saved.</p>
<h2>Removing a tooth</h2>
<p>I was referred to a dental clinic which would remove the tooth. The plan was to use a denture in place for around 3-6 months (yeah, that's a long time) and if there was enough bone in the cavity that the tooth was removed from, an implant would be installed. An implant is (as I understood it) where they drill a bolt into your skull, and then they make a tooth that attaches to the bolt. Frankenstein stylee, but in my mouth.</p>
<p>The tooth was removed on the 6 June 2018. It's fair to say that the process is pretty upsetting. I was lucky that extraction was an extremely smooth process and the tooth came out mostly in one piece. I've known others to go through traumatic experiences with extractions. Emotionally though, missing teeth is right up there in my top nightmares.</p>
<p><img src="https://remysharp.com/images/teeth/extracted.jpg" alt="My tooth"></p>
<p>The picture above is just one tooth (flipped over). I'm guessing the tooth coloured bit is the crown, and the dull colour is the dead tooth under it. The cavity it left was pretty nasty looking (no picture, thankfully).</p>
<p>I did look a bit odd without my denture and certainly I wasn't going outdoors without it. The picture below the denture is in and if I didn't raise my smile too much, it's not noticeable at all. I doubt if many people even noticed it when I smiled properly.</p>
<p><img src="https://remysharp.com/images/teeth/compare.jpg" alt="Compare"></p>
<p>And so for about 4 months, I wore a denture. It affected my speech a bit, and though I preferred to eat without it, there were times I was eating with friends and I'd keep it in to hide my shame.</p>
<p>The denture went with me everywhere I went and when I slept, yep, it went in a glass of water, just like Grandpa Pete from good'ol TV.</p>
<p><img src="https://remysharp.com/images/teeth/denture.jpg" alt="My denture"></p>
<h2>No bone, no go</h2>
<p>When I returned to the dental clinic, an x-ray showed that there wasn't nearly enough bone in the top of my mouth to implant unfortunately. This left me with a few options:</p>
<ol>
<li>Leave my tooth missing. Nope, not happening.</li>
<li>Do a bone graft: they cut open the skin above my canine teeth, fold <em>back</em> the top of the skin to reveal all the bone across the top of my mouth, then graft on powered bone (pig bone I think, though my mind was kind of blowing up at the thought of doing a horror show on my mouth, so I might have forgotten). Then, if the graft took, put an implant in. About 12 months worth of work.</li>
<li>A cantilever bridge: where a bridge is attached to adjacent tooth only.</li>
</ol>
<p>The last option seemed like the least invasive - though would require damaging the &quot;good&quot; tooth to anchor the bridge onto.</p>
<h2>Before the bridge, a choice</h2>
<p>Every dentist and hygienist I saw suggested I look at teeth whitening before I get the teeth (finally) fixed. So along came procrastination for the next 7 months.</p>
<p>I'd never considered whitening my teeth. Sure, mine aren't perfect white, but they're not black either. I was happy (or ignorant) of their colour until it kept being presented as an option. And when I did get the costings for whitening, the prices varied greatly and even then, the quotes weren't sure how it much it would be (ranging from a few hundred pounds to several).</p>
<p>Damn choices. Left me doing nothing (the easiest option) for months.</p>
<p>Somehow, I suspect with a big shove from my partner Julie, I booked into the dentists to skip the whitening and get the bridge made. Appointments were booked, and in a month I'd be rid of my denture.</p>
<h2>But first, let's remove that <em>other</em> tooth</h2>
<p>To have the bridge made, the dentist needed to remove a large chunk of my remaining front tooth crown. Then a lab would make my front two teeth and for the following fortnight I'd have a temporary cap in place.</p>
<p>The cap had one full bodied tooth connected to a cave-like tooth that would sit over what remained of my right tooth.</p>
<p><img src="https://remysharp.com/images/teeth/pair.jpg" alt="False teeth"></p>
<p>I'd had caps in place when I was a kid. Pre-crowns. I thought I knew what they'd be like. They're no good for eating apples, but they're usually strong enough to stay in.</p>
<p>This was not the case at all. After having my last front tooth cut down to a stub, within 8 hours, the false front teeth had completely fallen out.</p>
<p>The following 36 hours were horrible. All I could think about was the shame attached to not having my teeth. I was short tempered, wanted to hide, couldn't and wouldn't eat. I felt hyper sensitive to my appearance (know how this sounds, I can't be sorry for how I felt though).</p>
<p>I was able to have the tooth re-glued back in the next day, but it became loose again within 24 hours. Thankfully I was able to re-glue myself using some denture gum. It did the trick for about 8 hours a day, and I knew I had a plan if the tooth was to fall out again.</p>
<p>I still hid for most of the time, but my mental well-being was back to normal (&quot;normal&quot; being a rather loose term itself!). I wasn't so pretty without my tooth - and until now, only my kids had seen this - and I apologise for the horror picture version, it was dark!</p>
<p><img src="https://remysharp.com/images/teeth/sans.jpg" alt="Sans teeth"></p>
<h2>Fixed</h2>
<p>As of Tuesday this week, and just shy of 12 months of being without my front teeth and shying away from eating in public - I finally have my front teeth back.</p>
<p>They look pretty good, the benchmark being &quot;they don't look fake&quot;. My mouth is a little beaten up with having the bridge cemented in, but they're now supposed to last at least 10 years. And look, I look totally <em>normal</em> now!</p>
<p><img src="https://remysharp.com/images/teeth/fixed.jpg" alt="Fixed"></p>
<p><em>Originally published on <a href="https://remysharp.com/2019/05/21/all-i-want-for-christmas">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>Compiling binaries for Netlify</title>
      <guid isPermaLink="false">compiling-binaries-for-netlify</guid>
      <link>https://remysharp.com/2019/05/20/compiling-binaries-for-netlify</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      <description><![CDATA[There's the odd occasion that inside of a Netlify build (or maybe a lambda function) that I've wanted to execute a custom binary. Most recently for me, a C based program called goaccess. This is my &quot;easy&quot; method for compiling to run inside of Netlify.
&quot;Easy&quot; because it's the way that works for me in a repeatable fashion.]]></description>
      <content:encoded><![CDATA[
<p>There's the odd occasion that inside of a Netlify build (or maybe a lambda function) that I've wanted to execute a custom binary. Most recently for me, a C based program called <a href="https://goaccess.io/">goaccess</a>. This is my &quot;easy&quot; method for compiling to run inside of Netlify.</p>
<p>&quot;Easy&quot; because it's the way that works for me in a repeatable fashion.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>Why is this difficult?</h2>
<p>Because I'm a moron, and I don't have the patience to learn how it all really works.</p>
<p>When I look at the download options for tools like goaccess, the installation process is actually a compilation process and it's entirely dependant on the operating system. I'm running a Mac, and again, no patience, so I don't really know (or want to know) how to cross compile.</p>
<p>With that out of the way, let's get on with it.</p>
<h2>What we're going to do</h2>
<p>The plan is:</p>
<ol>
<li>Download the source for the binary</li>
<li>Clone Netlify's build image</li>
<li>Enter the environment via docker</li>
<li>Build the source from <em>inside</em> the build image</li>
</ol>
<h2>Grab some source</h2>
<p>The first thing required to compile for Netlify is the source of the binary. For that the source needs to be downloaded. Most *nix like code (if open source) offers source.</p>
<p>If there's mention of ubuntu, I'll also gravitate towards that (though I don't think it matters if I'm compiling from source, but who really knows, eh?!).</p>
<p>In my particular case, I'm going to download the source code and decompress the file so it's read to be compiled. From the <a href="https://goaccess.io/download#installation">directions on goaccess</a> this is just the following parts, ignoring the build directions (for now).</p>
<pre><code class="language-bash">$ <span class="token function">wget</span> https://tar.goaccess.io/goaccess-1.3.tar.gz
$ <span class="token function">tar</span> -xzvf goaccess-1.3.tar.gz
</code></pre>
<p>Next we're going to access this source from <em>inside</em> the Netlify build image.</p>
<h2>Create a copy of Netlify's build image</h2>
<p>The nice folks at Netlify provide this as open source, so it's possible to download and run arbitrary code inside their build process on your own local machine. This is exactly how compilation is going to happen.</p>
<p>The detailed directions are on <a href="https://github.com/netlify/build-image">Netlify's build image repo</a>, but slightly nicer instructions <a href="https://www.netlify.com/blog/2016/10/18/how-our-build-bots-build-sites/">from a 2016 post</a>. You'll also need <a href="https://www.docker.com/products/docker-desktop">Docker</a> installed, though installation is all you need as copy and paste can get you the rest of the way there.</p>
<p>Once docker is installed, in your working directory (this can be your repo, or where ever you like - maybe a reusable location), run the following (directly copied from Netlify's blog post - sorry):</p>
<pre><code class="language-bash">$ docker pull netlify/build:xenial <span class="token comment"># this can take a few minutes</span>
$ <span class="token function">git</span> clone https://github.com/netlify/build-image
$ <span class="token function">cd</span> build-image
$ ./test-tools/start-image.sh <span class="token operator">&lt;</span>directory-with-binary-source<span class="token operator">></span>
</code></pre>
<p>Now you'll have dropped inside Netlify's build image which is the same environment that will run you code. This is useful for debugging, but in our case this is the environment that some source code will be compiled.</p>
<h2>Inside Netlify's build image</h2>
<p>The directory that we specified on <code>start-image.sh</code> (the <code>&lt;directory-with-binary-source&gt;</code>) is available in the image at <code>/opt/repo</code>. So we navigate into this directory, and then execute the sequence of build commands. In my case:</p>
<pre><code data-plain="" class="language-bash">buildbot@1a81c740826d:~$
buildbot@1a81c740826d:~$ <span class="token function">cd</span> /opt/repo/
buildbot@1a81c740826d:/opt/repo$ <span class="token function">cd</span> goaccess-1.3
buildbot@1a81c740826d:/opt/repo/goaccess-1.3$ ./configure --enable-geoip
buildbot@1a81c740826d:/opt/repo/goaccess-1.3$ <span class="token function">make</span>
</code></pre>
<p>In my particular case, the default compile instructions wouldn't work without <code>ncursesw</code> dependency, but I didn't need it, so I was able to compile <a href="https://github.com/allinurl/goaccess/issues/102">without a specific flag</a>.</p>
<p>Once the <code>make</code> command has finished, the binary will have been compiled somewhere in my <code>goaccess-1.3</code> directory.</p>
<p>The only thing left to do is to move the newly compiled binary into my own repo (in my case, I'll put it in <code>./bin</code>), and the artefacts to be cleaned up.</p>
<p><em>Originally published on <a href="https://remysharp.com/2019/05/20/compiling-binaries-for-netlify">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>How I got AWS running inside Netlify</title>
      <guid isPermaLink="false">aws-inside-netlify</guid>
      <link>https://remysharp.com/2019/05/18/aws-inside-netlify</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      <description><![CDATA[In a recent attempt to move away from Google analytics I wanted to be able to run the AWS command line tool from inside of Netlify's build process. Except it turns out it wasn't so easy to get AWS's environment variables in Netlify because Netlify have some undocumented reserved environment variables:]]></description>
      <content:encoded><![CDATA[
<p>In a recent attempt to move <em>away</em> from Google analytics I wanted to be able to run the AWS command line tool from <em>inside</em> of Netlify's build process. Except it turns out it wasn't so easy to get AWS's environment variables in Netlify because Netlify have some undocumented reserved environment variables:</p>
<p><img src="https://remysharp.com/images/netlify-aws.png" alt="AWS env value error"></p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>Constraints</h2>
<p>The <a href="https://aws.amazon.com/cli/">AWS command line tool</a> will only read your credentials from two very defined locations:</p>
<ol>
<li>From carefully named environment variables</li>
<li>From a credentials file store at <code>~/.aws/credentials</code></li>
</ol>
<p>The arguments to the tool are very limited, and don't offer options to pass in the credentials. This is understandable as it would the expose secret tokens in the history of the shell (or shell logs).</p>
<p>The second constraint is that, in my case, I <em>had</em> to use the AWS command line tool. If I were using Node.js or Python or Ruby and including the AWS library as a dependency, then I could name the environment values as I please. However I was using <code>aws</code> from Bash so I was constrained by the two options I mention earlier for authorisation.</p>
<h2>My solution</h2>
<p>I tried many different ways to get this to work and <a href="https://twitter.com/rem/status/1129462220876931072">failed many (many) times</a>. I think I can see one other way to solve this problem, but the solution that follows worked for me.</p>
<h3>Step 1: alternatively named env values</h3>
<p>In Netlify's deploy/environment panel I add the following three environment values:</p>
<ul>
<li><code>ENV_ACCESS_KEY_ID</code></li>
<li><code>ENV_DEFAULT_REGION</code></li>
<li><code>ENV_SECRET_ACCESS_KEY</code></li>
</ul>
<h3>Step 2: during build, generate credentials</h3>
<p>My project uses a Bash script during the build phase. So the first thing I do is to generate a credentials file substituting the environment values in:</p>
<pre><code data-plain="true" class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> ./aws <span class="token operator">&lt;&lt;</span><span class="token string">EOL
[netlify]
region = <span class="token variable">$ENV_DEFAULT_REGION</span>
aws_secret_access_key = <span class="token variable">$ENV_SECRET_ACCESS_KEY</span>
aws_access_key_id = <span class="token variable">$ENV_ACCESS_KEY_ID</span>
EOL</span>
</code></pre>
<p>This uses a <a href="https://stackoverflow.com/a/2500451">here document</a> to save multiple lines to a file which also substitutes my custom AWS environment values.</p>
<p>Since Netlify's build contents is private, no one has access to read my secret values. I can also test this worked (or understand what failed) by download the build which is tucked away in Netlify's UI:</p>
<p><img src="https://remysharp.com/images/netlify-download.png" alt="Netlify download"></p>
<h3>Step 3: change credentials source</h3>
<p>Tucked away inside of AWS's <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html">environment values</a> that it reads, is a value that defines where the credentials is read. Why this isn't an argument on the command line, I've no idea.</p>
<pre><code data-plain="true" class="language-bash">AWS_SHARED_CREDENTIALS_FILE<span class="token operator">=</span>./aws aws --profile netlify …
</code></pre>
<p>Now the correct credentials are loaded into the <code>aws</code> tool and I'm able to run the commands I need. In my case, I was calling <code>aws s3 sync</code>, but that's for another blog post.</p>
<p><em>Originally published on <a href="https://remysharp.com/2019/05/18/aws-inside-netlify">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>Bare Import Cost</title>
      <guid isPermaLink="false">bare-import-cost</guid>
      <link>https://remysharp.com/2019/05/10/bare-import-cost</link>
      <pubDate>Fri, 10 May 2019 00:00:00 +0000</pubDate>
      <description><![CDATA[This post is about import in JavaScript. This post, I'm afraid doesn't have any grand solutions or even semi-grand conclusions. In fact, by way of disclaimer, this is more of a stream of conscious thought.
In my travels across the web lately, I keep coming across JavaScript libraries whereby the very first line in the &quot;usage&quot; is:
import lib from 'awesome-lib';

Except that single, seemingly simple line, carries a lot of hidden work and understanding behind it. So here begins my complaint. But first here's an unimported bear…]]></description>
      <content:encoded><![CDATA[
<p>This post is about <code>import</code> in JavaScript. This post, I'm afraid doesn't have any grand solutions or even semi-grand conclusions. In fact, by way of disclaimer, this is more of a stream of conscious thought.</p>
<p>In my travels across the web lately, I keep coming across JavaScript libraries whereby the very first line in the &quot;usage&quot; is:</p>
<pre><code class="language-js"><span class="token keyword">import</span> lib <span class="token keyword">from</span> <span class="token string">'awesome-lib'</span><span class="token punctuation">;</span>
</code></pre>
<p>Except that single, seemingly simple line, carries a lot of hidden work and understanding behind it. So here begins my complaint. But first here's an unimported bear…</p>
<p><img src="https://remysharp.com/images/bear-import.jpg" alt="A bear…imported" title="They said I needed more pictures in my posts, so here's something totally tangently disappropriate"></p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>So delicately simple</h2>
<p>This simple statement of code is incredible powerful. By no means do I intend to undermine the years <em>and years</em> of work that has gone on and laid the groundwork to <em>allow</em> us to have an import statement in the browser.</p>
<p>Today, in all the modern browsers, <a href="https://caniuse.com/#search=modules">we can use</a> an <code>import</code> statement on the web with no additional tooling. Dynamic imports aren't far behind either (an import that returns a promise - useful for lazy loading).</p>
<p>Right on the edge of the horizon are <a href="https://github.com/WICG/import-maps">Import Maps</a> which will bring support to the browser for &quot;bare import specifiers&quot; (currently <a href="https://jspm.org/docs/guide#browser-modules-with-import-maps">available behind flags</a> in Canary). Once import maps are stable feature of (at least<sup>†</sup>) the latest browsers, then imports have come to [a fuller] fruition.</p>
<p><small>† Why &quot;at least&quot; - what about cross browser support? I explain in the section on <a href="#prototyping-the-web">prototyping</a></small></p>
<p>Until then, in the browser we can do this:</p>
<pre><code class="language-js"><span class="token keyword">import</span> lib <span class="token keyword">from</span> <span class="token string">'./my-lib.js'</span><span class="token punctuation">;</span>
</code></pre>
<p>…but we can't do this:</p>
<pre><code class="language-js"><span class="token keyword">import</span> lib <span class="token keyword">from</span> <span class="token string">'your-lib'</span><span class="token punctuation">;</span>
</code></pre>
<p>Well, you <em>can</em>, but it requires a lot more specialist knowledge.</p>
<h2>I really want to do that!</h2>
<p>Importing modules brings a stability to development that historically browsers didn't have the pleasure of hosting.</p>
<p>JavaScript has a beautiful simplicity that everything can access the global scope. This makes development forgiving during the early days, but as authored software becomes more sophisticated a bit of privacy is desired.</p>
<p>Modules also offer code organisation which can (or &quot;should&quot;) lead to better and more complete tests. Tests lead to stability and stability can be enjoyed by both the business and it's visitors.</p>
<p>There's also a matter of security: global scope provides another attack vector for potential bad actors that are included onto web sites - third party adverts are a potential entry point.</p>
<hr>
<p>Thankfully the desire for a module system arrived years ago. My first encounters were with <a href="https://requirejs.org/">require.js</a>. However, I always struggled with the (now relatively small) overhead required to make a compatible module. This was called <abbr title="Asynchronous Module Definition">AMD</abbr> - here's <a href="https://www.davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/">a primer if you wish</a> to go down memory lane.</p>
<p>Of course we now have Browserify, Rollup, Webpack and a slew of other tools that <em>allow</em> developers to benefit from modules. The crown jewel of tools is (<abbr title="In my humble opinion">IMHO</abbr>) Babel.</p>
<p>Babel allowed us (and still does) to write tomorrow's code, today.</p>
<p>These tools are just the tip of the iceberg when it comes to tooling and workflow required to import, dare I say, synthetically for the web.</p>
<p>I digress, let's get back to today.</p>
<h2>Bare import specifiers</h2>
<p>This is what I use all the time in <a href="https://nodejs.com">Node.js</a> when I'm importing a module. Except I use the <code>require</code> function:</p>
<pre><code class="language-js"><span class="token keyword">const</span> lib <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'your-lib'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Now it's a little unfair to compare <code>require</code> from Node to <code>import</code> for the web, and <a href="https://www.youtube.com/watch?v=35ZMoH8T-gc">Myles Borins did an excellent break down of this at jsconf.eu 2018</a>.</p>
<p>It's worth at least being mindful that there's a potentially complex system hidden underneath the software that's going to resolve exactly where <code>your-lib</code> exists. For Node, it's a <a href="https://nodejs.org/api/modules.html#modules_all_together">sequence of resolution logic</a>. Node however uses a synchronous method to resolve and running modules, whereas the web doesn't have a synchronous loading method at all. The web is async.</p>
<p>As it is today, a bare import, using the <code>import</code> statement, in a browser, isn't possible without a build tool doing some heavy lifting first.</p>
<h2>Prototyping the web</h2>
<p>I've come to realise in recent years that my strength in development is prototyping. It's something that I'm good at and enjoy doing. My recent work at CERN to rebuild the <a href="http://worldwideweb.cern.ch/">WorldWideWeb</a> in 5 days is a great example of this.</p>
<p>The web and browser combined, are what make prototyping so incredibly accessible. Software, good, stable, secure software takes a long time to write. The browser allows for quick, hacky, cobble-ly code to be achieve in a quite impressively small amount of time.</p>
<p>For me to build the WorldWideWeb.app browser in a week, meant that I didn't have time to build out the perfect workflow. I needed something that allowed me to start producing usable interfaces as quickly as possible. I knew that I would need a helping hand from larger frameworks (like React in my case) and I chose to use <a href="https://parceljs.org/">Parcel.js</a> for my bundling needs. Importantly, this allowed me to <code>import</code> and dynamically import early on in the project and quickly focus on the real problems at hand.</p>
<p>I absolutely adore this part of my work: the fact that so little is required to start to play with code in the browser.</p>
<p>As such, I <em>want</em> to be able to play around in the browser with just a single file: an HTML file with a sprinkling of <code>&lt;script&gt;</code> tags. I don't relish the thought of having the urge to play, and then being slamming back down to earth as I realise that to <code>import lib from 'your-lib'</code> I must first decipher and roll out a way of importing. After which I usually encounter so other shiny distraction and have forgotten about my original intentions.</p>
<p>…ergggh, what was I trying to say?</p>
<hr>
<p>If you're writing some documentation for your project, please give a little thought to how your reader is going to interpret the <code>import</code> statement to start using the project.</p>
<p>New developers to the web have enough on their plate with the plethora of frameworks, testing utilities, linting tools, editor plugins, transpilation tools, transformation tools, transfiguration tools and all the other amazing, really amazing, choices in front of them. Tripping them up at the first line of the code seems a little unfair.</p>
<p>One day we will be able to install web modules and import them. For now maybe we can use <a href="https://www.pikapkg.com/blog/pika-web-a-future-without-webpack">pikapkg</a> or perhaps import directly from <a href="https://unpkg.com/">unpkg</a>'ed modules or perhaps <a href="https://medium.com/samsung-internet-dev/isomorphic-es-modules-151f0d9a919b">hack our servers</a>.</p>
<p>Until then, I'll probably keep actively (trying) to remove my build tools and probably <a href="https://mobile.twitter.com/rem/status/1126479414802440192">continue to be Moany McMoan</a> on Twitter.</p>
<p><em>Originally published on <a href="https://remysharp.com/2019/05/10/bare-import-cost">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>Search &amp; dynamic shortcut links for a static site</title>
      <guid isPermaLink="false">search-dynamic-shortcut-links</guid>
      <link>https://remysharp.com/2019/05/02/search-dynamic-shortcut-links</link>
      <pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate>
      <description><![CDATA[In porting my blog from Heroku to Netlify there were a few dynamic aspects that I had to reconsider in moving to a fully static hosting platform.
Two features, which in my case, are closely connected, were search and dynamic shortcut links. These shortcut links meant that I could visit remysharp.com/twitter and it would redirect to the latest post where the slug contains &quot;twitter&quot;.]]></description>
      <content:encoded><![CDATA[
<p>In porting my blog from Heroku to Netlify there were a few dynamic aspects that I had to reconsider in moving to a fully static hosting platform.</p>
<p>Two features, which in my case, are closely connected, were search and dynamic shortcut links. These shortcut links meant that I could visit remysharp.com/twitter and it would redirect to the latest post where the slug contains &quot;twitter&quot;.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><hr>
<p>It's possible you can guess how most of this works, so you <a href="#squashing-text">might want to skip</a> to how I'm reducing the search content and then how I'm prioritising results. After this section, I'll explain how shortcut links work.</p>
<hr>
<h2>How it used to work</h2>
<p>Previously my blog was hosted on Heroku. The content (blog posts, pages, etc) were fully static. However, the server had a dynamic aspect to it which meant that I could execute some logic on the server side.</p>
<pre><code class="language-js"><span class="token comment">/* match slug partial and redirect to post */</span>
route<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/:slug'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// if our slug matches *anywhere* in the slug of a post</span>
  <span class="token comment">// find will return the *first* match, which is the</span>
  <span class="token comment">// latest post. If there's no match, then do a normal</span>
  <span class="token comment">// request (which might lead to a 404)</span>
  <span class="token keyword">var</span> slug <span class="token operator">=</span> slugs<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>
    <span class="token parameter">slug</span> <span class="token operator">=></span> slug<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>slug<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>slug<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// blogs is a global object with all the post data</span>
    <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token function">fullUrlForPost</span><span class="token punctuation">(</span>blogs<span class="token punctuation">[</span>slug<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">redirect</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>The above code is simplified from my original <a href="https://github.com/remy/remysharp.com/blob/73fb7c59f1f749a9e6af2786d544ff1ff2e2f1a7/server.js#L287">server.js</a></p>
<p>The <a href="https://github.com/remy/remysharp.com/blob/73fb7c59f1f749a9e6af2786d544ff1ff2e2f1a7/server.js#L99">search on the server side</a> used elastic search (from a free <a href="https://bonsai.io">Bonsai</a> add-on via Heroku). In fact, upon releasing a new blog post would also require updating the elastic search index (which was part of my workflow, but another step in the chain).</p>
<p>So if I'm moving to an entirely static solution, how do I solve these two features that I wanted to keep?</p>
<h2>Solving search first</h2>
<p>The refactor of my blog is heavily inspired by way <a href="https://11ty.io">11ty</a> works (it didn't use it directly because of rods I had made for my own back using Pug and Harp previous - but it's fine). As such, I came across <a href="https://www.hawksworx.com/blog/adding-search-to-a-jamstack-site/">Phil Hawksworth's post about client side search</a> and took inspiration from his code whilst making my own improvements.</p>
<p>One important side note (as Phil points out in his post): the form for search should be backed with Google or DuckDuckGo (or other).</p>
<p>I'm currently pointing to <code>https://www.google.co.uk/search</code> with a hidden field of <code>q=site:https://remysharp.com</code> and the actual search field is named <code>q</code>, and Google will join the queries together. Sadly, at time of writing, DuckDuckGo doesn't join the search fields (so it redirects to searching <em>all</em> of remysharp.com).</p>
<h3>The parts to search</h3>
<p>Following in Phil's steps, I need three parts:</p>
<ol>
<li>The HTML that renders my search form</li>
<li>A JSON blob of searchable content from my blog posts</li>
<li>JavaScript that will do client side search (or more specifically: filtering)</li>
</ol>
<h3>HTML</h3>
<p>My HTML looks like this - I don't think it warrants explaining except the <code>script</code> tag at the end:</p>
<pre><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.google.co.uk/search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Search for:
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>for<span class="token punctuation">"</span></span> <span class="token attr-name">autofocus</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autofocus<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>q<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fragment of post...<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>q<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>q<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>site:https://remysharp.com<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search-results<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!-- placeholder for results --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>result-template<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>template<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token operator">&lt;</span>li<span class="token operator">></span>
   <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"{{url}}"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
<p>I'm using a <code>script</code> tag with an <em>invliad</em> <code>type</code> attribute. This means it's ignored by the browser as I intend to use this in my JavaScript.</p>
<h3>Search data / JSON</h3>
<p>In my particular case I'm using <a href="https://pugjs.org">Pug</a>, but the aim is the same: generate a static file that contains a (possibly large) JSON dump of my posts:</p>
<pre><code class="language-pug"><span class="token punctuation">-</span><span class="token code"><span class="token operator">--</span></span>
<span class="token tag">layout<span class="token punctuation">:</span></span> <span class="token tag">false</span>
<span class="token tag">permalink<span class="token punctuation">:</span></span> /js/search<span class="token punctuation">-</span>data<span class="token punctuation">.</span>js
<span class="token punctuation">-</span><span class="token code"><span class="token operator">--</span></span>
<span class="token punctuation">-</span><span class="token code"> <span class="token keyword">var</span> <span class="token function-variable function">format</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> url<span class="token punctuation">,</span> output<span class="token punctuation">,</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="token punctuation">-</span><span class="token code">   url<span class="token punctuation">,</span> title<span class="token punctuation">:</span> data<span class="token punctuation">.</span>title<span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token function">squash</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>output<span class="token punctuation">)</span></span>
<span class="token punctuation">-</span><span class="token code"> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="token punctuation">-</span><span class="token code"> <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>collections<span class="token punctuation">.</span>blog<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>

<span class="token punctuation">|</span> var searchData <span class="token punctuation">=</span> <span class="token punctuation">!</span>{ data };
</code></pre>
<p>The result is a file in <code>/js/search-data.js</code> containing:</p>
<pre><code class="language-js"><span class="token keyword">var</span> searchData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"url"</span><span class="token punctuation">:</span><span class="token string">"/2019/04/24/all-your-envs-in-a-row"</span><span class="token punctuation">,</span><span class="token string">"text"</span><span class="token punctuation">:</span><span class="token string">"all your envs row ve used zeit s now platform ll know get environment values readable by code have jump few hoops there are solutions place can put m able keep where d expect them caveats this technique works most common cases ll proba…"</span> <span class="token comment">/* snipped */</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre>
<p>Remember this isn't 11ty - even though there's a <code>collections</code> object. What's important to know is that <code>collections.blog</code> is an array of blog posts I've written with the front matter data in <code>.data</code> and the <code>output</code>, in my case, is the rendered post (rather than the source, which I'll explain in a moment).</p>
<p>The plan is to load this in with the client side JavaScript and use the data to provide search results.</p>
<h3>Squashing text</h3>
<p>The <code>squash</code> function, importantly, is what strips out redundant characters and &quot;low quality&quot; text (words like 'and', 'or', etc). This is closely based on Phil's work.</p>
<pre><code class="language-js">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">squash</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ensure the text is</span>
  <span class="token keyword">const</span> content <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// remove all html elements and new lines</span>
  <span class="token comment">// this also ensures code blocks are removed</span>
  <span class="token comment">// from the search results - and they make up</span>
  <span class="token comment">// a large part of my posts</span>
  <span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token regex">/(&amp;lt;.*?&amp;gt;)/gi</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> plain <span class="token operator">=</span> <span class="token function">unescape</span><span class="token punctuation">(</span>
    content
      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>re<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment">// strip escaped code and the contents</span>
      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token operator">&lt;</span>code<span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">&lt;</span>\<span class="token operator">/</span>code<span class="token operator">></span><span class="token operator">/</span>gms<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment">// strip entire code blocks</span>
      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/&lt;\/?[^>]+(>|$)/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment">// remove tags from around text</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// remove duplicated words and duplicated spaces</span>
  <span class="token comment">// new Set ensures unique elements in the collection,</span>
  <span class="token comment">// then the `...` spread operator converts the set</span>
  <span class="token comment">// to an array so it can be joined back up.</span>
  <span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>new <span class="token class-name">Set</span><span class="token punctuation">(</span>plain<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/\s+/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// remove short and less meaningful words</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>
    <span class="token regex">/\b(the|a|an|and|am|you|I|to|if|of|off|me|this|that|with|have|from|like|when|just|your|some|also|know|there|because|actually|recently|something)\b/gi</span><span class="token punctuation">,</span>
    <span class="token string">''</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[^\w\s]/gm</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token comment">// fail safe: remove non-chars &amp; non-white space</span>
  <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\b\w{1,2}\b/gm</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment">// remove any "words" of 1 or 2 characters</span>
  <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s{2,}/gm</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token comment">// compress whitespace to a single space</span>

  <span class="token comment">// trim for good measure!</span>
  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>My code above has some duplication inside of it (in the regular expressions), but it does a good job of leaving most of what's important.</p>
<hr>
<p><strong>Performance tip:</strong> if you generate your own search data file, take a bit of time to find low value words that you use a lot and remove them from the results. Do not just copy my example above as it's just a sample of <a href="https://github.com/remy/remysharp.com/blob/master/lib/squash.js">what I remove</a>.</p>
<p>I've <a href="https://jqterm.com/8050a199a4f696ec61f2018c924f3961?query=map%28.text%20%7C%20split%28%22%20%22%29%29%20%7C%20flatten%20%23%20convert%20into%20an%20array%20of%20words%0A%7C%20map%28select%28length%20%3C%204%29%29%20%23%20pick%20only%20words%20of%20a%20specific%20length%0A%7C%20reduce%20.%5B%5D%20as%20%24item%20%28%7B%7D%3B%20.%5B%24item%5D%20%2B%3D%201%29%20%23%20count%20unique%20words%0A%7C%20to_entries%20%7C%20map%28select%28.value%20%3E%202%29%29%20%23%20pick%20results%20with%20more%20than%202%20duplicates%0A%7C%20sort_by%28.value%29%20%7C%20reverse%20%7C%20from_entries">written a jq query</a> that you can use to get a good idea of word frequency. Swap out my example source JSON with your own and tweak the numbers (in the word length) to get a sense of which words you can remove. Using this method allowed me to reduce my data file by 70KB.</p>
<hr>
<h3>Searching and prioritising results</h3>
<p>First of all, the generated <code>search-data.js</code> is included in my HTML search page. In my case, for (at time of writing) 485 blog posts, that means 580KB of JavaScript (219KB compressed to my visitor).</p>
<p>As the visitor searches, my code checks their query against the following criteria and gives them &quot;hit points&quot;:</p>
<ul>
<li>URL - 100 hit points per match</li>
<li>Title - 100 hit points per match</li>
<li>Body text - 1 point for words less than 5 chars, otherwise hit points = word length</li>
</ul>
<p>Finally, if there's <em>any</em> hit, the recency of the post adds points. 100 points divided by the number of years old the post is (where posts this year are &quot;1 year&quot;). I took some time tweaking this algorithm and this is what worked well for me.</p>
<p>Hidden in comments on my own search results page are comments with the hit count &quot;weight&quot; (which I exposed during testing) which gives you an idea how it works:</p>
<p><img src="https://remysharp.com/images/search-hit-points.png" alt=""></p>
<p>The hit points determine the order of the results. Rather than dumping a lot of JavaScript into this post, you can <a href="https://github.com/remy/remysharp.com/blob/master/public/js/search.js">view my search JavaScript here</a> - specifically the <code>find</code> function is where all the hit point calc happens.</p>
<p>Once the candidates are collected, the results are interpolated into the template (the script tag with the <code>type=&quot;template&quot;</code> from earlier). Again, this lives in my search JavaScript and of course you can/should use your own version of templating.</p>
<hr>
<p>So that's search.</p>
<p>Dynamic shortcut links extend on the search data, and I rather like it.</p>
<h2>Dynamic shortcut links</h2>
<p>Given that I host my blog with Netlify, I'm able to define my own custom redirects. If you navigate to a URL that doesn't exist, you'll hit <a href="https://remysharp.com/404">my custom 404 page</a>.</p>
<p>This is the source to my 404 page:</p>
<pre><code class="language-pug"><span class="token tag">script</span><span class="token punctuation">.</span><span class="token multiline-script">
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">{</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>collections<span class="token punctuation">.</span>blog<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">_</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> slug<span class="token punctuation">:</span> _<span class="token punctuation">.</span>slug<span class="token punctuation">,</span> url<span class="token punctuation">:</span> _<span class="token punctuation">.</span>url <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
  <span class="token keyword">const</span> pathname <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> match <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">_</span> <span class="token operator">=></span> _<span class="token punctuation">.</span>slug<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span> window<span class="token punctuation">.</span>location <span class="token operator">=</span> match<span class="token punctuation">.</span>url<span class="token punctuation">;</span>
</span>
<span class="token tag">h1</span> <span class="token plain-text">Redirecting...</span>

<span class="token tag">script</span><span class="token punctuation">.</span><span class="token multiline-script">
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">)</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'Four oh four...'</span>
</span>
<span class="token comment">// rest of my "normal" 404 page here</span>
</code></pre>
<p>What does this do? When the page loads, JavaScript immediately kicks in and checks if the URL (pathname only) is a partial match <em>any</em> of the slugs for my blog posts. Remember that <code>.find</code> for JavaScript arrays returns the first result (and my <code>collections.blog</code> is ordered by most recent first).</p>
<p>If there's a match, JavaScript immediately redirect - and since JavaScript is blocking it prevents the rest of the 404 page from appearing (which shows a list of my most recent posts).</p>
<p>If there's no match, the <code>h1</code> heading is changed to my 'Four oh four…' title (yes, a poor joke!). If you inspect the source to <a href="https://remysharp.com/404">the 404 page</a> you'll see it's crammed full of JSON. It clocks in at 13KB with all that JSON, which isn't terrible, and comparable to any image on my blog.</p>
<p>The Netlify redirect I use is also relatively straight forward (and probably recommended):</p>
<pre><code class="language-text">/* /404.html 404
</code></pre>
<p>So that's it. You can now jump to the latest post on failing by typing <a href="https://remysharp.com/fail">&quot;remysharp.com&quot; &quot;slash&quot; &quot;fail&quot;</a> into the browser URL and it'll redirect to the correct post.</p>
<p>All static, with help from Netlify's amazing redirect feature.</p>
<p><em>Originally published on <a href="https://remysharp.com/2019/05/02/search-dynamic-shortcut-links">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>All your envs in a row 🦆🦆🦆</title>
      <guid isPermaLink="false">all-your-envs-in-a-row</guid>
      <link>https://remysharp.com/2019/04/24/all-your-envs-in-a-row</link>
      <pubDate>Wed, 24 Apr 2019 00:00:00 +0000</pubDate>
      <description><![CDATA[If you've used Zeit's Now platform you'll know to get your environment values readable by your code, you have to jump a few hoops.
There are solutions in place, you can put your environment values in a now.json file and you can use the zeit/now-env to read the values during dev, but I'm not a fan.
My preference is to use .env files and split across .env.local, .env.production etc (which as it happens goes against the Twelve-Factor App manifesto - but that's my choice). So here's a command that moves all the values from your .env into the command line during deployment.]]></description>
      <content:encoded><![CDATA[
<p>If you've used <a href="https://zeit.co/now">Zeit's Now</a> platform you'll know to get your environment values readable by your code, you have to jump a few hoops.</p>
<p>There are solutions in place, you can put your environment values in a <code>now.json</code> file and you can use the <a href="https://github.com/zeit/now-env">zeit/now-env</a> to read the values during dev, but I'm not a fan.</p>
<p>My preference is to use <code>.env</code> files and split across <code>.env.local</code>, <code>.env.production</code> etc (which as it happens goes <a href="https://www.npmjs.com/package/dotenv#should-i-have-multiple-env-files">against the Twelve-Factor App manifesto</a> - but that's my choice). So here's a command that moves all the values from your <code>.env</code> into the command line during deployment.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>awk'ward magic</h2>
<pre><code class="language-bash"><span class="token function">awk</span> <span class="token string">'{ sub(/#.*$/, "") } !/^\s*$/ { printf("-e %s ", <span class="token variable">$0</span>)}'</span> .env
</code></pre>
<p>This command will read your <code>.env</code> file and:</p>
<ol>
<li>Strip comments, anything starting with <code>#</code></li>
<li>Ignore blank lines (which we may have if there was a comment on it's own line)</li>
<li>Print <code>-e PROP=VALUE</code> (where prop and value were in the <code>.env</code>)</li>
<li>Using <code>printf</code> ensures all the arguments are on a single line</li>
</ol>
<h2>Using in the deploy</h2>
<p>In my <code>scripts</code> as part of my <code>package.json</code> file, I have a command called <code>deploy</code> which takes the result of the command above and passes it directly to the <code>now</code> deployment tool.</p>
<p>Note that escaping is requires on the <code>\s</code> and the <code>&quot;</code> characters:</p>
<pre><code class="language-json"><span class="token punctuation">{</span>
<span class="token property">"deploy"</span><span class="token operator">:</span> <span class="token string">"now $(awk '!/^#|^\\s*$/ { printf(\"-e %s \", $0)}' .env)"</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Now I'm able to keep my environment values where I'd expect them to be.</p>
<h2>Caveats</h2>
<p>This technique works for most common cases, but it'll probably hit issues if there are things like quotes or double quotes in your env values. It also doesn't let you read the env value from the environment during deploy (which, perhaps you're using CI for deployment, <abbr title="I don't know ¯\_(ツ)_/¯">IDK</abbr>).</p>
<p>That said, it works pretty well for me :)</p>
<p><em>Originally published on <a href="https://remysharp.com/2019/04/24/all-your-envs-in-a-row">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>How to put your kid in Scratch</title>
      <guid isPermaLink="false">scratch-kid</guid>
      <link>https://remysharp.com/2019/04/15/scratch-kid</link>
      <pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate>
      <description><![CDATA[I was asked by a few parent friends how I put my kid in Scratch, so here's my guide to how to put (and animate!) your kid in scratch ala:]]></description>
      <content:encoded><![CDATA[
<p>I was asked by a few parent friends how I put my kid in <a href="https://scratch.mit.edu">Scratch</a>, so here's my guide to how to put (and animate!) your kid in scratch ala:</p>
<p><img src="https://remysharp.com/images/scratch-kid/aim.jpg" alt=""></p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>1. Photos</h2>
<p>I used my phones camera to capture these pictures. He changed his pose as I took each picture. You should try to find a relatively visually quite surrounding for the picture. Here's the original photos I used:</p>
<p><img src="https://remysharp.com/images/scratch-kid/photos.jpg" alt=""></p>
<p>It also helped that there was contrast between his clothes and the background around him.</p>
<p>Then transfer these pictures to a computer so you can upload them to a site to <em>remove</em> the background.</p>
<h2>2. Removing the background of the photo</h2>
<p>Visit <a href="https://www.remove.bg">www.remove.bg</a> in your browser, then one at a time, click &quot;select a photo&quot; and upload the photos you took, then download the newly generated photo.</p>
<p>The site will also handle correctly rotating the image for you:</p>
<p><img src="https://remysharp.com/images/scratch-kid/removebg.jpg" alt=""></p>
<p><em>How does it work? Machine Learning commonly known as AI. Using a metric tonne of images that have already been categorised to identify what's the subject and what's the background, this data is then used on new images to distinguish background from foreground.</em></p>
<p>Note that your photos <strong>are not</strong> stored on the site's servers and not used for the AI training. <a href="https://www.remove.bg/about">More under &quot;Do you use my data to train your AI&quot;</a>.</p>
<p>Process each photo then head over to <a href="https://scratch.mit.edu">scratch</a> for the last part.</p>
<h2>3. Adding to scratch</h2>
<p>You're going to create a sprite that has multiple <em>costumes</em> using the images you've created.</p>
<h3>3.1. Create a new sprite</h3>
<p>From the bottom right, you need to hover over the sprite icon and select &quot;Upload sprite&quot;</p>
<p><img src="https://remysharp.com/images/scratch-kid/add-sprite.png" alt=""></p>
<p>Now select one of the processed photos.</p>
<p>Don't resize the image or reposition it at this point - you're going create the sprite and all it's different &quot;costumes&quot; (the positions your kid is posing) and then you'll be able to re-position and resize the sprite later.</p>
<p>Select the sprite and select the &quot;Costumes&quot; tab (towards the top left of the screen). You should see this:</p>
<p><img src="https://remysharp.com/images/scratch-kid/added-sprite.jpg" alt=""></p>
<h3>3.2 Adding kid positions</h3>
<p>For more poses, you need to create more costumes for the sprite.  Hover over the icon in the bottom left and select &quot;Upload Costume&quot; from the menu (second from the top).</p>
<p>Keep uploading each processed photo you took, until you have something like this:</p>
<p><img src="https://remysharp.com/images/scratch-kid/costume.jpg" alt=""></p>
<p>It's also worth giving the costumes a name that's memorable, for instance &quot;kick&quot; or &quot;pre-kick&quot; etc.</p>
<h3>3.3 Making the sprite move</h3>
<p>Switch over to the &quot;Code&quot; panel, and with your kid's sprite selected, you're going to make the sprite cycle through some costumes when a key is pressed.</p>
<p><img src="https://remysharp.com/images/scratch-kid/final.jpg" alt=""></p>
<p>These blocks tell the sprite: when the space key is pressed, immediately change to the &quot;pre-kick&quot; costume, then wait 0.1 seconds, then change to &quot;kick&quot; then wait 0.2 seconds, then return to the &quot;ready&quot; costume. The effect is he completes a kick.</p>
<ul>
<li>&quot;when [space] is pressed&quot; is found in the <em>Events</em> blocks</li>
<li>&quot;switch costume to [ … ]&quot; is in the <em>Looks</em> blocks</li>
<li>&quot;wait [x] seconds&quot; is in the <em>Control</em> blocks</li>
</ul>
<p>You can also add your own background or other sprites and add more key presses for different events to occur, like jump, or run left or run right, etc.</p>
<p>This final stage is where you can make adjustments to the size and position of the sprite (rather than in the costumes panel). In this case, my kid has been made to be 120% large and rotated slightly.</p>
<p>Have fun!</p>
<p><em>Originally published on <a href="https://remysharp.com/2019/04/15/scratch-kid">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>Code highlighting: server or client?</title>
      <guid isPermaLink="false">code-highlighting-server-or-client</guid>
      <link>https://remysharp.com/2019/04/09/code-highlighting-server-or-client</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate>
      <description><![CDATA[Recently I posted a quick poll to Twitter asking:

Do you think syntax highlighting (in blog posts, examples, etc) be in client side or server side?

For the first half of the day the poll ran, client side held 2/3rds of the votes. It ended with a 60:40 split between client and server.

Though (without giving it too much thought) favour client side (I'll come on to my reasons in a bit), I was surprised at the results being around 2/3rds preferring client side. So I decided to look at my own blog posts to see what would suit my system best.
There's no TL;DR for this post because I suspect if you're reading this blog post you already know the answer that fits about 95% of the time. My aim for this post was to dispel any misconceptions I might have had.]]></description>
      <content:encoded><![CDATA[
<p>Recently I posted a <a href="https://mobile.twitter.com/rem/status/1112821258259922950">quick poll</a> to Twitter asking:</p>
<blockquote>
<p>Do you think syntax highlighting (in blog posts, examples, etc) be in client side or server side?</p>
</blockquote>
<p>For the first half of the day the poll ran, client side held 2/3rds of the votes. It ended with a 60:40 split between client and server.</p>
<p><img src="https://remysharp.com/images/code-highlight/poll-result.png" alt="Final results of the poll"></p>
<p>Though (without giving it too much thought) favour client side (I'll come on to my reasons in a bit), I was surprised at the results being around 2/3rds preferring client side. So I decided to look at my own blog posts to see what would suit my system best.</p>
<p>There's no TL;DR for this post because I suspect if you're reading this blog post you already know the answer that fits about 95% of the time. My aim for this post was to dispel any misconceptions I might have had.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><p>The context for this post is my own blog, a fully static site (specifically: the visitor won't enter code themselves).</p>
<h2>Direct Effects</h2>
<p>Let's skip straight to the proof in the pudding shall we? I released two branches to my Netlify deployed blog, one with client side rendering (as it stands as of 7 April 2019) and one with server rendered syntax highlighting.</p>
<p>The order of the screenshots will always be client side then server side.</p>
<h3>Network Analysis</h3>
<p>When taking these screenshots, I repeated the requests a few times to warm up the server side - so you're seeing a hot server response (ie. loaded into a <abbr title="Content delivery network">CDN</abbr>). The page is heavy with code examples, but asset-wise is fairly light (very few images and only required JavaScript).</p>
<p><img src="https://remysharp.com/images/code-highlight/client-network.png" alt="Client network render"></p>
<p><img src="https://remysharp.com/images/code-highlight/server-network.png" alt="Server network render"></p>
<p>Points of interest:</p>
<ol>
<li><strong><abbr title="Server side rendered">SSR</abbr> is about 1K additional</strong> with gzip and uncompressed is about 50% larger (from 23K to 42K). This is expected to be a larger HTML file because the <abbr title="Server side rendered">SSR</abbr> version has a lot of <code>span</code> tags for the code (and the page is intentionally heavy with code examples). Importantly though, since there's so much repeated common content (<code>span</code>s, common <code>class</code> attributes and values), it gzips very well</li>
<li>Although the single HTML file is larger with <abbr title="Server side rendered">SSR</abbr>, <strong>total transfer size on the <abbr title="Server side rendered">SSR</abbr> version is ~10K <em>smaller</em></strong>. This is because <abbr title="Server side rendered">SSR</abbr> is not sending the two JavaScript prism.js files (prism itself and the additional syntax highlighter).</li>
<li>Finish times and load times are about the same. <strong><code>DOMContentLoaded</code> is delayed by around 100ms on the client rendered side</strong>, this I would expect to put down to Prism running client side - but we'll find out for sure next.</li>
</ol>
<h3>Performance</h3>
<p>As with networking, there's no real surprises here in the performance panel. I'd expect to set additional JavaScript execution and I'd expect to see a later <abbr title="Time to first paint">TTFP</abbr> and DOM ready events. What I was also interested in was whether using <abbr title="Server side rendered">SSR</abbr> for syntax highlight would cause any additional overhead in parsing the HTML (as I can from the network request, uncompressed, the HTML is twice the size).</p>
<p>I ran these two performance tests with the network slowed to &quot;Fast 3G&quot; and throttled the CPU to 4x slowdown (only to help amplify the effects I was looking for).</p>
<p><img src="https://remysharp.com/images/code-highlight/client-perf.png" alt="Client performance render"></p>
<p>Above is the client side highlighting. The first JavaScript block (in yellow) is Prism being evaluated and parsed. Prism is pretty lean and small (and again, I slowed the CPU) and it's not costly in the grand scheme of things, but compared to the <abbr title="Server side rendered">SSR</abbr> below, where there's <em>no</em> JavaScript, zero JavaScript is always faster.</p>
<p><img src="https://remysharp.com/images/code-highlight/server-perf.png" alt="Server performance render"></p>
<p>As expected, <abbr title="Server side rendered">SSR</abbr> wins out and there's nothing unexpected. Importantly <strong>the HTML parsing time only was 8.31ms</strong> - again this post has a lot of code examples, but I'd argue this was negligible and browsers are doing what browsers do best. Without the <abbr title="Server side rendered">SSR</abbr> of the code highlight, the parse time is 4.91ms. That's to say: there is practically zero impact on parsing time even though we know the parsed HTML is twice the size when <abbr title="Server side rendered">SSR</abbr> is in play.</p>
<p>What about a mobile device though? The above tests were run on my desktop and additional HTML doesn't seem to be much trouble for a fast laptop. I ran a pared down test on my mobile device (albeit a Pixel 3XL which is one of the more powerful mobile devices, but it was a start). For this test, I stripped out all external assets so the performance was able to focus entirely on the HTML parsing time.</p>
<p><img src="https://remysharp.com/images/code-highlight/client-mobile-html-only.png" alt="Client side mobile HTML"></p>
<p><img src="https://remysharp.com/images/code-highlight/server-mobile-html-only.png" alt="Server side mobile HTML"></p>
<p>The top image is client side and bottom is server side. <abbr title="Server side rendered">SSR</abbr> is marginally longer, but it's a matter of 10ms. That time on the mobile CPU is really nothing - particularly considering there's images to decode, other JavaScript (normally) to parse and execute.</p>
<p>The bottom line: no impact what so ever.</p>
<h2>Why even client side?</h2>
<p>Going by these results, it's hard to argue <em>at all</em> in favour for client side syntax highlighting. So why are so many people, myself included, reaching for client side as a default?</p>
<p>Obviously I can't speak for others, but I can share what I've experienced.</p>
<h3>1. Historically client side was the only option</h3>
<p>Well over a decade ago (yes, I've been coding longer for the web) there wasn't an readily available option for <abbr title="Server side rendered">SSR</abbr> code highlighting. For blogging you either had hosted options like blogger.com and wordpress.com or you would host your own. I used WordPress on my own dedicated server. WordPress had a lot of server processing to do just to render the HTML for a blog post, so the idea and cost of adding syntax highlighting was unappealing.</p>
<p>In addition, the best highlighters (that I had come across) were client side. <a href="https://code.google.com/archive/p/google-code-prettify/">Google's Code Prettifer</a> was my choice back in those days. It only came as a JavaScript file. Later on I turned to <a href="https://highlightjs.org/">highlight.js</a>.</p>
<p>There's a theme in the highlighters I was using: they're written in JavaScript. If your backend is written in non-JavaScript (which <a href="https://remysharp.com/2014/09/18/wordpress-ghost-harp-pt1">until late 2014</a> I was on PHP), then client side libraries are the way to go.</p>
<p><strong>Today's counter argument:</strong> however years…and years have passed. Not only do we have JavaScript on the server side, but we also have static site generators (closing the argument of server processing time). Most <abbr title="Static Site Generator">SSG</abbr>'s (that I've reviewed) come with directions on how to add your favourite syntax highlighter.</p>
<p>In my case, my new blogging software borrows ideas from <a href="https://11ty.io/docs/">11ty</a> and uses <a href="https://github.com/jGleitz/markdown-it-prism">markdown-it-prism</a>. In reality it's really not much more than a couple of lines added to your server side software to support syntax highlighting.</p>
<h3>2. Some parts require DOM to work</h3>
<p>Syntax highlighters use lexers and parse text input into tokens and spit out markup. It doesn't need the DOM for this particular task. However there may be highlighter plugins that you use that <em>do</em> require the DOM and this won't fly on the server side.</p>
<p>In my particular case, I was using a Prism plugin called &quot;keep-markup&quot;. Running it on the server throws up errors right away:</p>
<pre><code>}(self, document));
  ^
ReferenceError: self is not defined
</code></pre>
<p>All the options I have to solve this are unfavourable:</p>
<ol>
<li>Run the highlighter on <em>both</em> the server and the client. A terrible idea and a waste.</li>
<li>Drop the plugin entirely (and somehow rework the code examples that relied on it).</li>
<li>Run the highlighter on client side so I can use the &quot;keep-markup&quot; plugin.</li>
</ol>
<p>In the end, for my own site, I weighed up between client side code highlighting and removing the plugin: I decided to remove the plugin.</p>
<h3>3. Server integration isn't the easiest choice</h3>
<p>This is really the thing isn't it? Reaching for another JavaScript library to fix a thing is the path of least resistance. I can clearly see that I've not been thinking about the real impact of client side syntax highlighting. I'd done some research many years ago and apparently I was set with that for life.</p>
<p>I'm equally guilty of running to <a href="https://www.npmjs.com">npm</a> to find a library that does a task that will be easier to install than code myself. Obviously there's good justification for that, but I should really audit the decision properly and thoroughly.</p>
<p>This particular topic, that of the &quot;easiest choice&quot; for the developer is a much bigger discussion, but I can see how this seemingly benign decision between client or <abbr title="Server side rendered">SSR</abbr> highlighter feeds into developer convenience.</p>
<h2>Conclusion</h2>
<p>As I suspected, I was holding onto a (very) old assumption about server support for syntax highlighting that had stuck with me for well over a decade and lead me to the wrong approach.</p>
<p>Server side rendered syntax highlighting is extremely capable these days and the question of client side impact is quite literally zero.</p>
<p>I'm quite amazed at the poll results, and I wonder if my wording in the tweet may have swayed the results, but also I suspect there's a general tendency to reach for the quick and easy answer. The truth is that <abbr title="Server side rendered">SSR</abbr> code highlighting really <em>isn't</em> hard at all, and only required one additional step.</p>
<p><em>Originally published on <a href="https://remysharp.com/2019/04/09/code-highlighting-server-or-client">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>How I failed the &lt;a&gt;</title>
      <guid isPermaLink="false">how-i-failed-the-a</guid>
      <link>https://remysharp.com/2019/04/04/how-i-failed-the-a</link>
      <pubDate>Thu, 04 Apr 2019 00:00:00 +0000</pubDate>
      <description><![CDATA[A real bug bear of mine is when JavaScript gets in the way of browsing a page on the web. Simple, but common things like time to interactive being delayed for no good reason, or, in this case, links that don't work like links.
I'm guilty of this too, so this is my post to call myself out and to (ideally) prevent myself from doing it again.]]></description>
      <content:encoded><![CDATA[
<p>A real bug bear of mine is when JavaScript gets in the way of browsing a page on the web. Simple, but common things like <a href="https://developers.google.com/web/tools/lighthouse/audits/time-to-interactive">time to interactive</a> being delayed for no good reason, or, in this case, links that don't work like links.</p>
<p>I'm guilty of this too, so this is my post to call myself out and to (ideally) prevent myself from doing it again.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>On click…</h2>
<p>It all starts with a little on click property and then things go downhill. Presumably for good reason, I've decided to take over the browser's native handling of the visitor clicking on some element in the DOM.</p>
<p>Perhaps I need to place an API request in the background, update some part of the user interface or maybe run some validation ahead of sending the request.</p>
<p>I use <a href="https://next.training.leftlogic.com/?coupon=SUBSCRIBER">Next.js</a> for a lot of my client work. I like it because it comes with server side rendering support without configuration and straight out of the box. <strong>This is good.</strong></p>
<p>Due to the way Next's routing works, quite often I'm overriding the browser's native click so that I can run subsequent client rendered navigation. This can benefit from pre-fetched code (for layout) and can make for a really nice and fast user experience, it also reduces the round trip time and payload the visitor has to bear when clicking around.</p>
<h2>I messed up</h2>
<p>This was my (React) code:</p>
<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Card</span></span>
  <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token string">`/thing/_single?id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token comment">// "real" url</span>
      <span class="token template-string"><span class="token string">`/thing/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span> <span class="token comment">// URL the browser shows</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
  <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span>
<span class="token punctuation">/></span></span>
</code></pre>
<p>The component works in its intended use. The visitor clicks on the card component, and it loads the new route (the file living in <code>./pages/_single.js</code>) passing it a query string of <code>id=nnn</code>.</p>
<p>This component breaks in two ways through. The first should (I hope) be obvious, the second not so much.</p>
<h2>Half-way server side</h2>
<p>I've come across these types of site more and more lately. They'll use server side rendering to get the SEO goodness and performance benefit because the page isn't reliant on JavaScript to load. Except that once it's loaded, it's reliant on JavaScript to actually respond to interactions - like clicking.</p>
<p>In my code above, if the internet connection is sketchy (mobile connectivity for instance), the clickable thing has loaded (the card) but there's nothing to handle the click, like an anchor element.</p>
<p>So I now have a simple rule of thumb: <strong>if there's an onClick, there's got to be an anchor around the component.</strong></p>
<p>What about the second breakage. Did you spot it?</p>
<h2>Knowing better than the browser</h2>
<p>JavaScript lets me do some pretty fancy things. Sadly there's a subset of fancy things that takes over native browser functionality without realising and accidentally tossing it out of the window.</p>
<p>In this particular case, my visitor isn't allowed to click on my clickable component in any other way than how <em>I intended</em>. Which is rather presumptuous of me.</p>
<ul>
<li>What happens on click with the shift key depressed?</li>
<li>What happens on click with the command (or control) key depressed?</li>
</ul>
<p>Neither of these two actions would work. It <em>should</em> open in a new window and a new tab respectively. This was my visitors intended action, so why did I decide they couldn't do that any more? The answer is easy: I didn't think. Nothing either confused, or worse: pissed off my visitor.</p>
<p>The fix is a matter of lines, so let's do that:</p>
<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`/thing/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Card</span></span>
    <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>ctrlKey <span class="token operator">||</span> event<span class="token punctuation">.</span>metaKey <span class="token operator">||</span> event<span class="token punctuation">.</span>shiftKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// let the browser deal with the click natively</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// otherwise handle it with our fancy JavaScript</span>
      event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      Router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token string">`/thing/_single?id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token comment">// "real" url</span>
        <span class="token template-string"><span class="token string">`/thing/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span> <span class="token comment">// URL the browser shows</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
    <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span>
  <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
</code></pre>
<h2>New rules of thumb</h2>
<p>Any time I'm adding <code>onClick</code> to a component, I want to make sure there's a <em>real</em> anchor ready to handle the intended action. I also want to ensure the native browser handling of modifiers works as intended. Too many sites prevent me from using modifiers on click - I don't want to join their ranks of pissing off the visitor.</p>
<p><em>Originally published on <a href="https://remysharp.com/2019/04/04/how-i-failed-the-a">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>Twitter without tracking</title>
      <guid isPermaLink="false">twitter-without-tracking</guid>
      <link>https://remysharp.com/2019/04/02/twitter-without-tracking</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      <description><![CDATA[Recently I've been using the DuckDuckGo browser extension that gives me a web site privacy score but also the number of trackers (blocked) on the web site which I've enjoyed getting insights on what has been blocked.]]></description>
      <content:encoded><![CDATA[
<p>Recently I've been using the <a href="https://chrome.google.com/webstore/detail/duckduckgo-privacy-essent/bkdgflcldnnnapblkhphbgpggdiikppg">DuckDuckGo browser extension</a> that gives me a web site privacy score but also the number of trackers (blocked) on the web site which I've enjoyed getting insights on what has been blocked.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><img class="half" src="https://remysharp.com/images/duckduckgo-rating.png" alt="DuckDuckGo privacy essentials">
<p>Seeing trackers surfaced in this way made me aware that by including a &quot;here's me on Twitter&quot; on my own blog, I was unwittingly giving Twitter tracking powers from my own site. What's interesting is that I was never aware that adding this widget to my site would give Twitter this power over my unsuspecting visits. And it's kinda not okay.</p>
<p>In my blog software refactor I decided to keep the functionality of letting people follow me, see my follower count and keeping the style, but drop the unsolicited tracking.</p>
<h2>Picking the widget apart</h2>
<p>When running a network trace when the Twitter widget is embedded, under the &quot;alternative&quot; domain twimg.com, you'll find that there's a <abbr title="JSON with padding">JSONP</abbr> request that looks like this:</p>
<p><img src="https://remysharp.com/images/twitter-followers-network.png" alt="Inspecting network requests to Twitter"></p>
<p>So a <a href="https://cdn.syndication.twimg.com/widgets/followbutton/info.json?lang=en&amp;screen_names=rem">cURL to the <code>info.json</code></a> yields some pretty useful information, although it looks like a static URL, it certainly looks dynamic enough to provide the content for a Twitter widget:</p>
<pre><code class="language-json"><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">"following"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"648873"</span><span class="token punctuation">,</span>
    <span class="token property">"screen_name"</span><span class="token operator">:</span> <span class="token string">"rem"</span><span class="token punctuation">,</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"@rem"</span><span class="token punctuation">,</span>
    <span class="token property">"protected"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token property">"followers_count"</span><span class="token operator">:</span> <span class="token number">49961</span><span class="token punctuation">,</span>
    <span class="token property">"formatted_followers_count"</span><span class="token operator">:</span> <span class="token string">"50K followers"</span><span class="token punctuation">,</span>
    <span class="token property">"age_gated"</span><span class="token operator">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre>
<p>We could keep the request in the client and benefit from <code>info.json</code>'s <abbr title="JSON with padding">JSONP</abbr> support (and checking the network request, there's no cookies exchanged in the request, so technically &quot;safe&quot;)…but I'm not a fan of superfluous JavaScript. As such, this is a great candidate for a single server side request during build.</p>
<h2>Moving to the server</h2>
<p>What we're interested in here is the follower count. Since these numbers don't change a great deal, don't mean a great deal and are ultimately hidden in rounding - a single build (for me) every fortnight is fine (I publish at least two blog posts a month). Though you could schedule a rebuild of your site once a day using other services (I've start on <a href="https://cron.jobs">cron.jobs</a> to do similar tasks, but it's far from public yet).</p>
<p>Now this process is part of my static build which is generated on Netlify, I then expose the raw Twitter values in an accessible way.</p>
<p>My site uses a bespoke system, but let's say you were using something like <a href="https://11ty.io">11ty</a>, you could include the following as part of your build <code>package.json</code>:</p>
<pre><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">"prebuild"</span><span class="token operator">:</span> <span class="token string">"curl https://cdn.syndication.twimg.com/widgets/followbutton/info.json?lang=en&amp;screen_names=rem > _data/twitter.json"</span>
  <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"eleventy"</span>
<span class="token punctuation">}</span>
</code></pre>
<p>According to <a href="https://www.11ty.io/docs/data-global/">11ty's data docs</a>, the Twitter stats will be available in global <code>twitter</code> property in your templates.</p>
<p>Now it's a matter of implementing the look and feel.</p>
<h2>Look and feel</h2>
<p>Forewarning: there's more HTML here than I might include, but I've lifted it directly from the widget so that I can completely reuse Twitter's styles (albeit slightly tweaked):</p>
<pre><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>twitter-badge ltr ready hcount count-ready<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn-o<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span>
      <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>follow-button<span class="token punctuation">"</span></span>
      <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://twitter.com/intent/user?screen_name={{ twitter.screen_name }}<span class="token punctuation">"</span></span>
      <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>label<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>l<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Follow<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>@{{ twitter.screen_name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span>
    <span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>count-o<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span>
    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>note<span class="token punctuation">"</span></span>
      <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>count<span class="token punctuation">"</span></span>
      <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://twitter.com/intent/user?screen_name={{ twitter.screen_name }}<span class="token punctuation">"</span></span>
      <span class="token punctuation">></span></span>{{ twitter.formatted_followers_count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span>
    <span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<p>The empty <code>&lt;i&gt;</code> and <code>&lt;u&gt;</code> elements, I believe` are being used for styled blocks - though I'd loved to remove these entirely if possible.</p>
<p>Now a dash of CSS, note that this syntax is <a href="http://lesscss.org/">less</a> - which in this case is CSS with nesting, and aside from the <code>&amp;.&lt;selector&gt;</code> where <code>&amp;</code> refers to the current scoped selector, it should be fairly regular CSS - <a href="https://remysharp.com/downloads/twitter-widget.less">provided as a download for brevity</a>.</p>
<p>The minor adjustment I made to the existing Twitter CSS widget is to make the blue from the &quot;follow @rem&quot; and white have a higher contrast radio for better colour accessibility (the current default fails which I'm quickly able to see using Chrome's devtools inspector):</p>
<p><img src="https://remysharp.com/images/twitter-badge-a11y.png" alt="Twitter badge accessibility colour ratio failing"></p>
<p>I shifted the blue down to <code style="background: #31759f; color: white;">#31759f</code> and that minor change also puts more control into my hands now that I'm managing the CSS that renders the Twitter widget. And that's really it.</p>
<p>One less tracker on my site for my visitors.</p>
<p><em>Originally published on <a href="https://remysharp.com/2019/04/02/twitter-without-tracking">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>Slashed URI</title>
      <guid isPermaLink="false">slashed-uri</guid>
      <link>https://remysharp.com/2019/03/25/slashed-uri</link>
      <pubDate>Mon, 25 Mar 2019 10:15:07 +0000</pubDate>
      <description><![CDATA[Trailing slashes in URIs, or URLs or UDI (surprisingly). What the heck do they actually mean, do they have any user or technical value and should I be including them???]]></description>
      <content:encoded><![CDATA[
<p>Trailing slashes in URIs, or URLs or <abbr title="Universal Document Identifier">UDI</abbr> (<a href="https://tantek.com/2014/304/b1/url-started-as-udi-conversation-w3c-tpac">surprisingly</a>). What the heck do they actually mean, do they have any user or technical value and should I be including them???</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>Inheritance from Unix</h2>
<p>A slash in the URL is a hang over from Unix days. A slash <code>/</code> (not to be confused with a backslash <code>\</code>), denotes a directory separation.</p>
<p>In particular, web servers for many, many years have had a default mode that reads: if a user requests a directory and I (the web server) find index.html (or .htm if it were of the windows flavour), I (the server) will return that file (instead of a directory listing).</p>
<p>Out of the box, old and out of date Apache (one of the early web servers) could handle the following requests:</p>
<ul>
<li>https://example.com/remy</li>
<li>https://example.com/remy.html</li>
<li>https://example.com/remy/</li>
</ul>
<p>…and all 3 requests could serve completely different responses assuming the server doesn't apply any extra hidden logic or configuration.</p>
<p>The first will only match a file called <code>remy</code> with no extension, in the root of my web server.</p>
<p>The second will serve <code>remy.html</code>, and the third (&quot;normally&quot;) would serve the <code>index.html</code> in the directory called <code>remy</code>.</p>
<p>On face value however, it's not entirely clear (to me) whether the first request for me <code>remy</code> is a file or a directory. Of course it can be both, but it's quickly becoming a mental minefield.</p>
<p><em><strong>Aside:</strong></em> a <code>file</code> scheme has 3 slashes (compared to the two used after <code>http</code>) because the scheme for URLs is <code>&lt;proto&gt;://&lt;host&gt;/&lt;path&gt;</code> and since <code>file</code> (in most cases) has no host (it's your machine), it becomes <code>file:///&lt;path&gt;</code> (<a href="https://tools.ietf.org/html/rfc1738#section-3">ref</a>).</p>
<h2>Today's static servers</h2>
<p>Today much of these defaults have been ironed out into &quot;sensible defaults&quot; and you'll be able to drop a directory of html files into a service like Netlify (or equally something of your own making) and URL handing is resolved for you.</p>
<p>In fact, Netlify offers a checkbox configuration option (my favourite kind, found under deployment options) that lets you support requests to <code>https://example.com/remy</code> responds with <code>remy.html</code> and requests to <code>remy/</code> responds with <code>remy/index.html</code>.</p>
<p><img src="https://remysharp.com/images/netlify-pretty-URLs.png" alt="Netlify's pretty URLs"></p>
<p>These are handled by redirects. How exactly Netlify do this I don't know (I'm sure it's somewhere), but AWS S3 buckets offer the same functionality, as does nginx, Apache and pretty much every other server (just not quite as nice as a checkbox).</p>
<p>In rewriting my blog backend software I had to generate all the static files myself and I have to consider whether my existing URL schema still worked (it is important to me that it still works and that my URLs live as long as I do).</p>
<h2>How about my blog URLs?</h2>
<p>If you're able to see the URL to this post, you'll see my blog post URL structure:</p>
<ul>
<li>Year</li>
<li>Month</li>
<li>Day</li>
<li>Title (in &quot;slug&quot; form)</li>
</ul>
<p>When I view this URL, I'm asking myself: what am I looking at?</p>
<p>Is it <code>slashed-uri.html</code>? Is it <code>index.html</code>? Is it a file designed to be served with a content type of <code>text/html</code> but without a file extension? Maybe this isn't a static site, and the slug is a database key, more akin to <code>/post?date=2019-03-22&amp;slug=slashed-uri</code>?</p>
<p>With all that in mind, the question that now plagues me is:</p>
<p><em><strong>Should this URL end in a slash?</strong></em></p>
<h2>Slash or not?</h2>
<p>Let's see. Using Unix philosophy as a starting point, it would make sense that a post itself is a directory (even if a virtual one), that way all related assets (such as images, comments and so on) would live in the same directory. This alone seems like a really nice feature - all the related content lives together.</p>
<p>So a slash makes sense in this case. Then again, a trailing slash feels…a little superfluous to the interface to my content. It's just a character that someone (a visitor or someone else linking to my post) would need to type.</p>
<p>These &quot;pretty URLs&quot;, ones don't have slashes at the end, are it's completely within a web server's capabilities to redirect a request to the intended destination.</p>
<p>But then…what if my visitor <em>does</em> include a slash at the end?</p>
<h2>Slash and not?</h2>
<p>Do I do <em>both</em>? Just recently I was checking my existing blog software and I realised I was getting a valid response from both of these URLs:</p>
<ul>
<li>https://remysharp.com/2018/12/24/memfetch</li>
<li>https://remysharp.com/2018/12/24/memfetch/</li>
</ul>
<p>The new problem here is: <em>which one is correct?</em> Or more specifically, which is the canonical URL?</p>
<p>By some fluke, I had included the link <code>rel</code> in my posts, that will read:</p>
<pre><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canonical<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://remysharp.com/2018/12/24/memfetch<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
</code></pre>
<p>But shouldn't one redirect on the other? It seems a little weird that my server responds a <code>200 OK</code> on both URLs. The canonical URLs are typically more useful for alternative pages (like an AMP formatted page, or perhaps a version hosted on a different URL, like Medium).</p>
<h2>It's all a bit of a mess…</h2>
<p>…and actually there's no rules. Which, is kinda good because it allows <em>me</em> to decide how <em>my</em> site should work, but means I keep flipping back and forth on what's the right way of doing URLs for my content.</p>
<p>In the end, for my <a href="https://github.com/remy/remysharp.com/tree/feat/own">rewrite of my blog software</a>, I decided to generate named files so that a directory (for 2019) looks like this:</p>
<p><img src="https://remysharp.com/images/static-output.png" alt="Static file output"></p>
<p>I chose to abandon the idea of having a directory for each post name only because the directories are generated from single markdown files, and the convenience of having a single file containing all the necessary information for the post was too great. Since my blog is mostly text it makes sense (in this case) to keep everything in a single file. Of course there's times I used images (as in this post), but all I need to do is make sure the image filename is unique <em>enough</em> so it doesn't collide with an existing filename (at 12 years of blogging it's yet to happen).</p>
<p><em>Originally published on <a href="https://remysharp.com/2019/03/25/slashed-uri">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>#Web30</title>
      <guid isPermaLink="false">web30</guid>
      <link>https://remysharp.com/2019/03/13/web30</link>
      <pubDate>Wed, 13 Mar 2019 11:25:18 +0000</pubDate>
      <description><![CDATA[This week marks the 30th birthday of the web. I've had my own involvement in this momentous date in history with being part of the WorldWideWeb restoration team at CERN last month, and having returned from the #Web30 event yesterday (both at CERN and at the London Science Museum), I thought it fitting to pay tribute on my blog too.]]></description>
      <content:encoded><![CDATA[
<p>This week marks the 30th <em>birthday</em> of the web. I've had my own involvement in this momentous date in history with being part of the WorldWideWeb restoration team at CERN last month, and having returned from the #Web30 event yesterday (both at CERN and at the London Science Museum), I thought it fitting to pay tribute on my blog too.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>Because of the web…</h2>
<p>I have a career that I have complete control of, met many amazing people, and have dear friends whom I've come to love, access to a seemingly unlimited wealth of knowledge, had my ideas and views challenged and been able to grow (healthily) as a member of society and finally: a place to express myself.</p>
<p>The web not simply connect documents, but, for me, it connects people.</p>
<h2>My first web</h2>
<p>I started university in 1997 and all students were given a unix home directory. I think it only towards the end of term (in 1998) that I realised that the home directory was also mapped to a URL on the web.</p>
<p>So technically, my first home was:</p>
<p><code>http://infosys.kingston.ac.uk/~K974592/</code></p>
<p>I spent summer '98 working on adapting one of my lecturers' Java Applets that showed a map of the borough of Kingston, turning it into a <a href="https://web.archive.org/web/20030222010510/http://www.kingston.ac.uk/~ku05883/Animation.html">dancing stick animation</a></p>
<p>I also had an Angelfire page (somehow missing the memo about GeoCities being cool). I can't for the life of me remember the username (or even URL structure) so I can't find an archive copy - though god knows what lies in wait (I suspect it might have been <em>jedifish</em>).</p>
<h2>My first web site</h2>
<p>Onward to 1999, and thanks to LineOne (later swallowed by BT and later still swallowed up entirely), I had a full web site. A URL I could call home (I'm not ready to share this yet, there's some content that isn't ready to be reanimated in 2019).</p>
<p>I remember buying an Intel 385 (I <em>think</em>) from the local computer fair for £50 (a pretty huge amount for a student).</p>
<p>It was a Sunday, which meant that to get a browser on the machine, I'd have to wait until Monday when the newsagent would open, and I could buy a PC magazine that would hopefully include a floppy disk with Internet Explorer 3.</p>
<p>My first web site was coded using partly notepad.exe and partly my own tool I'd written in 1996 (aptly named) HTML Writer v4.</p>
<p>You can marvel at my VBScript and JavaScript combo that made a DHTML filter run (like spotlights on at a hollywood movie) (admittedly this was added for IE4 which I must have upgraded to at some point):</p>
<pre><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VBScript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>
Sub <span class="token function">Window_OnLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	call logo<span class="token punctuation">.</span>filters<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	logo<span class="token punctuation">.</span>style<span class="token punctuation">.</span>visibility<span class="token operator">=</span><span class="token string">""</span>
	call logo<span class="token punctuation">.</span>filters<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Play</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
End Sub
<span class="token operator">--</span><span class="token operator">></span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JavaScript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">var</span> x<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span>
	<span class="token keyword">var</span> y<span class="token operator">=</span><span class="token number">110</span><span class="token punctuation">;</span>
	<span class="token keyword">var</span> direction<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	window<span class="token punctuation">.</span>onload <span class="token operator">=</span> setlights<span class="token punctuation">;</span>


	<span class="token keyword">function</span> <span class="token function">setlights</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		litlogo<span class="token punctuation">.</span>filters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		litlogo<span class="token punctuation">.</span>filters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addcone</span><span class="token punctuation">(</span><span class="token number">440</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">05</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		litlogo<span class="token punctuation">.</span>filters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addAmbient</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">setTimeout</span> <span class="token punctuation">(</span> <span class="token string">"MoveItNow()"</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>


	<span class="token keyword">function</span> <span class="token function">MoveItNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>direction<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			x <span class="token operator">=</span> x<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span>
			y <span class="token operator">=</span> y<span class="token operator">+</span><span class="token number">2.5</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token operator">==</span><span class="token number">150</span><span class="token punctuation">)</span>
				<span class="token punctuation">{</span>direction<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">{</span>
			x <span class="token operator">=</span> x<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
			y <span class="token operator">=</span> y<span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">300</span><span class="token punctuation">)</span>
				<span class="token punctuation">{</span>direction<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		litlogo<span class="token punctuation">.</span>filters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">movelight</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">setTimeout</span> <span class="token punctuation">(</span> <span class="token string">"MoveItNow()"</span><span class="token punctuation">,</span><span class="token number">50</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>litlogo<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">WIDTH</span><span class="token punctuation">:</span>280<span class="token punctuation">;</span><span class="token property">HEIGHT</span><span class="token punctuation">:</span>144<span class="token punctuation">;</span> <span class="token property">visibility</span><span class="token punctuation">:</span>visible<span class="token punctuation">;</span> <span class="token property">filter</span><span class="token punctuation">:</span><span class="token function">light</span><span class="token punctuation">(</span>enabled=1<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/img/Sharq_sm.jpg<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">filter</span><span class="token punctuation">:</span><span class="token function">revealTrans</span><span class="token punctuation">(</span>Duration=3.0<span class="token punctuation">,</span> Transition=12<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">VISIBILITY</span><span class="token punctuation">:</span>hidden</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sharq Banner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>90%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<p>…and no, I've no idea what the <code>&lt;dd&gt;</code> is doing around the <code>&lt;img&gt;</code> element…!</p>
<h2>Web 2.0 and me</h2>
<p>As part of my university course I was to do a year industrial placement. By some fluke my lecturer visited a company (that already had a placed student the year above me) and recommended the company get in touch with me.</p>
<p>I was invited to an interview, and although apparently I hadn't impressed the boss during the process, there was something I commented on right at the end that landed me the job.</p>
<p>That job was working for a digital consultancy called <a href="https://web.archive.org/web/20010401050918/http://www.gallio.com/index.html">Gallio</a> (apparently named after a drink…). It was a tiny team that usually hovered around 4 people. The boss, Mark, would mentor me in all aspects of business development. He is probably responsible for the developer and my entrepreneurial skills (or desires) I have and am today.</p>
<p>The entire business was about the web and we exploded through the Web 2.0 era and came out the other side healthy whilst our competitors were supernova'ing all around us.</p>
<p>My long lasting domain come from this era: https://ihatemusic.com (registered in 1999 and put to purpose in 2002).</p>
<p>I registered a number of domains over the early 2000s, some of which I still have, it was a time of ideas and the web was an exciting place to be part of.</p>
<h2>Onwards</h2>
<p>Home now is remysharp.com (where you're possibly reading this). It has been since 2006 and I hope to keep the URL and links working for many many years to come.</p>
<p>Most of my livelihood today comes from the web. Both in <em>how</em> people find my business and the business that I produce.</p>
<p>The conference that Julie and I run, ffconf, is outside of the web but exists because of the web and exists to serve the web.</p>
<p>This year, 2019, I was able to give something back to the web in our team work at CERN and the <a href="https://worldwideweb.cern.ch">WorldWideWeb simulator</a> and lifetime experience, again, down to the existence of the web.</p>
<p>So thank you Sir Tim Berners-Lee. Thank you to the satellite of people who help to realise the web. Thank you to the links that you have created and on occasion connected to me.</p>
<p>Cheers to the web. Cheers to working on bringing <em>the other half of the world</em> to the web. Cheers to the next 30 years.</p>
<p><em>Originally published on <a href="https://remysharp.com/2019/03/13/web30">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>Excavating a user agent</title>
      <guid isPermaLink="false">excavating-a-user-agent</guid>
      <link>https://remysharp.com/2019/03/04/excavating-a-user-agent</link>
      <pubDate>Mon, 04 Mar 2019 12:53:05 +0000</pubDate>
      <description><![CDATA[Warning: this is a tale of geek's own adventure into the dark depths of old webby stuff that really doesn't work well!

In collecting coverage for the CERN project to recreate the first browser, the WorldWideWeb, I came across an interesting issue discussed on Metafilter.
Specifically:

MetaFilter seems to be configured to return a 403 (forbidden) if the User-Agent is set to 'request'…

So I figured the WorldWideWeb simulator should send the right user agent. But what should it be, and I mean, how hard could it be…?]]></description>
      <content:encoded><![CDATA[
<p><em>Warning: this is a tale of geek's own adventure into the dark depths of old webby stuff that really doesn't work well!</em></p>
<hr>
<p>In collecting coverage for the CERN project to recreate the first browser, the WorldWideWeb, I came across an interesting issue <a href="https://www.metafilter.com/179514/Bringing-back-the-Web-of-1990#7643904">discussed on Metafilter</a>.</p>
<p>Specifically:</p>
<blockquote>
<p>MetaFilter seems to be configured to return a 403 (forbidden) if the User-Agent is set to 'request'…</p>
</blockquote>
<p>So I figured the WorldWideWeb simulator should send the right user agent. But what should it be, and I mean, how hard could it be…?</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>The obvious ways</h2>
<p>A quick <em>google</em> frustratingly yielded zero results (or at least for the few I tried). Which frankly was a bit odd, but the WorldWideWeb was indeed a prototype browser and it's possible it dropped out of circulation before web sites started collecting this data.</p>
<p>Next &quot;obvious&quot; approach, make a request with the WorldWideWeb browser to a server where I can see the logs. Easier said than done. For the time being, I don't have a NeXT machine to hand, my VirtualBox based emulator can't run the WorldWideWeb.app (because my machine is Intel based and the .app was compiled for &quot;Motorola 68K&quot;…apparently).</p>
<p><img src="https://remysharp.com/images/www-app-no-dice.png" alt="No dice"></p>
<h2>In search of strings</h2>
<p>I had a copy of <em>some</em> of the source code to the WorldWideWeb browser, but only <a href="https://github.com/cynthia/WorldWideWeb/tree/master/NextStep/Implementation">from 0.12</a> - which yields zero results for a any user agent string using tools like grep and <a href="https://remysharp.com/2018/08/23/cli-improved#ack--ag--grep">ack</a>.</p>
<p>Another tool I can use is the <a href="https://tldr.ostera.io/strings"><code>strings</code></a> unix command. This tool will literally print out all strings (printable characters). There's lots of interesting bits to be found (including all the &quot;about panel&quot; text), but no dice.</p>
<p>However, all WorldWideWeb before 1.0 wouldn't have a user agent. Silly me, pre-1.0 was pre-HTTP 1.0, and HTTP 0.9 was a very different beast.</p>
<h2>HTTP 1.0 introduces headers</h2>
<p>The WorldWideWeb browser was released before HTTP 1.0. HTTP 0.9 is very different from 1.0 in that it's extremely sparse. All you have to send to a server is <code>GET /url\n\n</code> and the server will respond.</p>
<p>So it makes sense that we wouldn't find any strings with a user agent.</p>
<p>Running the <code>strings</code> command on WorldWideWeb v1.0 <em>does</em> find something, but it's not that useful either:</p>
<pre><code class="language-sh">$ strings ./WorldWideWeb | grep -i agent
User-Agent:  %s/%s  libwww/%s%c%c
</code></pre>
<p>This is the first version that the user agent appears (my versions go up to 0.16 then jump to 1.0). This would also suggest that WorldWideWeb v1.0 therefore also supports HTTP 1.0 requests.</p>
<p>But what's <code>%s/%s</code>? In the second part, after <code>libwww</code> this would be the version for the <a href="https://github.com/w3c/libwww">core parsing library</a>. The <code>libwww</code> version might be easier to ascertain (or even guess) as we can probably find historical versions for around the early 1990s.</p>
<p>It's the first part of the user agent string that I want. So I returned to the emulators.</p>
<h2>NeXT with Previous</h2>
<p>There's a project called <a href="http://previous.alternative-system.com">Previous</a> that's been running for years that provides a much fuller emulation of the NeXT system environment. In fact there's an online web hosted version of Previous running the WorldWideWeb browser that you can try out at <a href="http://oldweb.today/WWW/">oldweb.today</a> (though at time of writing, the server wasn't responding…).</p>
<p>Importantly, Previous is based on the Motorola 68K architecture, which means I <em>can</em> run the WorldWideWeb browsers that I've found on the web.</p>
<p>Once Previous is up and running locally (on my mac - and I'll probably write this up separately another day), the trick is then being able to make a request and seeing what user agent is sent.</p>
<p>However, I'm faced with new problems: the Previous emulator can't access the open web (aka outside itself).</p>
<p>So what my options?</p>
<h2>Ways to see a request</h2>
<p>None of these methods work, but it's useful to know (of course if you know already, or don't care - please skip ahead 😉).</p>
<h3>Start a server</h3>
<p>Yep, sure. We could spin up apache with logging. But we don't have it (because it was written in 1995, and in fact, Tim Berners-Lee wrote the first http server which we <em>did</em> find that program on the real NeXT machine, but that was two weeks ago and I'm not at CERN anymore!).</p>
<p>Or Python in a single line using:</p>
<pre><code class="language-sh">$ python2 -m SimpleHTTPServer 8000
</code></pre>
<p>But we don't have Python either. Nor Perl as it happens. And no, we don't have Node. Though Python and Perl (and I think Ruby these days) tend to ship with unix based operating systems by default. This was before the year of <em>default</em> I guess.</p>
<h3>Bind to a port</h3>
<p><code>netcat</code> and more recently <code>nc</code> are superb commands for binding to a port and listening:</p>
<pre><code class="language-sh">$ nc --listen localhost -p 8000
</code></pre>
<p>Also not available!</p>
<h3>Sniffing traffic</h3>
<p>There's also <code>tcpdump</code> which can listen <em>in</em> to requests (sort of an ear against the tubes as it were) - this example listens to all requests between info.cern.ch and our host machine:</p>
<pre><code class="language-sh">$ sudo tcpdump host info.cern.ch -v
</code></pre>
<p>Of course we don't have any of these tools. In fact, there's very little we do have on the NeXT machine:</p>
<p><img src="https://remysharp.com/images/next-bin.png" alt="/usr/bin of next"></p>
<p>There are of course other ways, and please trust me when I say I tried!</p>
<p>For the eagle-eyed reader, you'll notice there's a distinct lack of <em>anything</em> that can help. I can't even compile .c programs on this machine without requiring some external tooling…</p>
<h2>Previous Branches to the rescue</h2>
<p>Somehow, the Previous project has been worked on in very recent days, and there was a <a href="https://sourceforge.net/p/previous/code/HEAD/tree/branches/branch_filesharing/">branch tucked away</a> that adds network support to the emulator. Yay!*</p>
<p><small>* Though in reviewing this in the broad light of day, I <em>think</em> the networking functionality may have been there all along…</small></p>
<p>Once I had reconfigured the Previous emulator, though it still couldn't reach the outside world (and I suspect this is either name server failing or possibly related to the fact the clock won't set beyond 2012 in the NeXT machine), it <em>can</em> reach my host environment.</p>
<p>This means I can run <code>nc</code> on my host (my Mac) and watch for the user agent.</p>
<h2>I present…</h2>
<p>So, after all that, what was the user agent for the WorldWideWeb version 1.0? I present to you:</p>
<pre><code>CERN-NextStep-WorldWideWeb.app/1.1  libwww/2.07
</code></pre>
<p>Why it's version 1.1 in the string and not 1.0, I've no idea, but there you go.</p>
<p>I suspect this wasn't the first user agent too, but that'll be for another day of digging.</p>
<h2>Stretch goal: headers</h2>
<p>Since I could now connect to a server, I decided to see what each version of the WorldWideWeb browser sent. Again, pre-1.0 WorldWideWeb didn't support HTTP 1.0, so I ran an <a href="https://github.com/remy/old-servers/blob/master/README.md">HTTP 0.9 server</a> and echoed out the request.</p>
<p>Here's what is sent to the server for each major version of the WorldWideWeb browser.</p>
<p><strong>v0.16 WorldWideWeb</strong></p>
<pre><code>GET /
</code></pre>
<p>Yes, HTTP 0.9 is <em>that</em> simple!</p>
<p><strong>v1.0</strong></p>
<pre><code>GET / HTTP/1.0
Accept: text/plain
Accept: text/html
Accept: audio/basic
Accept: image/x-tiff
Accept: application/postscript
User-Agent:  CERN-NextStep-WorldWideWeb.app/1.1  libwww/2.07
</code></pre>
<p>The browser now supports the <code>&lt;img&gt;</code> tag, and…apparently…audio too?!</p>
<p><strong>v2.02 Nexus</strong> (renamed from WorldWideWeb after apparently the <em>web</em> was going to be a &quot;thing&quot;!)</p>
<pre><code>GET / HTTP/1.0
Accept: */*; q=0.300
Accept: application/octet-stream; q=0.100
Accept: text/plain
Accept: text/html
Accept: */*; q=0.050
Accept: audio/basic
Accept: image/x-tiff
Accept: image/gif; q=0.300
Accept: application/postscript
User-Agent: CERN-NextStep-WorldWideWeb.app/1.1  libwww/2.16pre1
</code></pre>
<p>Probably the most interesting aspect to these headers is that image support not only lands (in the TIFF form at v1.0), but starts to expand to include GIFs in version v2.02.</p>
<hr>
<p>That's all for now. I hope you enjoyed this journey into the depths of finding a user agent. Oh, and I did update the WorldWideWeb simulator and now metafilter.com works :)</p>
<p><em>Originally published on <a href="https://remysharp.com/2019/03/04/excavating-a-user-agent">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>WWW: Where's the Writable Web?</title>
      <guid isPermaLink="false">www-wheres-the-writable-web</guid>
      <link>https://remysharp.com/2019/02/21/www-wheres-the-writable-web</link>
      <pubDate>Thu, 21 Feb 2019 16:14:24 +0000</pubDate>
      <description><![CDATA[This post is based on my experience and thoughts, and is not backed up by research, aka: speculative, akin more to a rambling in a café!
For my time at CERN recently we rebuilt the first browser: WorldWideWeb (later renamed to Nexus). One unique aspect of this  browser was that you could edit web pages. Indeed, the documentation for the web at that time was written in that browser.
Which makes me wonder: why, and where did it go?]]></description>
      <content:encoded><![CDATA[
<p><em>This post is based on my experience and thoughts, and is not backed up by research, aka: speculative, akin more to a rambling in a café!</em></p>
<p>For my time at CERN recently we rebuilt the first browser: WorldWideWeb (later renamed to Nexus). One unique aspect of this  browser was that you could edit web pages. Indeed, the documentation for the web at that time was written in that browser.</p>
<p>Which makes me wonder: why, and where did it go?</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>Thoughts on <em>why</em></h2>
<p>I heard it mentioned during my CERN week that it was Tim Berners-Lee's <em>vision</em> that browsers of the web would allow you to edit along with read.</p>
<p>It's entirely possible I misheard, but I half suspect that the vision was influenced by the available technology.</p>
<p>As with many great ideas, they're based on existing solutions and putting them together in a new way that solves new problems. The secret sauce that made the web was the humble <code>&lt;a&gt;</code> tag. It joins the web.</p>
<p>When it came to building a browser, the available tools were sitting in the <a href="https://en.m.wikipedia.org/wiki/NeXTSTEP">NeXTSTEP</a>, and specifically <a href="https://en.m.wikipedia.org/wiki/Interface_Builder">Interface Builder</a> (effectively the grandparent of Apple's Xcode).</p>
<p>When it came to rendering HTML in this would-be browser, you would have to use a text object. I think/suspect: <a href="https://developer.apple.com/documentation/appkit/nstextview">NSTextView</a>.</p>
<p>In <a href="https://www.w3.org/DesignIssues/TimBook-old/History.html">A brief history of the Web</a> Tim Berners-Lee writes that it took him a single month to produce the read version of the browser, and another month for the editable version, citing that most &quot;X browsers took around year to be developed&quot;.</p>
<p>I don't think it's a huge leap to see that the text view element can be in a read-only mode or read-write mode. Making the decision to use a read-write allows for a great deal more functionality.</p>
<p>In fact, if you're writing the <em>first</em> browser for a web that was <em>just</em> invented, it's going to be a huge benefit to ship a way to generate content in the same software.</p>
<p>So it was either <abbr title="Tim Berners-Lee">TBL</abbr>'s original vision and <em>then</em> he set out to find software that could realise it, or he saw the available technology and made best use of it to create a vision.</p>
<p><small>(I caved and did a <em>teeny</em> bit of research, and looking at ENQUIRE, <abbr title="Tim Berners-Lee">TBL</abbr>'s earlier system, it <a href="https://en.m.wikipedia.org/wiki/ENQUIRE#Differences_to_the_World_Wide_Web">looks like editing</a> was always on the table)</small></p>
<p>It really doesn't matter which way around it was, it's just me scratching at the idea of which came first. Pretty ingenious either way.</p>
<p>Jean-François Groff described it during our stay at CERN:</p>
<blockquote>
<p>[The WorldWideWeb was a] word processor with networked hypertext, and that really floored people who saw it in action for the first time.</p>
</blockquote>
<h2>Thoughts on why it left us</h2>
<p>Today's browsers are not editors for creating HTML, and the WorldWideWeb browser was written with the intention and expectation that both the source HTML and the URL itself should be hidden from the user (possibly to keep things simpler and less daunting).</p>
<p>Viewing the source in the WorldWideWeb was tucked away inside of diagnostic buttons and URLs would only be entered by &quot;Open using hypertext reference&quot;.</p>
<p>However, in 1991 there is a public list of <a href="https://www.w3.org/History/1991-WWW-NeXT/Implementation/Upgrade.html">upgrade proposals</a> and interestingly it includes:</p>
<blockquote>
<p>Make the generated HTML more human-readable (skip lines, etc.)</p>
</blockquote>
<p>This was because, it turned out, humans were reading the HTML. Indeed they were also writing some of the HTML (I think the <code>&lt;title&gt;</code> element was one such tag they had to write very early on).</p>
<p>The browsers that followed didn't have an editable mode: The Line Mode Browser '91, Lynx '92 and Mosaic '93.</p>
<p>But why? Two big blockers stand out.</p>
<p>The first is that NeXTSTEP provided Interface Builder and had the components to create editable text <em>and</em> format the text (I think of it like a Rich Text Format object). To make this available to other systems would require implementing the same NSTextView functionality on each OS to support editing in a <a href="https://en.m.wikipedia.org/wiki/WYSIWYG"><abbr title="wizi wig">WYSIWYG<abbr></a> element.</p>
<p>Secondly was the problem of saving back to servers. This was a problem that was never solved the first time around. Understandably it's a huge problem, littered with complexities. Authentication is one of the biggies.</p>
<p>It makes a lot of sense to use the web page as the editable interface. Why shouldn't I edit and format my blog posts from the browser? There's probably less than a handful of systems that can do that today (I <em>think</em> wordpress.com supports this functionality, but I'm not 100% certain). A handful after 30 years isn't <em>really</em> progress on the editable web front.</p>
<p>It's not hard to suggest that it was a mountain of technical challenges that kept the writeable browser from being part of technology today.</p>
<p>As with anything that succeeds, I beleive, the lower the barrier, the higher the success of adoption.</p>
<hr>
<p>Those are my speculative thoughts. Probably better as a café conversation, but having spent the last week with my mind deep in the '90s at CERN, I thought it would be fun to share here instead.</p>
<p><em>Originally published on <a href="https://remysharp.com/2019/02/21/www-wheres-the-writable-web">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>CERN day 5: the end</title>
      <guid isPermaLink="false">cern-day-5</guid>
      <link>https://remysharp.com/2019/02/18/cern-day-5</link>
      <pubDate>Mon, 18 Feb 2019 09:04:59 +0000</pubDate>
      <description><![CDATA[What a packed week, what an honour and privilege to be part of, and what a superb job we did.
It's all live now: the project and all supporting materials online with all our original goals achieved 🎉
👉 https://worldwideweb.cern.ch
It's truly an honour to have been able to contribute to this tribute to history.


Photo by Jean-François Groff]]></description>
      <content:encoded><![CDATA[
<p>What a packed week, what an honour and privilege to be part of, and what a superb job we did.</p>
<p>It's all live now: the project and all supporting materials online with all our original goals achieved 🎉</p>
<p>👉 <strong><a href="https://worldwideweb.cern.ch">https://worldwideweb.cern.ch</a></strong></p>
<p>It's truly an honour to have been able to contribute to this tribute to history.</p>
<figure>
<p><img src="https://remysharp.com/images/cern-2019/thegroup.jpg" alt="The Group"></p>
<figcaption>Photo by Jean-François Groff</figcaption></figure>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>The final day</h2>
<p>I'm a stickler for getting the job <em>&quot;done&quot;</em> - especially when it's a hackathon and the unit of work is distinct.</p>
<p>I know there would be bits I couldn't complete, but they would be de-prioritised and non-essential to bringing the feel of the 1990's browser back to life. So Friday was a day of laser focus!</p>
<p>However, the night before, around midnight, I had managed to make a fairly serious breakthrough in functionality and in that late night hacking session I'd managed to implement the ability to link between documents and update the author's markup to contain the correct link.</p>
<p>It might not sound like much, but those changes unlocked the ability to start save files (to IndexedDB), linking files and styling documents.</p>
<p>It was really nice to surprise the team with editable, saveable and linkable parts features (though at the same time I know there's occasions that it doesn't quite work - but isn't that the same with all demos 😱).</p>
<p>The final code will be made public via CERN's own Gitlab instance, probably on https://gitlab.cern.ch/nexus-project/nexus-browser</p>
<p>The hackathon ended with an impromptu demo of the simulation and feeling rather proud of the work we'd completed. Though secretly I also feel there's more I want to do (and even managed a few commits, fixes and features over this weekend).</p>
<p>It's almost funny that from Jean-François Groff's <a href="https://www.w3.org/History/1991-WWW-NeXT/Implementation/Upgrade.html">original list of upgrade proposals</a> to the WorldWideWeb, our version pretty much feels like it's in the same state as when that document was written - i.e. a faithful replication of 1990! :)</p>
<p>Here's a short demo of navigation and page linking. Again, this is in a browser (fullscreen), using the mouse to do some navigation, and the keyboard for other (including &quot;close all other windows&quot; when I'm left with the summary window):</p>
<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/TGtORpr5sUg" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<h2>Supplementary content</h2>
<p>Whilst I was busy deep inside the code for the simulation, <a href="https://craigmod.com/">Craig Mod</a>, <a href="https://adactio.com/">Jeremy Keith</a>, <a href="https://www.kimberlyblessing.com/">Kimberly Blessing</a> and <a href="http://geek.co.ke/about/">Martin Chiteri</a> were busy completing the content web site that describes the history, documentation and the process the team took to complete the project.</p>
<p>The web site is quite superb and ful of great stories from how we got to have the world's first browser, one of my favourite parts being Kimberly's <a href="https://worldwideweb.cern.ch/code/"><em>Inside the Code</em></a> section.</p>
<p><img src="https://remysharp.com/images/cern-2019/the-site.png" alt="The site"></p>
<h2>Goals and fun insights</h2>
<p>The aim of the project was to restore the world's first browser in a modern browser for the world to try out and experience.</p>
<p>The project would also document and include stories from the time that helped shape the technology we take for granted today.</p>
<p>For me, getting the details right in replicating the experience was important (in that we take pride in how we honour history).</p>
<p>The WorldWideWeb browser came with some really interesting challenges, but it was also unique because not only could you browse the web (what there was of it in 1990…) but you could write for the web in the browser.</p>
<p>HTML editing and URLs weren't intended for the user. All the editing would be done in the rendered view. Styled directly in the browser (from a custom toolbar) and saved to networked drives (possibly pushed using FTP to other networks).</p>
<p>Without access to the source, linking was a key feature of the browser. In talking to Jean-Francois Groff he was able to enlighten me on what the <code>&lt;NEXTID 18&gt;</code> element was that we find so often on the very old pages on the web.</p>
<p>The <code>NEXTID</code> was key to making links work. The user would highlight and <em>mark</em> text they wanted to link to. This action would wrap the source text with a <code>&lt;A NAME=18&gt;</code> tag. The <code>18</code> being the value of the <code>NEXTID</code> and the tag would be incremented.</p>
<p>Of course, <code>NEXTID</code> was a <em>tag</em> never intended to have any contents. Modern browsers however, have always seen that tag and slurped the following text into a child node of <code>NEXTID</code> but it's supposed to be like a bodyless element akin to a <code>LINK</code> or <code>META</code> tag.</p>
<p><em>As I type this I now wonder if <code>NEXTID</code> came about <em>entirely</em> because of the WorldWideWeb browser's way of linking…</em></p>
<p>As for URLs, if you have a play with the simulation you might it rather tricky to spot the URL.</p>
<p>Then following links, due to the editable nature of the documents, meant that you need to <em>double</em> click on the links. A single click would of course set your cursor rather than follow the link as it would in today's browser.</p>
<p><small>(random, untreated picture to follow!)</small></p>
<figure class="half">
<img src="https://remysharp.com/images/cern-2019/mice.jpg" alt="old mice">
<figcaption>A highlight of our working space: The CERN animal shelter</figcaption></figure>
<h2>Some hacks</h2>
<p>In my work I used React to help with code organisation and state inside the software.</p>
<p>I also used Parcel to help me avoid getting bogged down in build configuration.</p>
<p>Of course these both provided me great affordances whilst on a few occasions causing me a headache because there was some bug, but I was so far away from &quot;the metal&quot;, the actual executed JavaScript, it meant I had to work around issues</p>
<p>Although a large portion of the code is dedicated to the UI for the WorldWideWeb browser and also the NeXT operating system, the WebView - as we called the rendering logic - contains hacks that were only achievable using good old tried and tested DOM scripting.</p>
<p>To replicate the editable aspect of the page, I enabled <code>contenteditable</code> on the element that contains all the user HTML. Then using <code>window.getSelection()</code> I'm able to read the cursor position and manipulate the DOM modifying text nodes to reconstruct the link or styles the user selects from the UI.</p>
<h2>Making jaggies</h2>
<p>I kinda love jaggies. Part of replicating the feel was to get the low resolution effect we see on the NeXT operating system.</p>
<p>To do that, there was a number of different techniques employed:</p>
<ol>
<li>All images use <code>image-rendering: pixelated;</code></li>
<li>Font smoothing removed <code>font-smoothing: none</code></li>
<li>Custom hand drawn font</li>
</ol>
<p>What's funny is that the original NeXT screen didn't have fully square pixels, whereas our screens have square pixels. Indeed, pixels are generally squared. For the font, <a href="https://markboulton.co.uk/">Mark</a> and <a href="https://suda.co.uk/">Brian</a> were working from a screenshot taken on the NeXT machine and transferred to their new machines.</p>
<p>What we noticed on the last day was looking closely at the NeXT monitor, we could see the pixels weren't <em>quite</em> square:</p>
<img class="half" src="https://remysharp.com/images/cern-2019/non-square-pixels.jpg" alt="non-square">
<p>It's noticeable in the dot on the <code>i</code> character. Too late to do anything about it, and just one of those happy little stories inside the process of recreating such old technology for modern devices.</p>
<p>Still, the final result looks great:</p>
<p><img src="https://remysharp.com/images/cern-2019/jaggies2.jpg" alt="Jaggies"></p>
<h2>The bits I missed</h2>
<p>There's a lot of small bits here and there that there just wasn't time to implement. Let alone the fact that the reference version of WorldWideWeb was actually missing functionality too.</p>
<p>One great example was in the original WorldWideWeb browser has a <em>(Diagnostic)</em> menu under <em>Document</em> menu. At the bottom is <em>Item</em>, which on the WorldWideWeb browser had would completely shutdown the app in one unprompted abrupt exit. I wasn't too keen to implement a crashing browser!</p>
<p>There's also a lot of menu items, particularly around <em>Edit</em> menu that aren't implemented, but I've aimed to get the &quot;main&quot; features in.</p>
<p>I also suspect I'll sneak in a few commits to the project from home to make small tweaks here and there.</p>
<p>The whole of the <em>Navigate</em> menu functionality is missing, and it's one of my favourites from the original (so I definitely expect I'll have that deployed in the next week).</p>
<h2>Time at CERN</h2>
<p>It's strange to think I've been part of CERN on two occasions now. When I think of CERN, I think collider machines to explore the world of physics and the inception and creation of the web. Something that I wouldn't imagine myself being connected too, I simply see these people as über smarties.</p>
<p>The first time I arrived at CERN in 2013, I didn't really appreciate the gravity of the importance of where I was. It was a hacking job, something I'm well suited to, and there was a vague idea that it was a cool place to work from.</p>
<p>This time around I was fully prepared to enjoy and appreciate my surroundings (whilst also hacking).</p>
<p>The cafeteria at CERN in a central hub for people. We chatted with Robert Cailliau as he recounted his early memories over lunch.</p>
<p>We spent time hanging out and quizzing Jean-Francois Groff both at our working space, but also in the cafeteria.</p>
<p>We heard how he and Tim Berners-Lee discussed the names of the WorldWideWeb browser, words that are common lingo to us today.</p>
<p>How physicists how first used the colliders when CERN came to be in 1957, can still be picking up lunch in those same cafeterias.</p>
<p>Along with that, it's very clear that CERN is a collaborative and welcoming place for hacking science.</p>
<p>We also got to meet some of the students that were placed at CERN. Bright and inquisitive, and not even 16. The place seems to bring the best out in people - or certainly that's what I had seen in my two short visits.</p>
<p>It really was something that I'm very proud of being part of, and I wanted to thank my team mates:</p>
<ul>
<li><a href="http://johnfallsopp.com/">John Allsop</a> (Australia)</li>
<li><a href="https://www.kimberlyblessing.com/">Kimberly Blessing</a> (USA)</li>
<li><a href="http://www.markboulton.co.uk/">Mark Boulton</a> (U.K.)</li>
<li><a href="http://geek.co.ke/about/">Martin Chiteri</a> (Canada / Kenya)</li>
<li><a href="https://adactio.com">Jeremy Keith</a> (U.K. / Ireland)</li>
<li><a href="https://craigmod.com">Craig Mod</a> (Japan / USA)</li>
<li><a href="https://gericci.me">Angela Ricci</a> (France / Brazil)</li>
<li><a href="https://suda.co.uk">Brian Suda</a> (Iceland / USA)</li>
</ul>
<p>And James Gillies for initiating the project and opening the invitation, and the supporting Web Team at CERN, including Kostas, Sebastian, Edwardo and Sotirios.</p>
<p>Then it was off for dinner at the airport to fly home and arrive safe and sound in my own bed at 1am on Saturday morning 💤</p>
<p><img src="https://remysharp.com/images/cern-2019/final-team-pic.jpg" alt="Final team pic"></p>
<p><em>Originally published on <a href="https://remysharp.com/2019/02/18/cern-day-5">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>CERN day 4</title>
      <guid isPermaLink="false">cern-day-4</guid>
      <link>https://remysharp.com/2019/02/15/cern-day-4</link>
      <pubDate>Fri, 15 Feb 2019 08:46:06 +0000</pubDate>
      <description><![CDATA[Another long day from 9am to 10pm coding, conferring, braining, hacking and edging towards our goal: recreating the world's first web browser: WorldWideWeb.app.
It's amazing the speed of the progress we're making, but I feel like we get to cheat a little by leaning on the collective decades of engineering that goes into our current browsers and the language(s) of the web. What's fun is all the reminders behind glass cabinets all around us.

During our data centre visit, we were told that back in '50s, the physicists would fill suitcases with punchcards and bicycle to where the current DC is and have them processed. Now data is flying at unfathomable rates to the building we're working out at.
The &quot;stack&quot;
Given we only had 5 days, a huge priority for me was to ensure that the Web Team at CERN had fully configured our domain and the continuous integration process so that we actually had a URL at the end of all this.
Thursday was also a good day to start merging all the content work that the wordsmiths of the team had been working on.
By 6pm on Thursday we had just that: a git push goes to CERN's CI process (using OpenShift), which builds a docker image, runs my build process and then connects to the service of the public facing URL (which if I'm allowed, I'll publish for Friday's post).
All the code will be in a public repo for your viewing pleasure (please try not to laugh or criticise too much - we're on a tight deadline!!!).

The code stack is as follows:

Node for the backend
Backend: express for http serving
Backend: cheerio to capture proxied requests and massage into a 1990's consumable format (i.e. strip video, img, script, etc)
Backend: tap for (limited) tests
React for the front end
Client: react-draggable for the windows
Client: react-hotkeys for accelerator
Client: react-loadable for (limited) code splitting
Parcel for the build process
11ty for the content site

In a way there's not a lot of 3rd party dependencies, whilst at the same time it's still 200mb of node_modules. In a way, this is akin to the libraries that the WorldWideWeb browser might depend on. I was writing Visual Basic 3.0 around the years the WorldWideWeb was being built, and to &quot;ship&quot; a program, you'd have to include a 3mb .dll library (which meant spanning across multiple floppy disks). So nothing changes, eh?!
It looks awful…which is great!
A primary goal is to replicate the user experience and the look and feel as closely as we can.
Mark Boulton and Brian Suda have been working hard at meticulously replicating the font and have even enlisted external help.
The results are superb and have brought the jaggies of the NeXT operating system to our nice modern rending engines.
That combined with the interface patterns that Angela has done, I'm now able to wire the front end up to make it look really close:

I've also been working on a software system that makes the menu (relatively) simple to manage and wire up to modals and actions that are supposed to occur.
One day left to get the editable aspect done, and though at 4pm I wasn't too optimistic, when I closed my laptop at 1am I think it might be possible to pull off in the next 24 hours.
I'll close with this view of the DC from Tuesday. Note that the middle red pipe in the distance, that block was Europe's main connection point in the 90s taking a whopping 80% of all Europe's web traffic.]]></description>
      <content:encoded><![CDATA[
<p>Another long day from 9am to 10pm coding, conferring, braining, hacking and edging towards our goal: recreating the world's first web browser: WorldWideWeb.app.</p>
<p>It's amazing the speed of the progress we're making, but I feel like we get to cheat a little by leaning on the collective decades of engineering that goes into our current browsers and the language(s) of the web. What's fun is all the reminders behind glass cabinets all around us.</p>
<p><img src="https://remysharp.com/images/cern-2019/punch-cards.jpg" alt="punch"></p>
<p>During our data centre visit, we were told that back in '50s, the physicists would fill suitcases with punchcards and bicycle to where the current <abbr title="data centre">DC</abbr> is and have them processed. Now data is flying at unfathomable rates to the building we're working out at.</p>
<h2>The &quot;stack&quot;</h2>
<p>Given we only had 5 days, a huge priority for me was to ensure that the Web Team at CERN had fully configured our domain and the continuous integration process so that we actually had a URL at the end of all this.</p>
<p>Thursday was also a good day to start merging all the content work that the wordsmiths of the team had been working on.</p>
<p>By 6pm on Thursday we had just that: a git push goes to CERN's <abbr title="continuous integration">CI</abbr> process (using OpenShift), which builds a docker image, runs my build process and then connects to the service of the public facing URL (which if I'm allowed, I'll publish for Friday's post).</p>
<p>All the code will be in a public repo for your viewing pleasure (please try not to laugh or criticise too much - we're on a tight deadline!!!).</p>
<p><img src="https://remysharp.com/images/cern-2019/code.jpg" alt="The code"></p>
<p>The code stack is as follows:</p>
<ul>
<li>Node for the backend</li>
<li>Backend: express for http serving</li>
<li>Backend: cheerio to capture proxied requests and massage into a 1990's consumable format (i.e. strip video, img, script, etc)</li>
<li>Backend: tap for (limited) tests</li>
<li>React for the front end</li>
<li>Client: react-draggable for the windows</li>
<li>Client: react-hotkeys for accelerator</li>
<li>Client: react-loadable for (limited) code splitting</li>
<li>Parcel for the build process</li>
<li>11ty for the content site</li>
</ul>
<p>In a way there's not a lot of 3rd party dependencies, whilst at the same time it's still 200mb of <code>node_modules</code>. In a way, this is akin to the libraries that the WorldWideWeb browser might depend on. I was writing <a href="https://winworldpc.com/product/microsoft-visual-bas/30">Visual Basic 3.0</a> around the years the WorldWideWeb was being built, and to &quot;ship&quot; a program, you'd have to include a 3mb .dll library (which meant spanning across multiple <a href="https://en.m.wikipedia.org/wiki/Floppy_disk">floppy disks</a>). So nothing changes, eh?!</p>
<h2>It looks awful…which is great!</h2>
<p>A primary goal is to replicate the user experience and the look and feel as closely as we can.</p>
<p><a href="https://markboulton.co.uk/">Mark Boulton</a> and <a href="https://suda.co.uk/">Brian Suda</a> have been working hard at meticulously replicating the font and have even enlisted external help.</p>
<p>The results are superb and have brought the jaggies of the NeXT operating system to our nice modern rending engines.</p>
<p>That combined with the interface patterns that Angela has done, I'm now able to wire the front end up to make it look really close:</p>
<p><img src="https://remysharp.com/images/cern-2019/jaggies.jpg" alt="Jaggies"></p>
<p>I've also been working on a software system that makes the menu (relatively) simple to manage and wire up to modals and actions that are supposed to occur.</p>
<p>One day left to get the editable aspect done, and though at 4pm I wasn't too optimistic, when I closed my laptop at 1am I <em>think</em> it might be possible to pull off in the next 24 hours.</p>
<p>I'll close with this view of the DC from Tuesday. Note that the middle red pipe in the distance, <em>that</em> block was Europe's main connection point in the 90s taking a whopping 80% of all Europe's web traffic.</p>
<p><img src="https://remysharp.com/images/cern-2019/europe-dc.jpg" alt="Europe's DC"></p>
<p><em>Originally published on <a href="https://remysharp.com/2019/02/15/cern-day-4">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>CERN day 3</title>
      <guid isPermaLink="false">cern-day-3</guid>
      <link>https://remysharp.com/2019/02/14/cern-day-3</link>
      <pubDate>Thu, 14 Feb 2019 08:42:29 +0000</pubDate>
      <description><![CDATA[The day's work has really started to intensify, particularly as the pressure mounts (certainly in my head) that the project needs to be fairly usable over the next couple of days.]]></description>
      <content:encoded><![CDATA[
<p>The day's work has really started to intensify, particularly as the pressure mounts (certainly in my head) that the project needs to be fairly usable over the next couple of days.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><p><img src="https://remysharp.com/images/cern-2019/team.jpg" alt="Working team"></p>
<p>It's also the first and last day that the <em>whole</em> team is together. Brian Suda arrived from Iceland last night (Tuesday) and John Allsopp returns to Australia on Thursday morning.</p>
<h2>The working day</h2>
<p>We're working out of a lab next to the data centre by day, arriving around 9am (having breakfast together at 8:30). We worked through to around 1:30pm breaking for lunch then returned to work until around 7pm.</p>
<p><img src="https://remysharp.com/images/cern-2019/hq.jpg" alt="HQ"></p>
<p>The days previously had been broken up by visits and short expeditions and I was a little worried we needed full working days. Today we had that - and it was <strong>intense</strong>.</p>
<p>I suspect the rest of the week will be like this, particularly as the end of week deadline looms and my primary aim is to have a <em>nearly</em> working simulation of the WorldWideWeb.</p>
<p>By the end of the working day, my eyes are sore and there's a constant low background headache. My brain on the other hand is raring to keep coding - so I'm a little at odds!</p>
<h2>Excavation</h2>
<p>Kimberly Blessing sitting next to me during the day has been working their way through the original source to the WorldWideWeb browser (more of a revisit of the work they did back in 2013's Line Mode Browser source).</p>
<p>Kimberly has also been documenting the nuggets of hidden stories in the source written back in 1990.</p>
<p>I personally find it fascinating because right there in the code you can see a state machine that's parsing the stream of text from the network connection, building up what was a pre-DOM0 representation of content.</p>
<p><img src="https://remysharp.com/images/cern-2019/c-code.jpg" alt="Code"></p>
<p>One function that I think is brilliant (in an über geeky way) is the <code>output_paragraph</code> photographed about. Kimberly had worked through the code thoroughly enough to work out that <em>this</em> particular function is what adds the margin to paragraphs. Except, they're not paragraphs as we'd know them.</p>
<p>The parser expects to see the following &quot;markup&quot;:</p>
<pre><code class="language-text">This is my first paragraph, now if I wanted to break it up,
I'd use this following tag:
&lt;P&gt;
Then this would be the second paragraph. Whereas in today's
browser parsers would see __this__ line as being *nested*,
but in 1990's browsers, that tag only separates lines.
</code></pre>
<p>So there really wasn't a DOM at all. Of course not. This was pre DOM days. Tim Berners-Lee was parsing the text to render into a NeXT interface component like a <code>NSText</code> element. Probably closer to a RichTextFormat element.</p>
<p>You can see this in action on the Ted Nelson and Xandadu page:</p>
<p><img src="https://remysharp.com/images/cern-2019/ted.jpg" alt="Xandadu"></p>
<p>You can see the paragraph lines separated, but in the original source there's no such thing (and a modern browser will render it completely differently): <a href="http://info.cern.ch/hypertext/WWW/Xanadu.html">http://info.cern.ch/hypertext/WWW/Xanadu.html</a></p>
<p>As Jean-François Groff put it*:</p>
<blockquote>
<p>The WorldWideWeb was a word processor plus HTTP.</p>
</blockquote>
<p><small>* Not a direct quote, sorry!</small></p>
<h2>Progress?</h2>
<p>From my seat, it doesn't look like I've made a lot of progress, but there's definitely code being written!</p>
<p><a href="https://gericci.me/">Angela Ricci</a> has built up the pattern library of elements that are visible in the NeXT operating system, and I've been slowly consuming them into the code I'm working on.</p>
<p>It turns out most of the work I've done so far (in the front end) is replicating the NeXT operating system - such as how windows work, menus (popup and tear off), window ordering and so on.</p>
<p>I've also had to work with the security team at CERN to make sure our backend code (little as it is) is secure and robust. That's to say: more invisible progress!</p>
<p>Still, it's not looking too bad, all this is running and interactive in the browser:</p>
<p><img src="https://remysharp.com/images/cern-2019/wednesday.png" alt="Wednesday progress"></p>
<p>Tomorrow (Thursday) will be wiring up modal boxes, opening URLs, implementing the &quot;navigate&quot; function (which is another geek-cool feature) and then onwards to <em>edit</em>. Just two days left 😱</p>
<p><em>Originally published on <a href="https://remysharp.com/2019/02/14/cern-day-3">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>CERN day 2</title>
      <guid isPermaLink="false">cern-day-2</guid>
      <link>https://remysharp.com/2019/02/13/cern-day-2</link>
      <pubDate>Wed, 13 Feb 2019 10:05:36 +0000</pubDate>
      <description><![CDATA[Though my body clock says it 7:30pm it feels like it's midnight—it's been a long, busy, interesting and surprisingly productive day.

(Oooh look, the old NeXTcube with WorldWideWeb browser can see yesterday's blog post!)]]></description>
      <content:encoded><![CDATA[
<p>Though my body clock says it 7:30pm it feels like it's midnight—it's been a long, busy, interesting and surprisingly productive day.</p>
<p><img src="https://remysharp.com/images/cern-2019/www-at-remy.jpg" alt="WorldWideWeb renders"></p>
<p><em>(Oooh look, the old NeXTcube with WorldWideWeb browser can see yesterday's blog post!)</em></p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>Digging into memories</h2>
<p>The team had a short morning of coding and trying to overcome problems before shooting across the campus to meet <a href="https://en.m.wikipedia.org/wiki/Robert_Cailliau">Robert Cailliau</a> for lunch at the main canteen, where team member, Jeremy Keith worked at picking his brain to the events some 30 years ago.</p>
<p>As much as this project is to recreate the original WorldWideWeb browser, it's also a digital archaeology (or excavation?) project which will be weaved into a story (by the wordsmiths of our team) and published online once our work is done.</p>
<p>We had already spent some time with <a href="https://www.youtube.com/watch?v=rKaAVobE-3k">Jean-François Groff</a> who (as far as I understood) contributed on the WorldWideWeb browser and the <a href="https://en.m.wikipedia.org/wiki/Libwww">libwww</a> library (that powered a lot of http servers and clients). He shared a fun anecdote on how the Line Mode Browser (the 2nd browser) announced itself to the world.</p>
<p>If a user anonymously connected to cern.ch via telnet, instead of a static text notice, they would be presented with the output of the Line Mode Browser rendering a web page (I'd imagine the <a href="http://info.cern.ch/hypertext/WWW/TheProject.html">first web page</a>) and, if I followed correctly, the user could interact and navigate through the the sign in software. Pretty smart!</p>
<p>Along with our own team efforts to document, there's CERN videographer and editors <em>and then</em> we also had the US mission team (sounds serious!) filming and interviewing.</p>
<p><img src="https://remysharp.com/images/cern-2019/jeremy-talks.jpg" alt="Jeremy talks"></p>
<h2>All the data</h2>
<p>We're also working right next to the main data centre for CERN (the picture at the start of this post) and we had a tour of the centre. Tonnes of great (geek) photo ops too!</p>
<p><img src="https://remysharp.com/images/cern-2019/tapes.jpg" alt="Tapes"></p>
<video loop autoplay muted width="680">
  <source src="/images/cern-2019/dc.mp4" type='video/mp4;codecs="avc1.42E01E, mp4a.40.2"'/>
</video>
<p>CERN still make large use of tape based storage (since it's durable, it'll still work in 20 years of being at rest, and if it tears, it's taped back together and only a few files are lost!). I hadn't expected that, but makes a lot of sense.</p>
<h2>Progress!</h2>
<p>With all the activities it felt like we wouldn't make much tangible progress, but that wasn't so.</p>
<p>The morning was spent trying and experimenting to see if we could generate an aliased Helvetica font to replicate the visual feel of the text.</p>
<p>The <code>font-smoothing: none</code> were tried but just don't get the <em>jaggies</em> we want. I'm also experimenting with drawing all the text to canvas with <code>imageSmoothingEnabled=false</code> and then generating a jaggy png for each glyph to then be used for The Mother Of All text replacement techniques. But it might be overkill, so we've move font parity to a &quot;stretch goal&quot;.</p>
<p>My main role is to write code to handle server requests and deal with the interaction. The server was written in a few hours on Monday (barring a few security tweaks), and the front end simulation is being written (quickly) using React (mostly for the benefit of code organisation via components).</p>
<p>So far though, I'm able to:</p>
<ul>
<li>Navigate to any URL</li>
<li>Render it into a &quot;window&quot; (akin to the WorldWideWeb windows)</li>
<li>Edit the content (yes, edit! I'll explain in another post)</li>
<li>Navigate relative links (using double click - WorldWideWeb allowed editing, so a single click would place the cursor)</li>
<li>Move windows about</li>
</ul>
<p><img src="https://remysharp.com/images/cern-2019/day-2-sample.png" alt="Sample!"></p>
<p>The day closed out with us trying to get the NeXTcube to browse a page. Team member <a href="https://www.kimberlyblessing.com/">Kimberly Blessing</a> <em>finally</em> managed to get a binary of (one of) the original WorldWideWeb browsers onto our NeXTcube machine (oddly had a number of <em>other</em> browsers, just not the one we needed).</p>
<p>The machine also needed special network connectivity to connect which we didn't have on Monday. From there we were able to view pages as they had been viewed in the early 90s.</p>
<p>However trying to visit a public URL just didn't seem to work. That obviously didn't stop us :) Using <a href="https://github.com/remy/old-servers">some code I'd written</a> a couple of years ago, I was able to run an HTTP 0.9 compatible server on my laptop that would then serve as a proxy to the &quot;modern&quot; web (ie. running HTTP 1, 1.1 or 2.0).</p>
<p>The HTML is then thrown back to the poor old machine for some interesting rendering challenges.</p>
<p>All in all though, seeing our own blogs being rendered on a browser that was written 30 years ago is pretty amazing. More so as a testament to the power of HTML. Though there was a lot of junk markup in the WorldWideWeb browser window, we could also very clearly read the content of our web sites.</p>
<p>Proving that HTML really is very, very backward compatible, <a href="https://adactio.com/notes/14801">as shown</a> by Jeremy's adactio web site:</p>
<p><img src="https://adactio.com/images/uploaded/14801/original.jpg" alt=""></p>
<p><em>Originally published on <a href="https://remysharp.com/2019/02/13/cern-day-2">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>CERN day 1</title>
      <guid isPermaLink="false">cern-day-1</guid>
      <link>https://remysharp.com/2019/02/12/cern-day-1</link>
      <pubDate>Tue, 12 Feb 2019 09:49:02 +0000</pubDate>
      <description><![CDATA[This marks the beginning of a week long adventure in Geneva Switzerland at CERN, to work on a hack project.]]></description>
      <content:encoded><![CDATA[
<p>This marks the beginning of a week long adventure in Geneva Switzerland at CERN, to work on a hack project.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><p><img src="https://remysharp.com/images/cern-2019/badge.jpg" alt="my badge"></p>
<p>The project is to rebuilding the very first web browser, aptly called WorldWideWeb (though shortly thereafter being renamed to Nexus, since…the whole world wide web thing being a bigger deal). This browser was written by Sir Tim Berners-Lee in 1990 and the project marks the 30th anniversary of the web.</p>
<p>This event also reunites most of the team that made up the 2013 hack project to recreate the Line Mode Browser. On being asked if I was interested in returning, I jumped at the chance. It's CERN. There's some proper smarties rolling around here. Maybe some of that will rub off on me!</p>
<p>The project is a quasi historical restoration mixed with simulation as we bring the original browser to the public via modern technology, specifically and ironically, via today's browsers.</p>
<h2>Day 1</h2>
<p>The first day is always a lot of finding our feet. Trying to articulate (to ourselves) what the scope of the problem is, what we need to achieve and what we <em>want</em> to achieve.</p>
<p>This time around is made a little trickier (or interesting?) as there's more mixed overlap in arrivals of team members. It'll only be a single day on Wednesday that we'll be at full capacity, but compared to 2013's efforts, we have a full week to pull the job off rather than 3 days.</p>
<h2>The WorldWideWeb</h2>
<p>The aim of the morning is to grasp exactly <em>what</em> this browser did, how it did it, and what it looked like.</p>
<p>We've sourced <a href="https://www.youtube.com/watch?v=3c3Rt6QbHDw">videos</a>, <a href="https://www.youtube.com/watch?v=XAF0xdIiI20&amp;feature=youtu.be">emulators</a> and most importantly, and impressively, a <a href="https://en.m.wikipedia.org/wiki/NeXTcube">NeXTcube</a> machine straight from the museum has been delivered to our (war room?…I want to say war room, but there's not much fighting going on…) room.</p>
<p><img src="https://remysharp.com/images/cern-2019/nextcube.jpg" alt="NeXTcube"></p>
<p>One of the main challenges we faced (and still face at time of writing) is that we want the WorldWideWeb to run on the NeXTcube - and oddly this machine has a number of browsers, but none of them are the WorldWideWeb :-\</p>
<p>Somehow we'll deliver the WorldWideWeb.app directly to the machine…if only we could work out how to network the machine…</p>
<h2>Simulation</h2>
<p>My role in the team is code. Firstly the server side aspect to the simulation. Then once that's solved, any interaction in the browser where we'll simulate the NeXTcube desktop and opening windows to the WorldWideWeb.</p>
<p>The server part is relatively small and involves:</p>
<ol>
<li>Proxying requests to collect HTML and return it the client</li>
<li>Blocking all internal .cern.ch sites with a handful of whitelisted exceptions</li>
<li>In the returned HTML, strip out any unsupported tags (like <code>IMG</code> which appeared later in [Mosaic](https://en.m.wikipedia.org/wiki/Mosaic_(web_browser) - TIL: was named because it would fit together pieces like HTTP, FTP, Gopher and NNTP).</li>
</ol>
<p>This part was partially lifted from the original <a href="https://github.com/cern-hackdays/lmb">Line Mode Browser source</a> and cleaned up for the 5½ years worth of new knowledge I had :)</p>
<p>Then on with some traditional fondue with our team and some rest when tomorrow we might try to make some of the <abbr title="user interface">UI</abbr> come together.</p>
<p><img src="https://remysharp.com/images/cern-2019/fondue.jpg" alt="Fondue"></p>
<p><em>Originally published on <a href="https://remysharp.com/2019/02/12/cern-day-1">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>Should I add another dependency?</title>
      <guid isPermaLink="false">should-i-add-another-dependency</guid>
      <link>https://remysharp.com/2019/02/01/should-i-add-another-dependency</link>
      <pubDate>Fri, 01 Feb 2019 14:02:48 +0000</pubDate>
      <description><![CDATA[This is, by far, not the first post on this topic, but it's something that I've considered for years and years and recently I was presented with the question again.
Though this post is through a node perspective, it applies to front end development too.]]></description>
      <content:encoded><![CDATA[
<p>This is, by far, not the first post on this topic, but it's something that I've considered for years and years and recently I was presented with the question again.</p>
<p>Though this post is through a node perspective, it applies to front end development too.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>The recurring question</h2>
<p>When I <a href="https://leftlogic.com/training/">run workshops</a> a question that has come up time and time again since my node workshops started back in 2011:</p>
<blockquote>
<p>How can I know these dependencies are secure/not malicious?</p>
</blockquote>
<p>My answer has always been the same: you need to vet your dependencies.</p>
<p>Today there are some excellent tools available for dependency vetting: <a href="https://snyk.io">Snyk</a> is the code security company I had the pleasure of working with during year one.</p>
<p>These tools can even notify you when a new vulnerability has been found in your project.</p>
<p>It is still down to you, the author, to manage the problem. During those workshops I always draw comparison to the front end development world, which by comparison to Node development, is a <em>little</em> more mature.</p>
<p>I felt like by 2010, the front end developer had common sense to include &quot;trusted&quot; vendors and untrusted would have their code examined and either flagged as good to use, or the functionality would be hand rolled*.</p>
<p>Caveat: <em>not all developers</em> - yes yes, I know.</p>
<p>For example, libraries like jQuery (again, this was 2010) had been vetted over and over, publicly. The heady days of pulling in scripts from DynamicDrive and the likes had long gone.</p>
<p>In a sense, the front end developer was a little more cautious*.</p>
<p>Caveat 2: see caveat 1…</p>
<h2>Missing functionality? Just npm install</h2>
<p>Registries like npm are absolutely amazing for productivity. If I need to do date parsing, or <abbr title="Jason Web Tokens">JWT</abbr> signing, or make http requests, or any number of the things the current 40 billion packages on npm offer, then I can &quot;just npm install it&quot;.</p>
<p>The problem I've seen both amongst my peers and with myself, is that we're a little too quick to run <code>npm install</code>.</p>
<p>Even when the vetting does take place, even a cursory check (is the project maintained, are issues being filed, latest change, etc) - it doesn't account for the vast depth of sub-dependencies.</p>
<p>Sub dependencies is my concern, and again, has been discussed by many others many times over.</p>
<h2>Due diligence</h2>
<p>This is by no means authoritative, but these are the types of signals I look for when considering a dependency.</p>
<p>These signals aren't quite yes/no responses, but it'll help me weed out the libraries that I might not want to consider at all.</p>
<ul>
<li>Can I see the source code (without having to download a tarball from npm's registry)</li>
<li>How deep is their dependency graph, and what are those dependencies used for</li>
<li>Are there issues raised and open on their source code (github, gitlab or otherwise)</li>
<li>Are the open issues new or very old? New might suggest active usage, very old might suggest inactivity or abandonment (which is totally legit, <a href="https://remysharp.com/2018/01/10/open-source-with-a-cap-in-hand">supporting long term open source is hard</a>)</li>
<li>Are there tests and can I see whether they're passing (failing tests isn't particularly a red flag, it could be a non-public build)</li>
</ul>
<p>Even after considering all these items, I still need to ask whether it's worth authoring the solution myself.</p>
<h2>To install or to author?</h2>
<p>Very recently an issue was raised on nodemon asking for scriptable control of the config akin to <code>.eslintrc.js</code> (over a static file such as <code>.eslintrc.json</code>).</p>
<p>The suggestion was to use <a href="https://www.npmjs.com/package/cosmiconfig">cosmiconfig</a> - a library used in a lot of other utilities for config parsing. It checks for multiple config extensions and supports JSON, JavaScript and Yaml.</p>
<p>The big upside is that the library is battle tested.</p>
<p>The downside is: another dependency that carries it's own dependencies.</p>
<p>Of course there's also the edge risk of package hijacking to introduce malicious code deep down in the chain. Again, <a href="https://snyk.io/blog/malicious-code-found-in-npm-package-event-stream/">well documented</a>. I include it only as a factor in the decision.</p>
<p>I had a similar issue recently: I needed to copy the terminal output to the clipboard. Do I install <em>another dependency</em> or just add the 4 lines of code myself to do it?</p>
<p>Authoring will take a little time, and there might be inspiration you can take from existing libraries.</p>
<p>Authoring the functionality yourself also offers the huge benefit of laser focused implementation. Specifically you're not consuming resources to support all the use cases - you're only supporting your use case.</p>
<h2>What to do?</h2>
<p>For me, it's something I have to evaluate on a case by case basis.</p>
<p>I currently, perhaps naïvely, trust largely used projects like Express, React, graphql, Vue and so on (though exactly where &quot;so on&quot; ends, I'm not entirely sure).</p>
<p>It's the middle size projects I have to deliberate about. Very roughly speaking, I will lean towards 3rd party solution when I know the problem is hard to solve. Such as implementing a QR image decoder. I would still do my due diligence, but it'll have a higher likelihood of being installed.</p>
<p>As for everything else: they're in the grey zone.</p>
<p>Something in my gut doesn't want to take up <em>even more</em> resources because I didn't want to write some mundane code. Which is in fact, what prompted this entire post.</p>
<p>TL,DR; be responsible and careful, and really, I don't think there's a simplified solution.</p>
<p><em>Originally published on <a href="https://remysharp.com/2019/02/01/should-i-add-another-dependency">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>A Toe in TypeScript</title>
      <guid isPermaLink="false">toe-in-typescript</guid>
      <link>https://remysharp.com/2019/01/23/toe-in-typescript</link>
      <pubDate>Wed, 23 Jan 2019 09:45:06 +0000</pubDate>
      <description><![CDATA[I was watching a short video recently where the author was using TypeScript, except the only TS'ing thing about their code was the file extension. Otherwise it looked identical to the JavaScript I've come to love.
Since I finally joined the React train, I thought it might be time to take a more serious look at TS, so long as I can do it in tiny incremental steps, one toe at a time.
I had gotten the impression that I could use TypeScript in the same way that I can use the SCSS compiler with regular CSS and it will result in a working build, i.e. with only a filename change to my JavaScript (or near enough).]]></description>
      <content:encoded><![CDATA[
<p>I was watching a short video recently where the author was using TypeScript, except the only TS'ing thing about their code was the file extension. Otherwise it looked identical to the JavaScript I've come to love.</p>
<p>Since I finally joined the React train, I thought it might be time to take a more serious look at TS, so long as I can do it in tiny incremental steps, one toe at a time.</p>
<p>I had gotten the impression that I could use TypeScript in the same way that I can use the SCSS compiler with regular CSS and it will result in a working build, i.e. with only a filename change to my JavaScript (or near enough).</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>My goals</h2>
<p>The only things I wanted out of this toe-dipping experiment was:</p>
<ul>
<li>In node I want to use <code>import x from 'x'</code> with zero-to-near-zero configuration (ideally zero…yes, I'd like my cake and I'd like to eat it)</li>
<li>Type hints in my code (I'm using VS Code)</li>
<li>My code to continue to work without me having to add types to everything and importantly: not to have to refactor my code</li>
</ul>
<p>The thing that I think makes my task slightly more difficult than &quot;just use TypeScript&quot;, is that I have a working code base in the first place. So I intend to port my code.</p>
<h2>Step 1: finding the minimum requirement</h2>
<p>It took a while to find the bare minimum requirement to run my code. I was hoping for a video that explained &quot;install this, and add that&quot;, but in the end I thought I found what I was looking for in a <a href="https://basarat.gitbooks.io/typescript/docs/quick/nodejs.html">TypeScript deep dive</a> ebook by <a href="https://twitter.com/basarat">@basarat</a>.</p>
<p>Essentially…apparently:</p>
<ol>
<li><code>npm i -D typescript @types/node</code></li>
<li><code>tsc --init</code></li>
<li>Use <code>nodemon --watch 'src/**/*.ts' --exec 'ts-node' src/index.ts</code> in my <code>npm run dev</code> scripts</li>
</ol>
<p>Not so bad so far. Now, apparently, I <em>just</em> need to rename my <code>src/index.js</code> to <code>src/index.ts</code> and it'll work.</p>
<h2>My first blocker</h2>
<pre><code>[ts] Cannot redeclare block-scoped variable 'directiveResolvers'. [2451]
</code></pre>
<p>Yeah…no idea. It's not entirely clear without having to google off for the answer, and even then I wasn't sure <em>why</em> I was seeing this error.</p>
<p>I could refactor my code to solve the problem (instead of declaring the <code>directiveResolvers</code> variable, I would export the value directly) - but I <em>still</em> didn't know <em>why</em>.</p>
<p>So, new approach.</p>
<h2>The migration approach</h2>
<p>Another <a href="https://twitter.com/matijagrcic/status/1087781402102452226">friendly twitter'er</a> put me on to the <a href="https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html">TypeScript migration guide</a> which was worth trying since I couldn't get past the error above (not without changing my codebase).</p>
<p>This meant reverting my previous attempts (I'm using git so this was safe to do) and pasting in their minimum <code>tsconfig.json</code> file:</p>
<pre><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"./dist"</span><span class="token punctuation">,</span>
    <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"esnext"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es5"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/**/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules"</span><span class="token punctuation">,</span> <span class="token string">"__tests__"</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Then I ran <code>tsc</code> in the directory that the <code>tsconfig.json</code> file sat in.</p>
<p>Due to my existing codebase, <code>tsc</code> started to throw <strong>a lot</strong> of errors, like, hundreds!</p>
<pre><code>error TS2583: Cannot find name 'AsyncIterator'. Do you need to change your target library? Try changing the `lib` compiler option to es2015 or later.
</code></pre>
<p>The suggestion in the error was to add <code>&quot;lib&quot;: [&quot;es2015&quot;]</code> to the <code>tsconfig.json</code> - except that didn't work at all. Through trial and error, I found that using <code>esnext</code> instead lets me run without this particular error. So now I had new errors to contend with…</p>
<h2>My dependencies</h2>
<p>Once I fixed the error above, <code>tsc</code> complained heavily about a lot of code that I didn't recognise:</p>
<p><img src="https://remysharp.com/images/ts-modules-error.png" alt="My TS errors"></p>
<p>Thankfully enough of the filename was visible to consider that the compile process was going into the <code>node_modules</code> directory, and I'd imagine there was an <code>exclude</code> option in the config.</p>
<p>Except, adding</p>
<pre><code class="language-json"><span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules"</span><span class="token punctuation">]</span>
</code></pre>
<p>…didn't work - and still threw the same TypeScript errors. Which is where I've left it for the time being.</p>
<h2>The usual frustrations</h2>
<p>I work alone and so I don't have anyone I can easily turn to ask the obvious questions, like &quot;what have I don't wrong here&quot;. In the Migrating from JavaScript guide on the TypeScript web site, right after the basic setup, it ends with:</p>
<blockquote>
<p>You should now have TypeScript working with your project</p>
</blockquote>
<p>Which of course I don't. Sadly there's no suggested path forward if you fall into the category of &quot;somehow failing&quot;.</p>
<p>So for the meantime, <a href="https://stackoverflow.com/questions/54324127/migrate-from-js-errors-in-tsc-build">I've turned to StackOverflow</a> (which feels…creepy somehow), in the hope that I can get an answer to my current build failure and hope to continue this story of toe dipping.</p>
<p>Alas, so far, it feels like <code>Object.freeze(toe)</code> has turn gangrenous and fallen off…</p>
<p>I shall return, with new toes (and perhaps less puns) ✊</p>
<p><small>I should add, feel free to point me in the right direction, or right my wrongs in the comments below 👍</small></p>
<p><em>Originally published on <a href="https://remysharp.com/2019/01/23/toe-in-typescript">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>Books I read in 2018</title>
      <guid isPermaLink="false">books-i-read-in-2018</guid>
      <link>https://remysharp.com/2019/01/07/books-i-read-in-2018</link>
      <pubDate>Mon, 07 Jan 2019 16:24:25 +0000</pubDate>
      <description><![CDATA[In 2018 I read 37 (or so) books. Some of which were graphic novels which arguably I wouldn't include if I were talking about &quot;novels read&quot; and there was at least one very, very short book (26 pages 😱), still, as a previous &quot;non-reader&quot;, I'll happy with my reading cadence, and I hope to keep it up in 2019.]]></description>
      <content:encoded><![CDATA[
<p>In 2018 I read 37 (or so) books. Some of which were graphic novels which arguably I wouldn't include if I were talking about &quot;novels read&quot; and there was at least one very, very short book (26 pages 😱), still, as a previous &quot;non-reader&quot;, I'll happy with my reading cadence, and I hope to keep it up in 2019.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><!--
[.[] | select(.read_at? | contains("2019"))] |
map(. + {
  read: (
    if (.read_at | length>0) then
    	.read_at | strptime("%a %b %d %H:%M:%S %z %Y") | todate
    else
    	.read_at
    end
  )
}) | sort_by(.read)
-->
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1492031819m/31195557.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/31195557-the-power">The Power</a> by Naomi Alderman</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<p>Loved this book. For me, it puts a magnifying glass on the grotesque behaviours that men have and still do, inflict on women, simply because of gender, this warped idea that one is stronger than the other. As a man this book is a huge insight into the reality of the power struggle, along with being a great page turner and great thriller.</p>
<small class="reading-metadata">
Read: 2-Jan 2018</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1506421450m/34963526.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/34963526-saga-vol-8">Saga, Vol. 8 (Saga, #8)</a> by Brian K. Vaughan</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<p>Another superb Saga volume. The artwork is so incredible, subtle and respectful - as in the writing.</p>
<p>This volume deals with some topics extremely close to my heart (baby loss) and made for some hard reading, but again, this is done in such a respectful way.</p>
<p>Absolutely love it, and will be chomping at the bit to get hold of volume 9!</p>
<small class="reading-metadata">
Read: 3-Jan 2018<br>Read in: 10 hours
<br>Pages: 146
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1386363852l/19242819.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/19242819-wishful-drinking">Wishful Drinking</a> by Carrie Fisher</strong></h5>
<p><span aria-label="3 stars out of 5">★★★☆☆</span></p>
<p>Very easy and quick read (for me). The writing is extremely conversational (which makes for a nice change).</p>
<p>It does occasionally feels a bit here and there, rather than centred, but I kept reminding myself that the book started as a one woman stand up, so it's understandable.</p>
<p>None the less, the book is littered with (genuinely) laugh out loud moments (took me a good few minutes to stop laughing at the hearing-aid anecdote), and beautiful insights as well as kind words for those (of us) with mental illness.</p>
<small class="reading-metadata">
Read: 4-Jan 2018<br>Read in: 1 day</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1440092318m/23732096.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/23732096-the-unbeatable-squirrel-girl-vol-1">The Unbeatable Squirrel Girl, Vol. 1: Squirrel Power</a> by Ryan North</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<p>Nice alternative to the super heroes I've read in the past. A very strong young woman (that I'd want to share with my kids), and surprisingly doesn't kick butts as often as she alludes to, but uses sensible discussion and compassion to bypass her foes.</p>
<small class="reading-metadata">
Read: 7-Jan 2018
<br>Pages: 128
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1385081681l/18880394.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/18880394-the-lives-of-tao">The Lives of Tao</a> by Wesley Chu</strong></h5>
<p><span aria-label="2 stars out of 5">★★☆☆☆</span></p>
<p>The story was interesting enough, but I ended up getting frustrated with both the author's portrayal of women throughout the book (always using physical traits to describe them, like beautiful, or soft skin), and then there's an entire chapter dedicated to sexist undertones of &quot;how women are past their prime by 30s&quot;.</p>
<p>Then there was Toa himself. From what I understand from the book, he was the one who imprisoned his fellow kind in turtles and the like. So why he was surprised when Zoras (name might be wrong) was utterly pissed off and wanted revenge - is…confusing at best. From what I gathered, Toa started the war himself directly by starting to enslave the other alien beings that annoyed him. So ¯_(ツ)_/¯</p>
<small class="reading-metadata">
Read: 22-Jan 2018<br>Read in: 14 days</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1497398127m/34453011.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/34453011-the-night-masquerade">The Night Masquerade (Binti #3)</a> by Nnedi Okorafor</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<p>Beautiful. Inspiring. Amazing. I loved this third installment of Binti's adventure. What an amazing world and collection of characters Nnedi Okorafor has made.</p>
<p>Throughout reading this book, I'd often forget I was reading a sci-fi novel as I was so utterly consumed by Binti's story, travels, adventure and emotional journey.</p>
<p>This entire series is so fresh and so original it's moved my expectations for all other stories.</p>
<p>Loved it.</p>
<small class="reading-metadata">
Read: 31-Jan 2018<br>Read in: 9 days
<br>Pages: 205
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1499286536l/35607152.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/35607152-who-sent-clement">Who Sent Clement? (Clement #1)</a> by Keith A. Pearson</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<p>Really enjoyed it, and after reading Pearson's '86 fix and the sequel, I'm pretty certain I'll continue to read his books.</p>
<p>The book was a solid page turner, nothing too taxing and a great pairing of characters: Beth (our protagonist) and Clement the deuteragonist. They go on an adventure to find some gold to pay off a local gangster for a debt that Beth doesn't owe.</p>
<p>I just enjoyed the journey of following these two as trapiese through London, test their awkward boundaries and continue to question exactly where did Clement come from.</p>
<p>Hoping to read the sequel - Wrong'un - right away!</p>
<small class="reading-metadata">
Read: 11-Feb 2018<br>Read in: 10 days</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1515263749l/37842043.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/37842043-wrong-un">Wrong'un (Clement #2)</a> by Keith A. Pearson</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<small class="reading-metadata">
Read: 24-Feb 2018
<br>Pages: 440
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1501849041m/35389818.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/35389818-silent-victim">Silent Victim</a> by Caroline Mitchell</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<p>Proper page turner thriller that seemed to get faster and more intense as the book worked it's way to its ending.</p>
<p>Some very serious and dark topics add to the backdrop of the story too, eating disorders, mental health, grooming and sexual abuse. A heavy and good read.</p>
<small class="reading-metadata">
Read: 3-Mar 2018<br>Read in: 7 days
<br>Pages: 325
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1328331686l/11202956.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/11202956-adrian-mole">Adrian Mole: The Prostrate Years (Adrian Mole, #8)</a> by Sue Townsend</strong></h5>
<p><span aria-label="3 stars out of 5">★★★☆☆</span></p>
<p>I had a hard time reading this book, took me a long time as I found Mole and the surrounding characters extremely…sad or pathetic or selfish. It continued on like this until about 80% where I started to enjoy the book a little more and the characters finally start to bloom and become more complex, and endearing.</p>
<p>It ends on a hopeful note, and after realising this was the last Mole story that Sue Townsend wrote before passing away, leaves me a little sad that this life sort of vanishes with her. I had read The Secret Diary when I was a teenager back in the 80s so Mole has always existed for me, almost like a character from a reality show.</p>
<p>So even though I struggled with this book, I'm glad to have read Mole's final chapters, and hope that he's happy somewhere in his literary universe.</p>
<small class="reading-metadata">
Read: 31-Mar 2018<br>Read in: 22 days</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1398034300m/5107.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/5107.The_Catcher_in_the_Rye">The Catcher in the Rye</a> by J.D. Salinger</strong></h5>
<p><span aria-label="3 stars out of 5">★★★☆☆</span></p>
<details><summary>Spoiler</summary>
<p>Wow this book was a slow read given that it was only 198 pages. It took me 4 weeks, which, isn&#39;t a huge amount of time, but the first 80% of the book felt like an age that just wouldn&#39;t end.  </p>
<p>I was originally going to rate this book 1 star but it changed toward the end (the last 20% as I&#39;ll explain).  </p>
<p>Holden Caulfield, as read by myself a near 40 year old man, is a bit of a whingebag, if put subtly. He&#39;s self centred and believes the world owes him something - god knows what though. The 1950s language doesn&#39;t really pose much of a problem (as I read it), and I appreciate that lives were very different to that of 70 years later in ~2018. Not being a teenager myself, I&#39;m not pissed off at everyone for existing so I had trouble connecting to a large part of the story that Holden shares with me during the book.  </p>
<p>The book is also fairly heavy with 1950s sexism, and it isn&#39;t uncommon to come across lines like &quot;the trouble with girls is…&quot;. It&#39;s hard to read and I can imagine how it perpetuates the image of men being above women for the following decades. Either it&#39;s reflecting how men thought at the time, or it re-enforces how they were <em>supposed</em> to think.  </p>
<p>Also, the trouble with Holden was that his (teenage) exaggeration made it hard to tell what was real and what was imagined and what was him simply trying to be older to his peers. Sometimes I was just confused as to what was real and what wasn&#39;t. But then he&#39;d share his feelings about his family, sister and deceased brother Allie…  </p>
<p>When Holden <em>did</em> talk about his family, it seems like you&#39;re able to see the real Holden under all the complexities of being a teenager. Then finally, around the 85% mark, Holden shares with his younger (adored) sister, that if he could be anything he would be:  </p>
<blockquote>
<p>&quot;I keep picturing all these little kids playing some game in this big field of rye and all. Thousands of little kids, and nobody&#39;s around-nobody big, I mean-except me. And I&#39;m standing on the edge of some crazy cliff. What I have to do, I have to catch everybody if they start going over the cliff–I mean if they&#39;re running and they don&#39;t look where they&#39;re going I have to come out from somewhere and catch them. That&#39;s all I&#39;d do all day. I&#39;d just be the catcher in the rye and all. I know it&#39;s crazy, but that&#39;s the only thing I&#39;d really like to be.&quot;</p>
</blockquote>
<p>I think, this is to say, he feels this unbearable responsibility to save his lost brother, and protect his family (and those around him) from the inevitable end.  </p>
<p>Although Holden meets and (rightly) flees from a questionable encounter with an old teacher, moments before that teacher shares what I think what has been eating away at Holden all this time…and possibly for future years to come:  </p>
<blockquote>
<p>&quot;The mark of the immature man is that he wants to die nobly for a cause, while the mark of the mature man is that wants to live humbly for one.&quot;</p>
</blockquote>
<p>Something I realise that Holden struggles with, even at the early age of 16/17, and that he and many others, struggle with for year to come.  </p>
<hr>
<p>So, after what was a fairly painful experience over 4 weeks of listening to Holden&#39;s complaining and poor view of life, I&#39;ve come to soften my view of the poor soul and realise that he&#39;s just tortured and struggling and that it just took a whole lot of pages to get to what&#39;s really important to him.</p>
</details>
<small class="reading-metadata">
Read: 22-Apr 2018<br>Read in: 12 days
<br>Pages: 277
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1356138316m/223380.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/223380.Stories_of_Your_Life_and_Others">Stories of Your Life and Others</a> by Ted Chiang</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<p>I absolutely loved this collection of stories. Inspiring, beautiful, not-so-sci-fi that it was disconnected from our world.</p>
<p>What I also loved about these stories is that they made me think about my own world and and I wanted to share these conversations and thoughts with those around me.</p>
<p>I <em>think</em> my favourite story was 'Story of Your Life' (made in to the film The Arrival) closely followed by 'Tower of Babylon'. But even the _short short_, 'The Evolution of Human Science' was superb, right down to the very first opening paragraph!</p>
<small class="reading-metadata">
Read: 6-May 2018<br>Read in: 11 days
<br>Pages: 281
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1328327049m/11059672.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/11059672-1984">1984</a> by George Orwell</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<details><summary>Spoiler</summary>
<p>A future in my past written in a distant past. What an amazing book. Orwell&#39;s writing has lasted near perfectly (i.e. modern and in context) some 70 years later (which frankly blows my mind).  </p>
<p>The story breaks into three parts as we make our way into Winston&#39;s mind. Part 1 reads like I&#39;m learning around his world and how he experiences it. The mundane work, the acceptance of his role, whilst he secretly scratches his mind back.  </p>
<p>In part 2, I feel like I&#39;m taking into Winston&#39;s heart as he re-experiences the world and the life and love that still exists in it. I loved some of the expressions and sadness that came with those expressions. Such as Winston knowing that what he was doing was against the &quot;rules&quot;, and that it was simply an inevitability of being caught and tortured.  </p>
<p>He believes that he&#39;s given up his body already to the world of 1984, and when the Thought Police catch him, they&#39;ll take his mind, and so long as he protects his heart, he&#39;ll live on.  </p>
<p>Part 3 is mostly from inside of Winston&#39;s mind, as O&#39;Brian works firstly to break Winston&#39;s mind, but then puts it back together in The Party&#39;s form. The place that O&#39;Brian (and thusly The Party) comes from is entirely bleak and worse, believable in my own reality today.  </p>
<p>O&#39;Brian utters phrases like:  </p>
<blockquote>
<p>Nonsense. The earth is as old as we are, no older. How could it be older? Nothing exists except through human consciousness.  </p>
</blockquote>
<p>Bleak.  </p>
<p>Eventually, there&#39;s no winning. There&#39;s no happy ending. There never could be. Winston&#39;s heart is pierced, he&#39;s <em>made</em> to love Big Brother, and only then, when he&#39;s fully remade in The Party&#39;s eyes, does it end. For him, and for us.</p>
</details>
<small class="reading-metadata">
Read: 21-May 2018<br>Read in: 14 days
<br>Pages: 322
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1474169725m/15881.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/15881.Harry_Potter_and_the_Chamber_of_Secrets">Harry Potter and the Chamber of Secrets (Harry Potter, #2)</a> by J.K. Rowling</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<p>Read aloud to the 6 year old. A little scary for him at times, and frankly I'm amazed that he can follow the story whilst I read and he (sometimes) plays with Lego!</p>
<small class="reading-metadata">
Read: 9-Jun 2018<br>Read in: 2 months
<br>Pages: 341
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1510169192m/34854882.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/34854882-jessica-jones-vol-2">Jessica Jones, Vol. 2: The Secrets of Maria Hill</a> by Brian Michael Bendis</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<p>Always great stuff from Bendis and Gaydos.</p>
<small class="reading-metadata">
Read: 10-Jun 2018
<br>Pages: 136
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1344368247m/11109099.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/11109099-snow-crash">Snow Crash</a> by Neal Stephenson</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<details><summary>Spoiler</summary>
<p>(warning: not really a review, more of a thing to remind me of the book)  </p>
<p>Overall, a fairly cinematic story akin to the genre I&#39;d expect The Matrix to fall into. If I&#39;m completely honest, I did occasionally lose track of what was going on through the story (it took me a good few weeks to read it), but the story and two main characters managed to carry me along.  </p>
<p>I also have to admit that it took me a little while to get past the corny named main character &quot;Hiro Protagonist&quot; and the overly macho techno all black, motorcycles and swords. Of course, Hiro is the world&#39;s best swordsman…obviously. Though when I just went with it, it was pretty good fun.  </p>
<p>Neal Stephenson writing was extremely good at visualising a scene and the objects in the world the characters live in (in reading the acknowledgement I learnt that the book was intended as a graphic novel and I wonder if there was graphic work he was describing). All the same, it was very easy to read and see the world as we moved from reality, to the metaverse (virtual world), to vehicles and different landscapes.  </p>
<p>There&#39;s a tonne of historical and religious background to the story too, most of which I understand to be based on real research (from our universe) and the depth of which was incredible.  </p>
<p>The Snow Crash is (supposed to be) a virus that exists in both the digital world and the real world. The story creates (perhaps tenuous?) links between computer/digital ideas and pre-biblical times explaining that the story of Babel was the first instance of the virus, transmitted through verbal programming, affecting humankind.  </p>
<p>The two other main-ish characters were Y.T (a young women/teenager who we follow in parallel with Hiro) and Raven. Y.T. is really fun, and perhaps more relatable since she&#39;s a little more &quot;regular&quot; (compared with Hiro) - just kitted out with lots of tricks in her suit.  </p>
<p>Raven is the uber baddie, throwing glass spears, cutting through bulletproof suits and generally being invisible. He definitely plays the &quot;main henchman&quot; really well, and we even get to understand his motives which I love for a &quot;proper&quot; baddie.  </p>
<p>Overall, I enjoyed the book, left a little confused about the motivation about some of the connections in the book (like what really motivates Y.T. to join forces with Hiro, or how Hiro was one of the first creators of the metaverse, yet he&#39;s somehow a promotor for his roommate&#39;s band…).  </p>
<p>Sorry, not much of a review, more a prompt for my own memory in years to come!</p>
</details>
<small class="reading-metadata">
Read: 15-Jun 2018<br>Read in: 24 days
<br>Pages: 482
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1387227890l/18742149.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/18742149-postcards-from-the-edge">Postcards From the Edge (Suzanne Vale, #1)</a> by Carrie Fisher</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<p>I've now read two Carrie Fisher books and I've loved them both. She is…was such a superb author chock full of quotable lines.</p>
<p>This novel is structured differently to anything I've read so far (which isn't saying a great deal) starting as postcards, then as a she says/he says diary, then as &quot;typical&quot; third person. The book itself is also split into parts that remind me of an indie movie from the 90s (which I think it actually became) whose style is very much a monologue of the protagonist.</p>
<p>I really enjoyed following along the character of Suzanne Vale. The only chapter/part I struggled a little with was Dysphoria, which felt much more like a gossip paper about Hollywood - it's not that it wasn't good, just that some of the reference and lifestyle was a little beyond my being able to connect.</p>
<p>All in all though, I love Fishers prose and I love that reading on the Kindle lets me highlight as I go along (37 highlights from this book!).</p>
<small class="reading-metadata">
Read: 21-Jun 2018<br>Read in: 5 days</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1523061131m/5129.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/5129.Brave_New_World">Brave New World</a> by Aldous Huxley</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<details><summary>Spoiler</summary>
<p>Oh wow. Where do I begin with my review? I&#39;m always amazed at how current a book written in 1931 can be so current and readable nearly a century later in 2018.  </p>
<p>The Brave New World is set in a future some centuries away where happiness is society&#39;s key. Religion, art, science and truth have been sacrificed to archive global sustainable happiness.  </p>
<p>People are engineered from embryo though constant tweaking at the fertilisation process and growth, then though as children conditioned using Pavlovian techniques: you read a book, you get zapped - aged 18 months. Aged 6 the children engage in &quot;erotic play&quot;. Sleep hypnosis with rhymes that the individuals will live inside society with. Each individual is predestined for a class in society: alphas, betas, down to the &quot;epsilon semi-morons&quot; - button pushers.  </p>
<p>All seemingly pretty grotesque, but much later in the book, the benefits of this new world are argued, and it&#39;s a fairly convincing argument. Everything is for the sake of happiness.  </p>
<p>Ignorance is bliss. The less truth there is to be sought, the more content you are with your reality. And thus, a stable, sustainable, healthy society.  </p>
<hr>
<p>It seems as through there&#39;s three protagonist with increasing complexity to break the orthodox rules of the New World.  </p>
<p>Lenina allows herself to romanticise being with one person, and feeling love, but this is surface-deep and she&#39;s still very much a slave to her conditioning and unable to see beyond these walls.  </p>
<p>Bernard Marx, an Alpha plus who appears visibly as a Delta, with nasty rumours that alcohol had been slipped into his fertilisation process. He is able to think and speak outside of his orthodox conditioning but when it comes to acting, he falls short, and in fact proves himself more of a coward (or in fact probably as most would act: though inaction).  </p>
<p>John (the) Savage is different. He has a mother. He&#39;s learnt of God, learned to read and reads Shakespeare. He was born an outcast in The Old World (The Savage Reserve), and brought into the New World when Bernard and Lenina stumble upon him and his mother (originally from the new world but became injured and lost in the reservation some 20 years prior).  </p>
<p>John is the only one who questions and tries to change the new world that he now lives, and, obviously fails. The new world is centuries in the making.  </p>
<p>John is relatable because he comes from <em>our</em> time. And this is why he&#39;s a man out of time.  </p>
<p>There&#39;s nothing he can do to change society in an impactful way, and even if he did, it would be at the sacrifice of happiness of others.  </p>
<p>It&#39;s almost an inevitability that he goes mad. That he doesn&#39;t survive this brave new world. He can&#39;t. He can&#39;t escape it, and so, in the end, like any good Shakespeare tragedy, he tries and fails to extract himself from society, as it&#39;s impossible, in a rage of madness, goes on to kill the woman he loves, and then himself.  </p>
<p>An amazing, and maddening tale. Wow.</p>
</details>
<small class="reading-metadata">
Read: 30-Jun 2018<br>Read in: 7 days
<br>Pages: 288
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1484171419m/33387769.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/33387769-all-systems-red">All Systems Red (The Murderbot Diaries, #1)</a> by Martha Wells</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<p>Love it. Witty, humourous, original and fresh.</p>
<p>The title of &quot;Murderbot Diaries&quot; is what caught my curiosity. The story is told directly from the point of view of the murderbot which makes for a utterly new take on the alien-type stories where shit (always) goes bad.</p>
<p>The murderbot itself is an really refreshing take on the future of bots, who through first &quot;person&quot; storytelling, mostly wants to be by itself, avoids talking about it's feelings, dislikes any eye contact and general doesn't really give two hoots about anything except for their TV binge watching.</p>
<p>I really enjoyed this short story, reading it in (about) one sitting on holiday. Now the only downside is that it <em>is</em> a short, I finished it so quickly and I don't get to enjoy more of the murderbot protagonist. I guess I'll be buying the other three books (though for anyone considering this book, this short book stands alone and you don't need to invest in the full series).</p>
<small class="reading-metadata">
Read: 1-Jul 2018<br>Read in: 22 hours
<br>Pages: 149
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1514297314l/37702946.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/37702946-the-dead-fathers-club">The Dead Fathers Club</a> by Matt Haig</strong></h5>
<p><span aria-label="3 stars out of 5">★★★☆☆</span></p>
<p>The story of an 11 year old boy after his father dies. The story uses a unique story telling device where it's told from the boys mind (or imagined diary), but the result is a stream of consciousness, littered with rule-breaking authoring techniques.</p>
<p>I can imagine this method coming off as forced or trite. But Haig's book manages to execute really well.</p>
<p>There's some vivid scenes of loss that touch my own personal childhood, remembering my own mother in the early chapters.</p>
<p>The boy himself believes he's being visited by his deceased father who asks him to enact revenge for his recent death.</p>
<p>The boy, Philip, struggles with his own confused feelings of being a boy, being 11 and starting to see more of the world, and being thrown into a new family structure. It's all too much for him.</p>
<p>Being inside his head you can understand his actions, and it makes me wonder about how we judge someone from the outside who behaves so oddly or &quot;badly&quot;.</p>
<p>Ultimately we're left to decide for ourselves whether the boy is really seeing ghosts, though one thing is clear by the end: he'll need counselling to get through the next 15 years.</p>
<p>A good, fast, little read, perfect for holiday reading.</p>
<small class="reading-metadata">
Read: 3-Jul 2018<br>Read in: 1 day</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1328327373l/13141699.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/13141699-good-omens">Good Omens</a> by Terry Pratchett</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<p>Such good fun. I think my favourite character was actually Dog. I loved the inner monologue that went with the Hell Hound!</p>
<p>I don't think I've read a story with so many characters intertwining throughout a story (though, truth be told: I've not read many stories!) - and this book did a superb job of keeping all the characters unique, interesting and coherent.</p>
<p>The story (for me), started fairly light (in heart) and towards the last quarter it goes rather dark - although this may be to be expected as the Armageddon is at hand. This also did wonders for my nightmares (I had three consecutive nights dreaming about my own End Of The World dreams).</p>
<p>I'm also really impressed that two different authors created the story in a way that feels completely unified (and this edition included a Q&amp;A chapter at the end where Pratchett and Gaiman share their process and thoughts on each other).</p>
<p>Really fun stuff and included some real laugh out loud moments. The entire last chapter could have been highlighted too - beautiful closing message.</p>
<small class="reading-metadata">
Read: 9-Jul 2018<br>Read in: 4 days
<br>Pages: 382
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1456963758l/29405348.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/29405348-the-obesity-code">The Obesity Code: unlocking the secrets of weight loss</a> by Jason Fung</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<p>I read this book based on a recommendation regarding eating fats. On the title alone, I probably would have ignored this book, but the contents is absolutely superb.</p>
<p>If you're interested in nutrition and how the human body works (and obesity/fat and type 2 diabetes) then this book is a superb match.</p>
<p>The majority of the book is dedicated to understanding the problems of food consumption and how it affects our bodies.</p>
<p>Importantly, the pages are chock full of references to real scientific studies that support the claims.</p>
<p>The last part of the book is dedicated to long term maintenance and long term change (since all diets eventually fail due to the body adjusting it's energy expenditure for the calories being consumed). This is where the studies are a little thinner on the ground, bug Fung uses logic to argue his case (there are <em>some</em> studies, but not as such high frequency as the rest of the book).</p>
<p>All in all, this book has changed my views on dietary fats, helped me understand why we get fat and finally shown me why fasting works.</p>
<p>Highly recommended.</p>
<small class="reading-metadata">
Read: 12-Jul 2018<br>Read in: 9 months</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1511700869m/29349974.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/29349974-neuromancer">Neuromancer</a> by William Gibson</strong></h5>
<p><span aria-label="3 stars out of 5">★★★☆☆</span></p>
<p>Unsure. I have to admit that reading this book I often felt a little lost as to what was happening and why, but just carried on to enjoy the ride.</p>
<p>Reading a book that so significantly influenced modern cinema such as The Matrix and the like, it's interesting to read the descriptions of movement in and out of the matrix (little-m).</p>
<p>I'm also not entirely sure how the book ended, and without the final chapter which tidied up a few things, I would have been rather lost and confused!!!</p>
<p>Good ride. Not sure I'm too bothered about the trilogy, but I would try another William Gibson book in future.</p>
<small class="reading-metadata">
Read: 30-Jul 2018<br>Read in: 11 days</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1374758264m/18242661.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/18242661-past-mortem">Past Mortem</a> by Ben Elton</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<p>My hospital read! I spent a day and night in hospital for tonsillitis, and managed to read through this book (though there's not a whole lot to do in hospital!).</p>
<p>Originally this book was destined for a 3 star, but the last 5th of the book started to really pull the story together and made for quite a fun and gripping ending.</p>
<hr>
<p>I selected this book to read because it was Ben Elton, and I'd read a few of his books before and was expecting satirical, witty and possibly funny. I did not expect this book! The characters are certainly witty, but there's no comedy to be found. This is a dark detective story.</p>
<p>The story did feel a little crowded for the first half, it follows the protagonist Edward Newson, a detective inspector and a good one to boot. Newson is extremely well centred with respect to his work, and it makes him a good detective.</p>
<p>In his personal life, he's off centre, but as the reader, I found his judgement quite questionable - and I'm not 100% sure if his character arc leaves him any better at the end.</p>
<p>At the surface of the story, we have a murder mystery. A pretty graphically gruesome murder. Then there's some very strong elements of sex - and very graphic hardcore sex (which, I didn't really realise I was signing up to). Then there's a heavy bullying theme: how if affects an individual decades on, how the bullies continue to live, if they can move past it, whether it's rooted to their soul or not. Then there's unrequited love. Then there's nostalgia and reaching into the past and trying to rekindle feelings of hope and love and happiness.</p>
<p>So…yeah, it felt a little crowded.</p>
<p>Thankfully the last quarter somehow manages to pull a lot of the themes together (and drops a few on the way).</p>
<p>In the end, I enjoyed the story and enjoyed the gripping ending. It did all tie up a little too nicely, but then it's a story, so why shouldn't it?! :)</p>
<small class="reading-metadata">
Read: 2-Aug 2018<br>Read in: 1 day</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1501011224l/35827220.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/35827220-dogs-of-war">Dogs of War</a> by Adrian Tchaikovsky</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<p>Wow. I loved this book. I'm not entirely sure how I found it - I suspect Amazon randomly recommended it to me, and it was definitely a random purchase - but so glad I did.</p>
<p>I'd just finished reading Snow Crash which has a small character which is an enhanced dog (called a Rat), and a few years back I'd read <a href="https://www.goodreads.com/book/show/22358.We3">We3</a> which has animals who escape a tyranny of human kind…so I think I was expecting something like that. I was wrong!</p>
<p>The book opens from the point of view of Rex, a &quot;bioform&quot; dog - part machine, part dog, part human DNA. The first few pages read as a little trite &quot;I am Rex. I am Good Dog&quot; etc - but this quickly falls away as I realised the darkness of what was being described from Rex's point of view.</p>
<p>Then each chapter is told from different individuals point of view, including Hart - the engineer/carer for the bioforms, Honey - a bioform Bear and many other characters.</p>
<p>The story is split over 5 parts that, I can assume, is covering several years. It starts in a war torn country, but once this part is over, the story goes on to raise the question of the bioform's rights, and whether a human-made thing can be human if it can feel for itself. By <em>human</em>, we mean the condition rather than the species.</p>
<p>The story is a mix of the future of AI and augmented lifeforms, fear of different, corporations and their relationship with slavery - and through it, somehow, the protagonist is a dog that I can actually relate to as he even evolves through the book (the author does a brilliant job of evolving Rex's language and vocabulary as Rex is exposed to more of the world and the story moves on).</p>
<p>Other thoughts that this book brought up for me:</p>
<ul>
<li>If humankind make a <em>thing</em> and a thing can think for itself, should it have rights? What does that process look like - and how long does it take?</li>
<li>Can and should humankind survive in it's current state. Is an augmented human less or more human?</li>
<li>A fully autonomous intelligence is effectively immortal, so it can also outlive generations of humankind until the generations come to accept it?</li>
</ul>
<p>If you're interested in how technology can evolve in our future with AI, singularities, and the like, then I'd definitely recommend this book.</p>
<p>I loved this story, really great stuff!</p>
<small class="reading-metadata">
Read: 12-Aug 2018<br>Read in: 9 days</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1377580187m/18377669.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/18377669-sex-and-drugs-and-sausage-rolls">Sex and Drugs and Sausage Rolls</a> by Robert Rankin</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<p>Fun stuff. I didn't realise this was the sixth novel of a series, but it really didn't matter - and almost added more depth since the characters had a lot more backstory.</p>
<p>Robert Rankin's writing is really fun too. Lots of quick wit throughout the book, the kind that I wish I could come up with in my daily life!</p>
<p>The story is a kind of comical farce whereby history has somehow shifted and things aren't quite what they're supposed to be.</p>
<p>I'm not quite sure if the story is supposed to have a single protagonist or whether it's more of an ensemble. It certainly <em>mostly</em> follows Jim, John and Soap (great…weird, name!). Then there's multiple side characters that I half suspect might have more story in other Brentwood books.</p>
<p>All the same, it was really fun to read a book that clearly had a wide range of characters with more stories to tell.</p>
<small class="reading-metadata">
Read: 20-Aug 2018<br>Read in: 4 days
<br>Pages: 237
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1445115441m/27226216.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/27226216-beetle-boy">Beetle Boy</a> by M.G. Leonard</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<details><summary>Spoiler</summary>
<p>I read this aloud to my son at bedtime (6 turning 7 in a month). It took a chunk of time, and making the voices distinct was fun and tricky!  </p>
<p>I asked him to give me the review, so the 5 stars is his (I&#39;d have given it 4, but the book was for him).  </p>
<hr>
<p>Boy called Darkus found a beetle and had 2 friends, blew up the emporium, and got his dad back and Lauretta Cutter got away.  </p>
<p>I liked them building Basecamp.  </p>
<hr>
<p>❤️</p>
</details>
<small class="reading-metadata">
Read: 6-Sep 2018<br>Read in: 2 months
<br>Pages: 336
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1388767694m/20426572.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/20426572-war-with-the-newts">War with the Newts</a> by Karel Čapek</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<p>Quite brilliant.</p>
<p>The books I've read previously create pockets of world's to tell a story in. The War with the Newts, Capek create an all encompassing story that not only covers the entire planet earth, but also allows for economical, sociological, financial and political effects of the tale being told.</p>
<p>The book can sometimes come across as a quite dry historical account of how the world, and indeed, mankind came to exist with the Newts. But then throughout the book we follow a very small number of characters and eventually returning to the butler who burdened himself with the guilt of introducing the newts to the world, which leads to the inevitable near-end of mankind.</p>
<p>I found the story telling quite brilliant in the ability to describe, in such believable detail, the impact of these newts being on earth, the changes to their environment that allowed for their growth and the world wide impact of this ecological change.</p>
<p>But it was the last two chapters that really won the story for me. The penultimate chapter has us revisiting the butler in his 70s taking a rowing trip with his son, and where he so confidently tells his son that they're safe in Prague. His son isn't so sure, and in a turn towards the end of the chapter, we see that the butler has been carrying the torment of &quot;what if…&quot;, what if <em>he</em> had made a different decision: would the world's fate be in safe hands now?</p>
<p>Then the final chapter was (again, sorry) quite brilliant. A discussion between the author and himself as the writer, trying to determine if mankind's fate is truly doomed. Whether humankind has any way to save itself from its own inevitable self destruction through greed and fear. Or whether the newts are inevitably prone to the same failings as humankind too…</p>
<p>A tough, and sometime dry read, but really quite excellent!</p>
<small class="reading-metadata">
Read: 7-Sep 2018<br>Read in: 17 days
<br>Pages: 231
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1534690573m/38396769.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/38396769-the-brighton-mermaid">The Brighton Mermaid</a> by Dorothy Koomson</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<p>Really enjoyed this thriller. An easy read and natural page turner (with nice short chapters). I was also drawn to this book because I know Brighton (UK) very very well, and I love reading stories located in places that are familiar to me.</p>
<p>The story is a solid thriller and paced really well, and a great read for a holiday (I powered through it over 2 days).</p>
<p>I really loved how (somehow, I'm not sure quite how), the author, Koomson managed to take the character Macy and make me firstly dislike her and get annoyed with the character, then whilst getting frustrated with her, start to understand her and feel compassion towards her, and by the end see strength in her that was always there, just revealed perfectly at the pace the story needed. Surprising stuff 👍</p>
<small class="reading-metadata">
Read: 10-Sep 2018<br>Read in: 2 days</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1536800486m/34802303.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/34802303-tin-man">Tin Man: The Book of the Year, Tender, Moving and Beautiful</a> by Sarah Winman</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<p>Really quite beautiful. I found myself drawing out my reading time for this book, and almost wanting to find a tree to sit under and slowly soak up this story.</p>
<p>It's a story of love, loss and loneliness (or so I read), and it's was beautifully paced dropping back and forth from different points in time for the two main characters. Describing emotions and the tiniest moments in such a loving and tender way. It truly made me want to slow down and just watch the love that moves around us every day.</p>
<p>I want to give this a 4.5 but the stars apparently must be whole or not at all. I just found the ending a little abrupt. But that may have also been confused by the fact that the last 6% (10-ish minutes) of the book was an interview with the author (which was interesting enough), it just threw me when the tale was finished.</p>
<p>All the same, quite beautiful.</p>
<small class="reading-metadata">
Read: 18-Sep 2018<br>Read in: 7 days</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1363957323m/13181643.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/13181643-the-end-specialist">The End Specialist</a> by Drew Magary</strong></h5>
<p><span aria-label="2 stars out of 5">★★☆☆☆</span></p>
<p>The two stars are for: fairly decent writing, it wasn't a rabib page turner, but it was relatively easy going for the most part.</p>
<p>The second star is for such an interesting idea: a cure for death - or more specifically, a genetic cure for the aging of cells.</p>
<p>The story leaps right into this concept and the mental struggle the protagonist, John, faces with the prospect of living forever (or until something else kills him).</p>
<p>The possibilities of this concept are endless…but it felt like this book struggled to grapple with these ideas and, for me, just failed to follow through.</p>
<p>For instance, there's a key character (you'd be lead to think) that appears right at the start, that captures John's intrigue (and frankly I thought they were related to &quot;thriller&quot;, but apparently not). This character then isn't mentioned at all for the majority of the book, and then around 85% of the way through when they suddenly reappear and John <em>suddenly</em> declares his undying love.</p>
<blockquote>
<p>She sighed. “I told you. I’m tired of men falling in love with me.” “I don’t give a shit.” I moved to her and began kissing her.</p>
</blockquote>
<p>Oh for heaven's sake. She just suddenly does a 180 on her own feelings and goes for a full shag before leaping off to a nuclear winter.</p>
<p>The story spends a solid half of the book on John and his family and surrounding and the (local) effect of the cure. No thriller in sight, and certainly no End Specialists. I can't tell if this was more of a drama or just a <em>lot</em> of character building, but it really didn't feel like I got into the meat of the book until much, much further along.</p>
<p>This book comes with an alternative title of &quot;Postmortals&quot; (I read The End Specialist), which would frankly makes a lot more sense. As for being a thriller - I don't think so.</p>
<p>Also with this kind of massive change in humanity, the worldwide ramifications would be huge, and though John does try to portray these in his documentary-like updates (a blog?), it really feels quite local to Amuricka.</p>
<p>Sadly the book deals with an excellent concept, but fails to deliver.</p>
<small class="reading-metadata">
Read: 9-Oct 2018<br>Read in: 21 days
<br>Pages: 435
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1505589896m/36223859.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/36223859-artificial-condition">Artificial Condition (The Murderbot Diaries, #2)</a> by Martha Wells</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<p>Uh! I love this character! This is the 2nd book in the murderbot books and the main character, who I realise now doesn't have a name (nor gender as it's a bot) is so fun to read.</p>
<p>The murderbot is so dry and grumpy and so different from previous characters I've read in sci-fi.</p>
<p>The first book definitely works as a stand alone, and although there's a self contained story in this second book, it definitely carries through a decent number of references to the earlier story that I'd not recommend reading this on it's own.</p>
<p>Since the books are only around 160 pages, I'm moving right on to the next installment and looking forward to it already.</p>
<small class="reading-metadata">
Read: 17-Oct 2018<br>Read in: 6 days</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1523009508m/38812872.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/38812872-saga-vol-9">Saga, Vol. 9 (Saga, #9)</a> by Brian K. Vaughan</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<p>Loved it. As always. Heart wrenching too.</p>
<small class="reading-metadata">
Read: 28-Oct 2018
<br>Pages: 152
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1506001602m/36153880.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/36153880-rogue-protocol">Rogue Protocol (The Murderbot Diaries, #3)</a> by Martha Wells</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<p>As usual from the MurderBot series: excellent, fresh and entertaining.</p>
<p>I felt like the story dug deeper into MurderBot's character, anxiety and it's attempt to understand it's feelings.</p>
<p>Definitely feels like this third book is pulling together an overarching story that will be concluded in book four - which I can't wait to read!</p>
<small class="reading-metadata">
Read: 4-Nov 2018<br>Read in: 17 days
<br>Pages: 160
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1518642623m/35519109.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/35519109-exit-strategy">Exit Strategy (The Murderbot Diaries, #4)</a> by Martha Wells</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<p>I read the first installment of the Murderbot a few months back (as an Amazon single), but after reading it, I decided I was going to pony up the £8 for the following 3 books - although probably the most I've spent on a single book, let alone 3 books - absolutely totally worth it. I <strong>loved</strong> this series.</p>
<p>The series follows Murderbot, a rouge security unit, mostly good at killing but who would rather just watch TV and be left alone. The first book reads easily as a stand alone, and I'd say the second book does too.</p>
<p>The third and fourth pull together all the previous adventures into an overarching story that we see Murderbot learning about itself and struggling with the the concepts of emotions and desires.</p>
<p>In fact, the Murderbot ends with that huge question of: what do you want.</p>
<p>There's so many things I enjoyed about this series: it's a sci-fi that doesn't really require you to understand all the ins and outs of the political systems that exist in the world. I've read a few sci-fi books that really struggle to make the world believable because there's often so much to take in - the Murderbot diaries does this in a way that reads easily and lightly.</p>
<p>The action sequences are really well written and fairly easy to follow - another thing I've struggled with in other books.</p>
<p>Even though we know that the Murderbot is a construct, it exists in a time that emotions can be simulated - and therefore felt - by the Murderbot, which, just like any one of us, they don't relish having to process those emotions, and they'd much rather just shun away and hide away escaping with TV.</p>
<p>Finally the characters are refreshing. As a white man myself, I'm too quick to assume the gender and race of the characters I reading about, Martha Wells does a really good job of keeping me in check, reminding me that Murderbot <em>doesn't</em> have a gender, there's people in the universe that don't identify as one gender, and that not everyone is white. I love this, and I appreciate it in the books I read (in the hope that it shifts my mindset).</p>
<p>Loved it.</p>
<small class="reading-metadata">
Read: 29-Nov 2018<br>Read in: 22 days
<br>Pages: 176
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1365717732m/17792326.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/17792326-the-gift-of-the-magi">The Gift of the Magi</a> by O. Henry</strong></h5>
<p><span aria-label="3 stars out of 5">★★★☆☆</span></p>
<details><summary>Spoiler</summary>
<p>I didn&#39;t quite expect the book (read on my Kindle) to be <em>quite</em> that short.  </p>
<p>It&#39;s more of a scene than a book - which is fine, but exceptional short!  </p>
<p>As the synopsis says, it&#39;s a story of a couple that want to share Christmas gifts but it comes at the cost of the possessions that are most valued to them.  </p>
<p>In that, it&#39;s a tale of kindness and sacrifice. Except that the possessions they sell for the funds are spent on the one thing that complements the other&#39;s valuable possession, ie. Beautiful brushes for beautiful hair (that was sold to raise funds).  </p>
<p>And in that this is a warning that possessions and gifts do not make one happy. Love does that, and it can&#39;t be bought.  </p>
<p>The story also smacks of &quot;older&quot; times from New York (though I can&#39;t remember whether it was based there or not), and as such, even though both the man and woman make the same mistake, it seems that the woman is somehow left to blame and the man gets away with lounging back on the sofa.  </p>
<p>Sure, those are words from the time, but I&#39;ve really no idea how people are reading this book today and leaving reviews saying they&#39;re left with a year in their eye, etc. Left me feeling sorry for the poor sods.</p>
</details>
<small class="reading-metadata">
Read: 16-Dec 2018<br>Read in: 28 minutes
<br>Pages: 26
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1535056705m/41443051.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/41443051-the-truth-pixie">The Truth Pixie (Christmas Series, #3.5)</a> by Matt Haig</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<details><summary>Spoiler</summary>
<p>Good to read aloud to the kids (took about 15-20 minutes), and a beautiful message in the story, whereby the adult reading...me...might have caught a frog in their throat!  </p>
<p>The truth pixie lives a life of loneliness because she always tells the truth, and that truth can get her in to trouble. She decides to leave home and during her adventure meets a girl who is sad because she&#39;s going to be moving home away from friends and everything she knows.  </p>
<p>The truth pixie tells her that it will be sad, and there will be times in life that she&#39;ll be lonely, but that life is full of wonderful moments and love and warmth. A good message to remind ourselves of during the day to day grind of life.  </p>
<p>Also beautifully illustrated.</p>
</details>
<small class="reading-metadata">
Read: 17-Dec 2018
<br>Pages: 119
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1506885627l/36336654.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/36336654-christmas-jars-collector-s-edition">Christmas Jars Collector's Edition</a> by Jason F. Wright</strong></h5>
<p><span aria-label="3 stars out of 5">★★★☆☆</span></p>
<p>A sweet tale of kindness. I asked for recommendations for Christmas–feelings books, and this is one that came up, and it does indeed do a good job of getting those feel–good vibes going.</p>
<p>The story is a little sickly sweet, but that's okay. I particularly liked the first 1/4 of the story that follows Louise, an unexpected adopted mother to Hope. This part is particularly tender and gentle.</p>
<p>The book definitely left me with the desire to follow the Christmas traditions that's created in the story, which as the book ends, it's followed by real life stories of individuals who did just that.</p>
<p>I have the kindle version that, unbeknownst to me, included some twenty-odd true stories at the end, making up around 20% of the kindle edition. I read a few of these, but they did follow the same pattern, and eventually skipped over a few feeling it was similar to reading an appendix of a book (and yes, this makes me a little bit of a terrible person!!!).</p>
<p>Overall: does the job I had hoped it would do: get me in the mood for Christmas by reminding me of the &quot;gift of giving (love)&quot;.</p>
<small class="reading-metadata">
Read: 22-Dec 2018<br>Read in: 4 days<br>Pages: 240</small>
<p><em>Originally published on <a href="https://remysharp.com/2019/01/07/books-i-read-in-2018">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>Books I read in 2017</title>
      <guid isPermaLink="false">books-i-read-in-2017</guid>
      <link>https://remysharp.com/2019/01/06/books-i-read-in-2017</link>
      <pubDate>Sun, 06 Jan 2019 16:24:17 +0000</pubDate>
      <description><![CDATA[I starting reading &quot;properly&quot; at the end of 2016 and carried on into 2017. At this stage, I was just (mostly) rating my books, but by the end of 2017, I started writing short reviews (mostly for myself).
The boost in reading is almost entirely down to using a Kindle, larger fonts and large line heights.]]></description>
      <content:encoded><![CDATA[
<p>I starting reading &quot;properly&quot; at the end of 2016 and carried on into 2017. At this stage, I was just (mostly) rating my books, but by the end of 2017, I started writing short reviews (mostly for myself).</p>
<p>The boost in reading is almost entirely down to using a Kindle, larger fonts and large line heights.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1443049898m/26805962.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/26805962-a-boy-called-christmas">A Boy Called Christmas</a> by Matt Haig</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<small class="reading-metadata">
Read: 1-Jan 2017
<br>Pages: 272
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1454160085m/28513813.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/28513813-reasons-to-stay-alive">Reasons to Stay Alive</a> by Matt Haig</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<small class="reading-metadata">
Read: 9-Jan 2017
<br>Pages: 264
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1486221352l/34113830.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/19229788-death-of-a-salesman">Death of a Salesman: Certain Private Conversations in Two Acts and a Requiem</a> by Arthur  Miller</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<small class="reading-metadata">
Read: 10-Jan 2017</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1465618938l/30518988.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/30518988-dark-matter">Dark Matter</a> by Blake Crouch</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<small class="reading-metadata">
Read: 15-Jan 2017</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1470151075m/29785301.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/29785301-the-song-from-somewhere-else">The Song From Somewhere Else</a> by A.F. Harrold</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<p>Beautiful story (and printed paper was so nice).</p>
<small class="reading-metadata">
Read: 1-Fed 2017
<br>Pages: 216
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1416499186m/23593321.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/23593321-station-eleven">Station Eleven</a> by Emily St. John Mandel</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<small class="reading-metadata">
Read: 4-Fed 2017
<br>Pages: 333
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1328000626m/12359421.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/12359421-ready-player-one">Ready Player One</a> by Ernest Cline</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<small class="reading-metadata">
Read: 9-Fed 2017
<br>Pages: 386
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1464728878l/30326408.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/30326408-a-boy-made-of-blocks">A Boy Made of Blocks</a> by Keith Stuart</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<p>I loved this story. It helps that I'm a dad with a son who has some similarities to the characters, but I found this story so warm and loving. I also found myself dragging the ending out just so that I could continue to have these characters in my life a little longer.</p>
<small class="reading-metadata">
Read: 1-Mar 2017</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1388200541l/3431.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/3431.The_Five_People_You_Meet_in_Heaven">The Five People You Meet in Heaven</a> by Mitch Albom</strong></h5>
<p><span aria-label="3 stars out of 5">★★★☆☆</span></p>
<small class="reading-metadata">
Read: 3-Apr 2017
<br>Pages: 196
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1353739654m/16130537.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/16130537-the-humans">The Humans</a> by Matt Haig</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<small class="reading-metadata">
Read: 28-Apr 2017
<br>Pages: 285
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1486029003m/29237211.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/29237211-saga-vol-7">Saga, Vol. 7 (Saga, #7)</a> by Brian K. Vaughan</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<small class="reading-metadata">
Read: 30-Apr 2017
<br>Pages: 152
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1546031886m/38447.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/38447.The_Handmaid_s_Tale">The Handmaid's Tale</a> by Margaret Atwood</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<small class="reading-metadata">
Read: 3-Jun 2017
<br>Pages: 311
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1511302904m/890.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/890.Of_Mice_and_Men">Of Mice and Men</a> by John Steinbeck</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<small class="reading-metadata">
Read: 6-Jul 2017
<br>Pages: 112
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1493249250m/32052249.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/32052249-jessica-jones-vol-1">Jessica Jones, Vol. 1: Uncaged!</a> by Brian Michael Bendis</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<small class="reading-metadata">
Read: 19-Jul 2017
<br>Pages: 136
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1499688656m/33590076.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/33590076-how-to-stop-time">How to Stop Time</a> by Matt Haig</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<small class="reading-metadata">
Read: 11-Aug 2017
<br>Pages: 325
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1392944893l/20878481.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/20878481-the-girl-who-saved-the-king-of-sweden">The Girl Who Saved the King of Sweden</a> by Jonas Jonasson</strong></h5>
<p><span aria-label="3 stars out of 5">★★★☆☆</span></p>
<small class="reading-metadata">
Read: 20-Aug 2017</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1469102435m/31188362.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/31188362-alan-partridge">Alan Partridge: Nomad</a> by Alan Partridge</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<small class="reading-metadata">
Read: 23-Aug 2017
<br>Pages: 320
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1387726439l/19694475.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/19694475-the-girl-with-all-the-gifts">The Girl With All the Gifts</a> by M.R. Carey</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<p>I loved this book. I'm not a fan of the apocalyptic stories, but this is so well told both from the storyline, but also the _way_ the story was written and each chapter is given from the perspective of the character (whilst still being 3rd person)—that I couldn't put the book down. Love it.</p>
<small class="reading-metadata">
Read: 26-Aug 2017
<br>Pages: 417
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1407712314m/20706317.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/20706317-the-first-fifteen-lives-of-harry-august">The First Fifteen Lives of Harry August</a> by Claire North</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<small class="reading-metadata">
Read: 13-Sep 2017
<br>Pages: 405
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1497098563m/15783514.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/15783514-the-ocean-at-the-end-of-the-lane">The Ocean at the End of the Lane</a> by Neil Gaiman</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<small class="reading-metadata">
Read: 22-Sep 2017
<br>Pages: 181
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1497311673m/34504722.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/34504722-paper-girls-vol-3">Paper Girls, Vol. 3 (Paper Girls, #3)</a> by Brian K. Vaughan</strong></h5>
<p><span aria-label="3 stars out of 5">★★★☆☆</span></p>
<small class="reading-metadata">
Read: 23-Sep 2017
<br>Pages: 128
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1476568100l/32615910.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/32615910-the-86-fix">The '86 Fix</a> by Keith A. Pearson</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<small class="reading-metadata">
Read: 29-Sep 2017</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1486221352l/34113830.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/34113830-beyond-broadhall">Beyond Broadhall (The '86 Fix #2)</a> by Keith A. Pearson</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<details><summary>Spoiler</summary>
<p>Loved it. I happened to read this directly after the &#39;86 Fix, and although it didn&#39;t have the same &quot;retro&quot; feel of the first book, it was superb all the same.  </p>
<p>Some parts of the storyline were actually quite bleak, with the hard reflective thoughts that go with &quot;what if&quot; - I really enjoyed this.  </p>
<p>It ties up a bit overly perfectly at the end, but after following Craig across the two books, and all the hardships he goes through, I was actually quite see Craig have a happy ending!</p>
</details>
<small class="reading-metadata">
Read: 8-Oct 2017</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1490193978l/34661984.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/34661984-how-not-to-be-a-boy">How Not To Be a Boy</a> by Robert Webb</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<small class="reading-metadata">
Read: 23-Nov 2017</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1434818801m/25762847.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/25762847-binti">Binti (Binti, #1)</a> by Nnedi Okorafor</strong></h5>
<p><span aria-label="5 stars out of 5">★★★★★</span></p>
<small class="reading-metadata">
Read: 26-Nov 2017
<br>Pages: 96
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1470413216m/30197814.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/30197814-home">Home (Binti, #2)</a> by Nnedi Okorafor</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<small class="reading-metadata">
Read: 7-Dec 2017
<br>Pages: 176
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1418121739m/23726464.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/23726464-a-christmas-carol">A Christmas Carol</a> by Charles Dickens</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<small class="reading-metadata">
Read: 26-Dec 2017
<br>Pages: 90
</small>
<hr class="review-break">
<img width="98" class="review-image" src="https://images.gr-assets.com/books/1467501429l/30832672.jpg">
<h5><strong><a href="https://www.goodreads.com/book/show/30832672-a-gentleman-in-moscow">A Gentleman in Moscow</a> by Amor Towles</strong></h5>
<p><span aria-label="4 stars out of 5">★★★★☆</span></p>
<p>A beautiful tale, and the detail of the characters, their surroundings and the history throughout the book made me often wonder if it was actually a biography!</p>
<p>The entire story is a eloquently walk through a character's life whose choses to made the best of what they have, and left me wanting to see things the same in my.own daily life.</p>
<small class="reading-metadata">
Read: 29-Dec 2017
<br>Pages: 464
</small>
<p><em>Originally published on <a href="https://remysharp.com/2019/01/06/books-i-read-in-2017">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>My 2018</title>
      <guid isPermaLink="false">my-2018</guid>
      <link>https://remysharp.com/2018/12/31/my-2018</link>
      <pubDate>Mon, 31 Dec 2018 15:08:55 +0000</pubDate>
      <description><![CDATA[With the 12 year of this blog's existence, I present to future me: stuff that happened in 2018 that 2019 version of me has already forgotten. And yes, content warning: this will be me, me, me!]]></description>
      <content:encoded><![CDATA[
<p>With the 12 year of this blog's existence, I present to future me: stuff that happened in 2018 that 2019 version of me has already forgotten. And yes, content warning: this will be me, me, me!</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>Professional</h2>
<p>The two real highlights of this year have been speaking at my two favourite conferences.</p>
<ul>
<li>
<p><strong>jsconf.eu</strong>: In June 2018 I had the great honour of not only speaking at jsconf.eu, but also closing out the event in front of 1,200 odd people. I've spoken at a good number jsconf events in the past, but I also remember speaking in 2009 to 150(ish?) people - so a very different experience.
The talk could not have gone better and I'm very proud of the preparation I'd put in and the final execution, and below a picture (by <a href="https://twitter.com/DasSurma">Surma</a>) of me looking chuff as f**k.</p>
</li>
<li>
<p><strong>speaking at ffconf</strong>: due to unforeseen circumstances, I had to step in to speak at my own ffconf event. I've always made it a point of importance to <em>not</em> speak at my own event, but I couldn't find a suitable replacement in time: so I spoke at the 10th year edition making it doubly special for me.</p>
<p>The talk was a rendition of what I gave at jsconf.eu earlier that year, but with <em>extra danger!</em> I decided that instead of closing my talk with a demo on my computer in the browser, I'd close my talk by generating audio from my phone <em>directly into an original 1984 ZX Spectrum</em>. <a href="https://www.youtube.com/watch?v=lQMcZtiaD0A">Amazingly it worked too!</a></p>
</li>
<li>
<p><strong>ffconf 10</strong>: for the 10th year running, ffconf was another amazing experience. <a href="https://remysharp.com/2018/11/26/ffconf-v10-updates-my-experience">I wrote about it</a> on my blog and am still amazingly proud of the event that <a href="https://twitter.com/julieanne">Julie</a> and I have put on every year since 2009.</p>
</li>
<li>
<p><strong>Next.js training</strong>: following my <a href="https://terminal.training/?coupon=READERS-DISCOUNT&amp;utm_source=blog&amp;utm_medium=banner&amp;utm_campaign=remysharp-discount">terminal.training</a> course, I released a course on <a href="https://next.training.leftlogic.com">universal React using Next.js</a> - it's been received really well, and I've had the chance to provide the course in person too.</p>
</li>
</ul>
<p>Here's me, being super proud, and utterly cocky, with my <em>&quot;Using a Modern Web to Recreate 1980s Slow &amp; Loud Loading Screens&quot;</em> talk:</p>
<p><img src="https://remysharp.com/images/cocky.jpg" alt="Cocky Remy">
<img src="https://remysharp.com/images/speccy.jpg" alt="Spectrum for my talk"></p>
<h2>Side Projects</h2>
<p>As always, I try to find time to tinker and &quot;play&quot; with the web technology, and usually end up producing mini projects (sometimes &quot;side projects&quot; - I'm not 100% sure what the difference is). Here's some of them:</p>
<ul>
<li><strong>jsbin v5 features</strong>: I've been actively working on JS Bin v5 now for almost 18 months (and by &quot;actively&quot; I mean tinkering at random intervals). You can <a href="https://jsbin.com/blog/the-return-and-the-refactor/">preview it here</a> and there's some very neat features tucked away inside the UI, like <a href="https://twitter.com/rem/status/1069266537532542977">Quokka-like value previews</a>.</li>
<li><strong>binary tools</strong>: With my talk this year, I had to generate a lot of my own tools and had to get a deep understanding of binary data manipulation and reading. One was a <a href="https://bitcalc.app">bit calculator</a> another was to help <a href="https://binary.isthe.link/">understand 2's compliment</a>.</li>
<li><strong>forbind</strong>: I've revived an idea that I started some 8 years ago: <a href="https://forbind.io/">forbind - middleware for your webhooks</a>, it's not public yet, but I've been internally testing it for some time now - the next problem is how to monetise it 🤷‍♀</li>
<li><strong>doesitmutate</strong>: a fairly dumb project, but it served as a reminder as to <a href="https://doesitmutate.xyz/">which JavaScript array functions mutated</a> the source data - as daft as it was, <a href="https://news.ycombinator.com/item?id=17380223">people apparently</a> found it useful.</li>
</ul>
<p>I'm also starting to find I'm doing a few more tiny projects that don't make it to the open web, but that's not for trying to hide them. I'm making small hack demos for my kids - most recently I wrote an extremely simplistic version of a tron-like game.</p>
<h2>Personal</h2>
<ul>
<li><strong>Being ill</strong>: My biggest incident this year was three bouts of tonsillitis <a href="https://remysharp.com/2018/07/31/my-nhs-story">rendering me hospitalised</a> (which knocked the damn thing on the head in the end). Then, frustratingly, I pulled my back in the gym (which I've done quite a few times now), and had some other odd symptoms which, together with my osteopath, we think is all back related. Hoping to be fully mended by end of Q1 2019 🤞 (oh, as a sodding bonus, my front tooth was removed - or at least the fake one that was inserted some 22 years previous…still waiting to put a &quot;real&quot; one back).</li>
<li><strong>Turning 40</strong>: a huge milestone in my head (and probably many others). I had an excellent series of birthday celebrations, and genuinely the first in years that I enjoyed my birthday (by no fault of others, and entirely my own failing).</li>
<li><strong>Reading</strong>: I've managed to keep up my reading cadence, and managed to <a href="https://www.goodreads.com/review/list/63680802-remy-sharp?date_added=2018&amp;order=a&amp;shelf=read">finish 37 books</a></li>
<li><strong>Genealogy</strong>: utterly fascinating topic (that I hope to write about), and very similar to debugging (in some way), and I've managed to trace my lineage on my paternal mother's side all the way back to the 1300s which then connects to a royal line which makes it easy to trace to William The Conqueror!</li>
</ul>
<h2>How did I do, and next</h2>
<p>I wrote a few items <a href="https://remysharp.com/2017/12/31/my-2017#onwards-to-2018">I wanted to work</a> on during 2018, and I managed <em>most</em> of the items on the list. I'm still pretty weak on &quot;get off the damn laptop&quot;, but I'll continue to work on it. I also need to revisit my work ethic towards monitoring a <em>good</em> diet and working up a sweat and for heavens sake - stop squatting and deadlifting (which only messes up my back up)!</p>
<p>And as always - the years are always about them ❤️</p>
<p><img src="https://remysharp.com/images/kids-2018.jpg" alt="My kids ❤️"></p>
<p><em>Originally published on <a href="https://remysharp.com/2018/12/31/my-2018">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>memfetch</title>
      <guid isPermaLink="false">memfetch</guid>
      <link>https://remysharp.com/2018/12/24/memfetch</link>
      <pubDate>Mon, 24 Dec 2018 13:08:56 +0000</pubDate>
      <description><![CDATA[The web API fetch is superbly simple (compared to its predecessor: XMLHttpRequest) but during development there's always a few concerns I have when making fetch requests: hitting 3rd party request limits, latency (since I want dev to be rapid) and the potential of going offline (aka: developing on trains).
Since the browser is a beautiful thing, I'm able to wrap the fetch API with my own custom logic and circumvent those concerns, so I introduce to you: memfetch]]></description>
      <content:encoded><![CDATA[
<p>The web API <code>fetch</code> is superbly simple (compared to its predecessor: <code>XMLHttpRequest</code>) but during development there's always a few concerns I have when making fetch requests: hitting 3rd party request limits, latency (since I want dev to be rapid) and the potential of going offline (aka: developing on trains).</p>
<p>Since the browser is a beautiful thing, I'm able to wrap the <code>fetch</code> API with my own custom logic and circumvent those concerns, so I introduce to you: <a href="https://github.com/remy/memfetch">memfetch</a></p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>What it does</h2>
<p>Memfetch will, unobtrusively, wrap the fetch API, and cache <em>any</em> request and response so that if you have the <strong>exact same</strong> request again, it'll be served from local browser cache.</p>
<p>Importantly, there's no change to my code to make use of the cached version of the requests. This aspect is an important feature to me, because I see memfetch as a development tool that I should be able to remove without having to refactor code before production.</p>
<h2>How to use it</h2>
<p>Again, no changes to my JavaScript fetch requests, only to include the memfetch library before my code runs:</p>
<pre><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/memfetch<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
<p>Now all fetch requests will be cached, and subsequent requests will be served directly from the local browser's storage. Importantly, the requests are fingerprinted using the url and the init options passed to the <code>fetch</code>. This means if there's an additional option passed to your request (such as adding <code>mode: 'cors'</code>), memfetch will treat this as distinct.</p>
<p>Again, <em>all</em> fetch requests are cached, which includes <code>POST</code> requests. I suspect in future I'll have some kind of <code>include</code>/<code>exclude</code> configuration if there's demand for it.</p>
<p>To clear the local cache, there's a <code>seed</code> property on the <code>fetch</code> method, if it's set to a value that's different to the current value (i.e. changed from <code>undefined</code> to <code>a</code> or from <code>a</code> to <code>b</code>), the local cache will be completely erased:</p>
<h2>Under the hood</h2>
<p>Originally this library would wrap the <code>fetch</code> API and return a <code>new Proxy</code> that would allow memfetch capture that the code used the <code>.json</code> method, or the <code>.blob</code> method - but it turned out I could simplify the code and drop the use of proxies (as cool as they are).</p>
<p>The original <code>fetch</code> method is stored in an internal method and replaced with a wrapper.</p>
<p>When you code makes a request, the following are stored in IndexedDB (thanks to <a href="https://npmjs.com/idb-keyval">Jake Archibald's micro idb-keyval library</a>):</p>
<ul>
<li>url</li>
<li>fetch options</li>
<li>response headers</li>
<li>status</li>
<li>statusText</li>
<li>blob</li>
</ul>
<p>Using these values, memfetch constructs a <code>new Response</code> and returns <em>that</em> instead of the original response.</p>
<p>Subsequent requests check if there's a cached value, and using the captured data points (above), it resolved with another <code>new Response</code> - this way the authored code can call <code>.blob</code> or <code>.json</code> or any other method implemented by the Response API (which meant memfetch didn't need to use a proxy object).</p>
<p><em>Originally published on <a href="https://remysharp.com/2018/12/24/memfetch">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>How many days until...</title>
      <guid isPermaLink="false">how-many-days-until</guid>
      <link>https://remysharp.com/2018/12/18/how-many-days-until</link>
      <pubDate>Tue, 18 Dec 2018 13:37:29 +0000</pubDate>
      <description><![CDATA[Time is a fun and challenging technical problem to solve, and most recently I had to answer the question: how many days is it until Christmas?
This post is an over the top deep dive into the complexities of accurately answering a question, which boils down to: a ball of wibbly wobbly… time-y wimey… stuff.



Christmas religious (or commercial!) feelings aside, this question, although simple from one human to another, when broken down has lots of complicated moving parts.
I had made a LaMetric countdown to Christmas that displayed the number of days to Christmas, which worked for me, but with all software, didn't work completely right all of the time.]]></description>
      <content:encoded><![CDATA[
<p>Time is a fun and challenging technical problem to solve, and most recently I had to answer the question: how many days is it until Christmas?</p>
<p>This post is an over the top deep dive into the complexities of accurately answering a question, which boils down to: a ball of wibbly wobbly… time-y wimey… stuff.</p>
<video loop muted autoplay width="680">
  <source src="/images/time.mp4" type='video/mp4;codecs="avc1.42E01E, mp4a.40.2"'/>
</video>
<p>Christmas religious (or commercial!) feelings aside, this question, although simple from one human to another, when broken down has lots of complicated moving parts.</p>
<p>I had made a LaMetric countdown to Christmas that displayed the number of days to Christmas, which worked for me, but with all software, didn't work completely right all of the time.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><p><img src="https://remysharp.com/images/xmas-clock.jpg" alt="Christmas countdown clock"></p>
<h2>In code, how many days?</h2>
<p>The code below is the simplistic answer to &quot;how many days until Christmas&quot;:</p>
<pre><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">toDays</span> <span class="token operator">=</span> <span class="token parameter">ms</span> <span class="token operator">=></span> ms <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// assume 2018-12-15 10:30:00</span>
<span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>today<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-12-25 00:00:00`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">toDays</span><span class="token punctuation">(</span>target <span class="token operator">-</span> today<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// about 9.565944 days</span>
</code></pre>
<p>Yes, the above code is extremely simplistic and bug ridden.</p>
<h2>What's a day?</h2>
<p>Say, for instance, that today is the 24th December. The question: <em>how many days until the 25th</em> can be correctly answered in two ways:</p>
<ol>
<li>One day</li>
<li>None</li>
</ol>
<p>Technically correct is zero days, since less than 24 hours equals zero days. This is fine if working with hours, minutes and seconds, but since I want to display a human readable value, the display would say &quot;0 days&quot; to Christmas, a reader would understandably either be confused, wonder if this day is the 25th or raising a bug.</p>
<p>I asked my 7 year old son the same question, and his first answer was one day, then after a moment, zero days, then he wasn't sure.</p>
<p>For a human readable time, I believe the appropriate answer is &quot;1 day&quot; to Christmas (and sure, counting in &quot;sleeps&quot; is a lot easier!). This shows already that the algorithm I'll use needs to calculate the days needs to artificially round the days <em>up</em>.</p>
<h2>Updated to &quot;whole&quot; days</h2>
<p>The change needs to happen in my <code>toDays</code> function. Normally to round a number, I'll use a bitwise OR <code>|</code> operation - which I learnt about at jsconf 2009 as a &quot;fast&quot; way to get the value I want. Except the <code>value | 0</code> operation actually <em>floors</em> the value and doesn't round it. The flooring method works fine with positive values (in this particular case), but when it comes to negative values, it gets a bit unexpected particularly as -0.9 floored is actually -0, which for JavaScript is zero - whereas I would prefer the value -1 to be rounded from -0.9 (specifically as I need to refer to days).</p>
<pre><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">toDays</span> <span class="token operator">=</span> <span class="token parameter">ms</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>ms <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">24</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// assume 2018-12-15 10:30:00</span>
<span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>today<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-12-25 00:00:00`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">toDays</span><span class="token punctuation">(</span>target <span class="token operator">-</span> today<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10 days</span>
</code></pre>
<h2>Not everyone lives in the UK</h2>
<p>Imagine my delight and surprise when I found that my countdown clock was being used by someone out in San Francisco. First of all that's great. Second of all: the countdown will only be right for <em>some</em> of the time for that person 😱.</p>
<p>As my server has it's clock set to UTC+0 and during December UK time is GMT+0 which <em>happens</em> to be UTC+0, the countdown is correct <em>for me</em> when I view it in the UK. However, when viewed in San Francisco, it will say it's Christmas day from 4pm on Christmas eve, and we really can't have that.</p>
<p>The next task is: if I can get your location (by asking), can I work out the timezone adjustment?</p>
<h2>v1: &quot;just ask the user&quot;</h2>
<p>The UI for the countdown could ask the user what timezone they're on.</p>
<p>But that's riddled with problems. Sure, from a computer's point of view, UTC+5 is fine, but who in their right might is going to enter their timezone like that? Or even from a dropdown list, not everyone is going to know. Maybe UTC isn't obvious and we offer GMT+5, but again it's not <strong>obvious</strong>.</p>
<p>Perhaps there's a list of the timezones by name? There's &quot;only&quot; <a href="https://en.m.wikipedia.org/wiki/List_of_time_zone_abbreviations">200 of them</a>. Then there's things like PST is both Pacific Standard Time - UTC-8 and Philippine Standard Time - UTC+8 - a pretty big difference if you select the wrong one.</p>
<p>Not so good.</p>
<h2>v2: Names are better than numbers</h2>
<p>How about instead the user offers their timezone as text? The <a href="http://php.net/manual/en/timezones.php">PHP timezone documentation</a> lists all the timezones by &quot;standard&quot; name.</p>
<p>There's an officially maintained database of timezone <em>names</em> and their offset (copied <a href="https://en.m.wikipedia.org/wiki/List_of_tz_database_time_zones">into Wikipedia</a> for easy access).</p>
<p>The user <em>could</em> write their city, like &quot;Chicago&quot; and it could be matched up to the closest name, and then we'd have the timezone. Except: typos and then Christmas is incorrectly reported and the kids get upset!</p>
<p>So back to a dropdown…and that is unwieldy…much!</p>
<p><select><option>Enjoy 590 options 😱</option><option>Africa/Abidjan</option><option>Africa/Accra</option><option>Africa/Addis_Ababa</option><option>Africa/Algiers</option><option>Africa/Asmara</option><option>Africa/Bamako</option><option>Africa/Bangui</option><option>Africa/Banjul</option><option>Africa/Bissau</option><option>Africa/Blantyre</option><option>Africa/Brazzaville</option><option>Africa/Bujumbura</option><option>Africa/Cairo</option><option>Africa/Casablanca</option><option>Africa/Ceuta</option><option>Africa/Conakry</option><option>Africa/Dakar</option><option>Africa/Dar_es_Salaam</option><option>Africa/Djibouti</option><option>Africa/Douala</option><option>Africa/El_Aaiun</option><option>Africa/Freetown</option><option>Africa/Gaborone</option><option>Africa/Harare</option><option>Africa/Johannesburg</option><option>Africa/Juba</option><option>Africa/Kampala</option><option>Africa/Khartoum</option><option>Africa/Kigali</option><option>Africa/Kinshasa</option><option>Africa/Lagos</option><option>Africa/Libreville</option><option>Africa/Lome</option><option>Africa/Luanda</option><option>Africa/Lubumbashi</option><option>Africa/Lusaka</option><option>Africa/Malabo</option><option>Africa/Maputo</option><option>Africa/Maseru</option><option>Africa/Mbabane</option><option>Africa/Mogadishu</option><option>Africa/Monrovia</option><option>Africa/Nairobi</option><option>Africa/Ndjamena</option><option>Africa/Niamey</option><option>Africa/Nouakchott</option><option>Africa/Ouagadougou</option><option>Africa/Porto-Novo</option><option>Africa/Sao_Tome</option><option>Africa/Timbuktu</option><option>Africa/Tripoli</option><option>Africa/Tunis</option><option>Africa/Windhoek</option><option>America/Adak</option><option>America/Anchorage</option><option>America/Anguilla</option><option>America/Antigua</option><option>America/Araguaina</option><option>America/Argentina/Buenos_Aires</option><option>America/Argentina/Catamarca</option><option>America/Argentina/ComodRivadavia</option><option>America/Argentina/Cordoba</option><option>America/Argentina/Jujuy</option><option>America/Argentina/La_Rioja</option><option>America/Argentina/Mendoza</option><option>America/Argentina/Rio_Gallegos</option><option>America/Argentina/Salta</option><option>America/Argentina/San_Juan</option><option>America/Argentina/San_Luis</option><option>America/Argentina/Tucuman</option><option>America/Argentina/Ushuaia</option><option>America/Aruba</option><option>America/Asuncion</option><option>America/Atikokan</option><option>America/Atka</option><option>America/Bahia</option><option>America/Bahia_Banderas</option><option>America/Barbados</option><option>America/Belem</option><option>America/Belize</option><option>America/Blanc-Sablon</option><option>America/Boa_Vista</option><option>America/Bogota</option><option>America/Boise</option><option>America/Buenos_Aires</option><option>America/Cambridge_Bay</option><option>America/Campo_Grande</option><option>America/Cancun</option><option>America/Caracas</option><option>America/Catamarca</option><option>America/Cayenne</option><option>America/Cayman</option><option>America/Chicago</option><option>America/Chihuahua</option><option>America/Coral_Harbour</option><option>America/Cordoba</option><option>America/Costa_Rica</option><option>America/Creston</option><option>America/Cuiaba</option><option>America/Curacao</option><option>America/Danmarkshavn</option><option>America/Dawson</option><option>America/Dawson_Creek</option><option>America/Denver</option><option>America/Detroit</option><option>America/Dominica</option><option>America/Edmonton</option><option>America/Eirunepe</option><option>America/El_Salvador</option><option>America/Ensenada</option><option>America/Fort_Nelson</option><option>America/Fort_Wayne</option><option>America/Fortaleza</option><option>America/Glace_Bay</option><option>America/Godthab</option><option>America/Goose_Bay</option><option>America/Grand_Turk</option><option>America/Grenada</option><option>America/Guadeloupe</option><option>America/Guatemala</option><option>America/Guayaquil</option><option>America/Guyana</option><option>America/Halifax</option><option>America/Havana</option><option>America/Hermosillo</option><option>America/Indiana/Indianapolis</option><option>America/Indiana/Knox</option><option>America/Indiana/Marengo</option><option>America/Indiana/Petersburg</option><option>America/Indiana/Tell_City</option><option>America/Indiana/Vevay</option><option>America/Indiana/Vincennes</option><option>America/Indiana/Winamac</option><option>America/Indianapolis</option><option>America/Inuvik</option><option>America/Iqaluit</option><option>America/Jamaica</option><option>America/Jujuy</option><option>America/Juneau</option><option>America/Kentucky/Louisville</option><option>America/Kentucky/Monticello</option><option>America/Knox_IN</option><option>America/Kralendijk</option><option>America/La_Paz</option><option>America/Lima</option><option>America/Los_Angeles</option><option>America/Louisville</option><option>America/Lower_Princes</option><option>America/Maceio</option><option>America/Managua</option><option>America/Manaus</option><option>America/Marigot</option><option>America/Martinique</option><option>America/Matamoros</option><option>America/Mazatlan</option><option>America/Mendoza</option><option>America/Menominee</option><option>America/Merida</option><option>America/Metlakatla</option><option>America/Mexico_City</option><option>America/Miquelon</option><option>America/Moncton</option><option>America/Monterrey</option><option>America/Montevideo</option><option>America/Montreal</option><option>America/Montserrat</option><option>America/Nassau</option><option>America/New_York</option><option>America/Nipigon</option><option>America/Nome</option><option>America/Noronha</option><option>America/North_Dakota/Beulah</option><option>America/North_Dakota/Center</option><option>America/North_Dakota/New_Salem</option><option>America/Ojinaga</option><option>America/Panama</option><option>America/Pangnirtung</option><option>America/Paramaribo</option><option>America/Phoenix</option><option>America/Port_of_Spain</option><option>America/Port-au-Prince</option><option>America/Porto_Acre</option><option>America/Porto_Velho</option><option>America/Puerto_Rico</option><option>America/Punta_Arenas</option><option>America/Rainy_River</option><option>America/Rankin_Inlet</option><option>America/Recife</option><option>America/Regina</option><option>America/Resolute</option><option>America/Rio_Branco</option><option>America/Rosario</option><option>America/Santa_Isabel</option><option>America/Santarem</option><option>America/Santiago</option><option>America/Santo_Domingo</option><option>America/Sao_Paulo</option><option>America/Scoresbysund</option><option>America/Shiprock</option><option>America/Sitka</option><option>America/St_Barthelemy</option><option>America/St_Johns</option><option>America/St_Kitts</option><option>America/St_Lucia</option><option>America/St_Thomas</option><option>America/St_Vincent</option><option>America/Swift_Current</option><option>America/Tegucigalpa</option><option>America/Thule</option><option>America/Thunder_Bay</option><option>America/Tijuana</option><option>America/Toronto</option><option>America/Tortola</option><option>America/Vancouver</option><option>America/Virgin</option><option>America/Whitehorse</option><option>America/Winnipeg</option><option>America/Yakutat</option><option>America/Yellowknife</option><option>Antarctica/Casey</option><option>Antarctica/Davis</option><option>Antarctica/DumontDUrville</option><option>Antarctica/Macquarie</option><option>Antarctica/Mawson</option><option>Antarctica/McMurdo</option><option>Antarctica/Palmer</option><option>Antarctica/Rothera</option><option>Antarctica/South_Pole</option><option>Antarctica/Syowa</option><option>Antarctica/Troll</option><option>Antarctica/Vostok</option><option>Arctic/Longyearbyen</option><option>Asia/Aden</option><option>Asia/Almaty</option><option>Asia/Amman</option><option>Asia/Anadyr</option><option>Asia/Aqtau</option><option>Asia/Aqtobe</option><option>Asia/Ashgabat</option><option>Asia/Ashkhabad</option><option>Asia/Atyrau</option><option>Asia/Baghdad</option><option>Asia/Bahrain</option><option>Asia/Baku</option><option>Asia/Bangkok</option><option>Asia/Barnaul</option><option>Asia/Beirut</option><option>Asia/Bishkek</option><option>Asia/Brunei</option><option>Asia/Calcutta</option><option>Asia/Chita</option><option>Asia/Choibalsan</option><option>Asia/Chongqing</option><option>Asia/Chungking</option><option>Asia/Colombo</option><option>Asia/Dacca</option><option>Asia/Damascus</option><option>Asia/Dhaka</option><option>Asia/Dili</option><option>Asia/Dubai</option><option>Asia/Dushanbe</option><option>Asia/Famagusta</option><option>Asia/Gaza</option><option>Asia/Harbin</option><option>Asia/Hebron</option><option>Asia/Ho_Chi_Minh</option><option>Asia/Hong_Kong</option><option>Asia/Hovd</option><option>Asia/Irkutsk</option><option>Asia/Istanbul</option><option>Asia/Jakarta</option><option>Asia/Jayapura</option><option>Asia/Jerusalem</option><option>Asia/Kabul</option><option>Asia/Kamchatka</option><option>Asia/Karachi</option><option>Asia/Kashgar</option><option>Asia/Kathmandu</option><option>Asia/Katmandu</option><option>Asia/Khandyga</option><option>Asia/Kolkata</option><option>Asia/Krasnoyarsk</option><option>Asia/Kuala_Lumpur</option><option>Asia/Kuching</option><option>Asia/Kuwait</option><option>Asia/Macao</option><option>Asia/Macau</option><option>Asia/Magadan</option><option>Asia/Makassar</option><option>Asia/Manila</option><option>Asia/Muscat</option><option>Asia/Novokuznetsk</option><option>Asia/Novosibirsk</option><option>Asia/Omsk</option><option>Asia/Oral</option><option>Asia/Phnom_Penh</option><option>Asia/Pontianak</option><option>Asia/Pyongyang</option><option>Asia/Qatar</option><option>Asia/Qyzylorda</option><option>Asia/Rangoon</option><option>Asia/Riyadh</option><option>Asia/Saigon</option><option>Asia/Sakhalin</option><option>Asia/Samarkand</option><option>Asia/Seoul</option><option>Asia/Shanghai</option><option>Asia/Singapore</option><option>Asia/Srednekolymsk</option><option>Asia/Taipei</option><option>Asia/Tashkent</option><option>Asia/Tbilisi</option><option>Asia/Tehran</option><option>Asia/Tel_Aviv</option><option>Asia/Thimbu</option><option>Asia/Thimphu</option><option>Asia/Tokyo</option><option>Asia/Tomsk</option><option>Asia/Ujung_Pandang</option><option>Asia/Ulaanbaatar</option><option>Asia/Ulan_Bator</option><option>Asia/Urumqi</option><option>Asia/Ust-Nera</option><option>Asia/Vientiane</option><option>Asia/Vladivostok</option><option>Asia/Yakutsk</option><option>Asia/Yangon</option><option>Asia/Yekaterinburg</option><option>Asia/Yerevan</option><option>Atlantic/Azores</option><option>Atlantic/Bermuda</option><option>Atlantic/Canary</option><option>Atlantic/Cape_Verde</option><option>Atlantic/Faeroe</option><option>Atlantic/Faroe</option><option>Atlantic/Jan_Mayen</option><option>Atlantic/Madeira</option><option>Atlantic/Reykjavik</option><option>Atlantic/South_Georgia</option><option>Atlantic/St_Helena</option><option>Atlantic/Stanley</option><option>Australia/ACT</option><option>Australia/Adelaide</option><option>Australia/Brisbane</option><option>Australia/Broken_Hill</option><option>Australia/Canberra</option><option>Australia/Currie</option><option>Australia/Darwin</option><option>Australia/Eucla</option><option>Australia/Hobart</option><option>Australia/LHI</option><option>Australia/Lindeman</option><option>Australia/Lord_Howe</option><option>Australia/Melbourne</option><option>Australia/North</option><option>Australia/NSW</option><option>Australia/Perth</option><option>Australia/Queensland</option><option>Australia/South</option><option>Australia/Sydney</option><option>Australia/Tasmania</option><option>Australia/Victoria</option><option>Australia/West</option><option>Australia/Yancowinna</option><option>Brazil/Acre</option><option>Brazil/DeNoronha</option><option>Brazil/East</option><option>Brazil/West</option><option>Canada/Atlantic</option><option>Canada/Central</option><option>Canada/Eastern</option><option>Canada/Mountain</option><option>Canada/Newfoundland</option><option>Canada/Pacific</option><option>Canada/Saskatchewan</option><option>Canada/Yukon</option><option>CET</option><option>Chile/Continental</option><option>Chile/EasterIsland</option><option>CST6CDT</option><option>Cuba</option><option>EET</option><option>Egypt</option><option>Eire</option><option>EST</option><option>EST5EDT</option><option>Etc/GMT</option><option>Etc/GMT+0</option><option>Etc/GMT+1</option><option>Etc/GMT+10</option><option>Etc/GMT+11</option><option>Etc/GMT+12</option><option>Etc/GMT+2</option><option>Etc/GMT+3</option><option>Etc/GMT+4</option><option>Etc/GMT+5</option><option>Etc/GMT+6</option><option>Etc/GMT+7</option><option>Etc/GMT+8</option><option>Etc/GMT+9</option><option>Etc/GMT0</option><option>Etc/GMT-0</option><option>Etc/GMT-1</option><option>Etc/GMT-10</option><option>Etc/GMT-11</option><option>Etc/GMT-12</option><option>Etc/GMT-13</option><option>Etc/GMT-14</option><option>Etc/GMT-2</option><option>Etc/GMT-3</option><option>Etc/GMT-4</option><option>Etc/GMT-5</option><option>Etc/GMT-6</option><option>Etc/GMT-7</option><option>Etc/GMT-8</option><option>Etc/GMT-9</option><option>Etc/Greenwich</option><option>Etc/UCT</option><option>Etc/Universal</option><option>Etc/UTC</option><option>Etc/Zulu</option><option>Europe/Amsterdam</option><option>Europe/Andorra</option><option>Europe/Astrakhan</option><option>Europe/Athens</option><option>Europe/Belfast</option><option>Europe/Belgrade</option><option>Europe/Berlin</option><option>Europe/Bratislava</option><option>Europe/Brussels</option><option>Europe/Bucharest</option><option>Europe/Budapest</option><option>Europe/Busingen</option><option>Europe/Chisinau</option><option>Europe/Copenhagen</option><option>Europe/Dublin</option><option>Europe/Gibraltar</option><option>Europe/Guernsey</option><option>Europe/Helsinki</option><option>Europe/Isle_of_Man</option><option>Europe/Istanbul</option><option>Europe/Jersey</option><option>Europe/Kaliningrad</option><option>Europe/Kiev</option><option>Europe/Kirov</option><option>Europe/Lisbon</option><option>Europe/Ljubljana</option><option>Europe/London</option><option>Europe/Luxembourg</option><option>Europe/Madrid</option><option>Europe/Malta</option><option>Europe/Mariehamn</option><option>Europe/Minsk</option><option>Europe/Monaco</option><option>Europe/Moscow</option><option>Europe/Nicosia</option><option>Europe/Oslo</option><option>Europe/Paris</option><option>Europe/Podgorica</option><option>Europe/Prague</option><option>Europe/Riga</option><option>Europe/Rome</option><option>Europe/Samara</option><option>Europe/San_Marino</option><option>Europe/Sarajevo</option><option>Europe/Saratov</option><option>Europe/Simferopol</option><option>Europe/Skopje</option><option>Europe/Sofia</option><option>Europe/Stockholm</option><option>Europe/Tallinn</option><option>Europe/Tirane</option><option>Europe/Tiraspol</option><option>Europe/Ulyanovsk</option><option>Europe/Uzhgorod</option><option>Europe/Vaduz</option><option>Europe/Vatican</option><option>Europe/Vienna</option><option>Europe/Vilnius</option><option>Europe/Volgograd</option><option>Europe/Warsaw</option><option>Europe/Zagreb</option><option>Europe/Zaporozhye</option><option>Europe/Zurich</option><option>GB</option><option>GB-Eire</option><option>GMT</option><option>GMT+0</option><option>GMT0</option><option>GMT−0</option><option>Greenwich</option><option>Hongkong</option><option>HST</option><option>Iceland</option><option>Indian/Antananarivo</option><option>Indian/Chagos</option><option>Indian/Christmas</option><option>Indian/Cocos</option><option>Indian/Comoro</option><option>Indian/Kerguelen</option><option>Indian/Mahe</option><option>Indian/Maldives</option><option>Indian/Mauritius</option><option>Indian/Mayotte</option><option>Indian/Reunion</option><option>Iran</option><option>Israel</option><option>Jamaica</option><option>Japan</option><option>Kwajalein</option><option>Libya</option><option>MET</option><option>Mexico/BajaNorte</option><option>Mexico/BajaSur</option><option>Mexico/General</option><option>MST</option><option>MST7MDT</option><option>Navajo</option><option>NZ</option><option>NZ-CHAT</option><option>Pacific/Apia</option><option>Pacific/Auckland</option><option>Pacific/Bougainville</option><option>Pacific/Chatham</option><option>Pacific/Chuuk</option><option>Pacific/Easter</option><option>Pacific/Efate</option><option>Pacific/Enderbury</option><option>Pacific/Fakaofo</option><option>Pacific/Fiji</option><option>Pacific/Funafuti</option><option>Pacific/Galapagos</option><option>Pacific/Gambier</option><option>Pacific/Guadalcanal</option><option>Pacific/Guam</option><option>Pacific/Honolulu</option><option>Pacific/Johnston</option><option>Pacific/Kiritimati</option><option>Pacific/Kosrae</option><option>Pacific/Kwajalein</option><option>Pacific/Majuro</option><option>Pacific/Marquesas</option><option>Pacific/Midway</option><option>Pacific/Nauru</option><option>Pacific/Niue</option><option>Pacific/Norfolk</option><option>Pacific/Noumea</option><option>Pacific/Pago_Pago</option><option>Pacific/Palau</option><option>Pacific/Pitcairn</option><option>Pacific/Pohnpei</option><option>Pacific/Ponape</option><option>Pacific/Port_Moresby</option><option>Pacific/Rarotonga</option><option>Pacific/Saipan</option><option>Pacific/Samoa</option><option>Pacific/Tahiti</option><option>Pacific/Tarawa</option><option>Pacific/Tongatapu</option><option>Pacific/Truk</option><option>Pacific/Wake</option><option>Pacific/Wallis</option><option>Pacific/Yap</option><option>Poland</option><option>Portugal</option><option>PRC</option><option>PST8PDT</option><option>ROC</option><option>ROK</option><option>Singapore</option><option>Turkey</option><option>UCT</option><option>Universal</option><option>US/Alaska</option><option>US/Aleutian</option><option>US/Arizona</option><option>US/Central</option><option>US/Eastern</option><option>US/East-Indiana</option><option>US/Hawaii</option><option>US/Indiana-Starke</option><option>US/Michigan</option><option>US/Mountain</option><option>US/Pacific</option><option>US/Pacific-New</option><option>US/Samoa</option><option>UTC</option><option>WET</option><option>W-SU</option><option>Zulu</option></select></p>
<p>That list 👆 is literally adding 18Kb to the download size of this blog post. That feels a bit silly to me, and not very end-user-friendly!</p>
<h2>v3: your timezone as a service</h2>
<p>Being there's a service for nearly everything, I found a few offerings. I found a node module that would give me a timezone name given a latitude and longitude called <a href="https://www.npmjs.com/package/geo-tz">geo-tz</a>. All I needed was the lat &amp; lng for an IP.</p>
<p><a href="https://ipinfo.io/">ipinfo.io</a> is my goto service for, well, IP info. It will give me a latitude and longitude for an IP, so I signed up getting a developer API key and connected up the services.</p>
<p>Upon my countdown getting a request, the code (roughly) looked like this:</p>
<pre><code class="language-js"><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">ipInfo</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TOKEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> timezone <span class="token operator">=</span> <span class="token function">geoTz</span><span class="token punctuation">(</span><span class="token operator">...</span>info<span class="token punctuation">.</span>loc<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">_</span> <span class="token operator">=></span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> tzOffset <span class="token operator">=</span> tz<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>timezone<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// now use tzOffset in the toDays calculation…</span>
</code></pre>
<p>The <code>tz.get</code> was a <em>giant</em> map of timezone name to offset - generated from the Wikipedia page from the following code:</p>
<pre><code class="language-js"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> points <span class="token operator">=</span> <span class="token function">$$</span><span class="token punctuation">(</span><span class="token string">'.wikitable.sortable'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>
    <span class="token string">'td:nth-child(3), td:nth-child(6)'</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> points<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">[</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>innerText<span class="token punctuation">]</span> <span class="token operator">=</span> points<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerText<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>…which was turned into an ES6 <code>Map</code> object using the following code (I'm not sure why I used a <code>map</code>, I just felt like being swanky):</p>
<pre><code class="language-js"><span class="token comment">// where `raw` is the result scraped from wikipedia</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> offset <span class="token operator">=</span> raw<span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> dir<span class="token punctuation">,</span> hour<span class="token punctuation">,</span> min<span class="token punctuation">]</span> <span class="token operator">=</span> offset<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/([+-])(\d{2}):(\d{2})/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  hour <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>hour<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  min <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  dir <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">1`</span></span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> ms <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">HOUR</span> <span class="token operator">*</span> hour <span class="token operator">+</span> <span class="token constant">MIN</span> <span class="token operator">*</span> min<span class="token punctuation">)</span> <span class="token operator">*</span> dir<span class="token punctuation">;</span>
  <span class="token keyword">return</span> acc<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>curr<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    offset<span class="token punctuation">,</span>
    hour<span class="token punctuation">,</span>
    min<span class="token punctuation">,</span>
    dir<span class="token punctuation">,</span>
    ms<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<hr>
<p>So, how did that pan out?</p>
<p>Well, it started to work. Then… it didn't. Not because the code was bad, but because of the sheer number of requests.</p>
<p>The ipinfo.io service has a free teir of 10,000 requests per month. Plenty for my little countdown I'd image.</p>
<p>Nope.</p>
<p><img src="https://remysharp.com/images/ipinfo.png" alt="ipinfo overdrive"></p>
<p>In around 1½ days my countdown had made over 7 times the max number of requests for the month. I was quickly heading in to the <strong>$250 per month pricing bracket</strong>…for a chirstmas clock!? Nope!</p>
<h1>v4: there's gotta be a cheaper way 😱</h1>
<p>There is also the MaxMind (free) database that offers IP to country data that I've used for other services in the past. However, looking deeper there was a &quot;city&quot; database that gives me a latitude and longitude - yay.</p>
<p>Then by the miracle that is open source, there's an npm module that allows me to enter a lat &amp; lng, and using a massive vector map, it will return the correct timezone - joy!</p>
<p><em>Then</em> I spotted the MaxMind database, although the pricsion isn't super accurate, it's good enough for a city level accuracy, it also includes the timezone name. I can now wire that up to my timezone name lookup to offset and I don't have to rely on spending $3,000 per year for a silly little countdown!</p>
<p>Now in my server, I first open the MaxMind database so it's ready for requesting:</p>
<pre><code class="language-js"><span class="token keyword">const</span> geoLookup <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'maxmind'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">open</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    geoLookup<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'./data/GeoLite2-City.mmdb'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> lookup</span><span class="token punctuation">)</span> <span class="token operator">=></span>
      err <span class="token operator">?</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>lookup<span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Then in my web server, I use the request's IP address to lookup the details. Since the <code>db</code> object is a promise that will repeatidly resolve with the <code>lookup</code> function, this is what my request handler looks like:</p>
<pre><code class="language-js">db<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">lookup</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> ip <span class="token operator">=</span>
    req<span class="token punctuation">.</span>ip <span class="token operator">||</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'x-forwarded-for'</span><span class="token punctuation">]</span> <span class="token operator">||</span> req<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>remoteAddress<span class="token punctuation">;</span>

  <span class="token function">send</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token operator">...</span>lookup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">,</span> ip <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>The result, in a single service looks like this:</p>
<pre><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"accuracy_radius"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token property">"latitude"</span><span class="token operator">:</span> <span class="token number">50.8614</span><span class="token punctuation">,</span>
  <span class="token property">"longitude"</span><span class="token operator">:</span> <span class="token number">-0.1204</span><span class="token punctuation">,</span>
  <span class="token property">"time_zone"</span><span class="token operator">:</span> <span class="token string">"Europe/London"</span><span class="token punctuation">,</span>
  <span class="token property">"ip"</span><span class="token operator">:</span> <span class="token string">"185.65.110.157"</span>
<span class="token punctuation">}</span>
</code></pre>
<h2>Connecting the dots</h2>
<p>Now I have my own (read: don't have to pay) service for IP to timezone, when a requet comes in, I send off to my service to get the timezone (instead of previously ipinfo.io) and use that for the timezone offset.</p>
<p>To calculate the countdown <em>correctly</em> I use the following:</p>
<pre><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">toDays</span> <span class="token operator">=</span> <span class="token parameter">ms</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ms <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getCountdown</span><span class="token punctuation">(</span><span class="token parameter">ip</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// work out the timezone based on the IP</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`https://ip2tz.isthe.link/?ip=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ip<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// includes offset in milliseconds</span>
  <span class="token keyword">const</span> tzOffset tz<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>time_zone<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> year <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>year<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-12-25 00:00:00`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  today <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> tzOffset<span class="token punctuation">.</span>ms<span class="token punctuation">;</span> <span class="token comment">// convert to milliseconds</span>

  <span class="token keyword">return</span> <span class="token function">toDays</span><span class="token punctuation">(</span>target <span class="token operator">-</span> today<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>And finally we change the <code>return</code> line to account for going past Christmas day with:</p>
<pre><code class="language-js"><span class="token keyword">let</span> delta <span class="token operator">=</span> <span class="token function">toDays</span><span class="token punctuation">(</span>target <span class="token operator">-</span> today<span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  delta <span class="token operator">=</span> <span class="token function">toDays</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>year <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-12-25T00:00:00`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> today<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">return</span> delta<span class="token punctuation">;</span>
</code></pre>
<p>And that's it. &quot;Just&quot; a little random side project that shows a countdown to a fix point in time.</p>
<h2>But…what about birthdays 🎂</h2>
<p>Time and programming is hard, there's no doubt. Now imagine this same project, but for birthdays. Similar, but not the same. Most importantly, you're now working with daylight saving time 😱</p>
<p>It means the user could have a birthday during daylight saving time but they're looking at the clock outside of daylight saving time. It could mean their birthday is 2 days away, but actually 47 hours away - and combining DST it's the same thing…or is it? It's a headache, that's all I can tell you 😵🤯😭</p>
<h2>When (roaming) in Rome…</h2>
<p>Roaming mobile networks does not (apparently) equate your phone thinking it's in that country.</p>
<p>Interestingly I found when testing using my mobile phone (on O2 on a UK mobile plan) testing whilst I was in Poland (sorry, &quot;When in Poland&quot; didn't have the same ring to it), the response was a UK IP address and UK timezone.</p>
<p>Apparently this is because mobile phone provides have a small set of IP addresses and when you're on roaming data, you're connecting through satalites to your network and then coming <em>out</em> on to the web on your provider's network (rather than the network you're roaming on). Useful and interesting for debugging future IP &amp; location based projects.</p>
<h2>Links and bits</h2>
<ul>
<li><a href="https://ip2tz.isthe.link">IP to timezone service</a> (not guarenteed to remain live, but if you want it, it's there)</li>
<li><a href="https://github.com/remy/ip2tz">Source to timezone service</a></li>
<li><a href="https://apps.lametric.com/apps/days_to_christmas/2032">My countdown LaMetric app</a></li>
<li><a href="https://github.com/remy/days-to-christmas">Source to countdown service</a></li>
</ul>
<p>Finally, the app should still provide a manual method - auto detection is great until it's not and it fails!</p>
<p><em>Originally published on <a href="https://remysharp.com/2018/12/18/how-many-days-until">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>Ways to extract slides</title>
      <guid isPermaLink="false">ways-to-extract-slides</guid>
      <link>https://remysharp.com/2018/11/29/ways-to-extract-slides</link>
      <pubDate>Thu, 29 Nov 2018 10:02:20 +0000</pubDate>
      <description><![CDATA[When you run events, once everything is over, it's nice to be able to share the slides both as a single link but also for the video production.
I've personally seen a huge range of slide decks, platforms and delivery formats and with ffconf over last week I had to collect and normalise all the speakers' presentations into a format our video editor could work with.
So this post is reminder for my future self on how to do that.]]></description>
      <content:encoded><![CDATA[
<p>When you run events, once everything is over, it's nice to be able to share the slides both as a single link but also for the video production.</p>
<p>I've personally seen a huge range of slide decks, platforms and delivery formats and with ffconf over last week I had to collect and normalise all the speakers' presentations into a format our video editor could work with.</p>
<p>So this post is reminder for my future self on how to do that.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>Tools required</h2>
<p>Keynote, Speakerdeck, Powerpoint, Google Slides and more export directly to PDF. This is worth doing because firstly it gives me a single downloadable that visitors can use, but it's also a great format for extracting individual image slides.</p>
<p>Along with these PDFs, I'll need the following command line tools (on my mac, installed using <code>brew install …</code>):</p>
<ul>
<li><code>curl</code></li>
<li><code>ghostscript</code></li>
<li><code>imagemagick</code> (provides <code>convert</code>)</li>
<li>potentially <code>jq</code></li>
<li><code>node</code> (and npm which comes with node)</li>
<li>Puppeteer</li>
</ul>
<p>If you have <a href="https://brew.sh/">brew</a>, you can install some of the tools using:</p>
<pre><code class="language-bash">$ brew <span class="token function">install</span> ghostscript imagemagick jq
</code></pre>
<p>If you have another package manager, you'll need to check how to install these yourself (I think Window's <a href="https://chocolatey.org/search?q=ghostscript+imagemagick+jq">Chocolatey has most of these packages</a>).</p>
<p><a href="https://nodejs.org">Node</a> can be directly downloaded, and I'll explain how to get Puppeteer later in this post.</p>
<h2>Target output</h2>
<p>I've had two different target file types that I've needed to generate: PDF and separate images. As such, I've listed how to generate each.</p>
<p>So far in my experience, it's always use to go <em>through</em> a PDF format - this is because software like PowerPoint, KeyNote and Google Presentation all export to PDF, and the PDF also ensures a consistent frame size (i.e. if you want all your slides to be 1280x720).</p>
<h2>Online slide sites</h2>
<p>There's a few hosted offerings for slides, so it's useful to know how to extract slides.</p>
<h3>slideshare.net</h3>
<p>Slideshare <em>used</em> to be the place to host slides. Then it got super gross with a tonne of ads on a single page (I think it was up to 10 and it was really hard to find the content!). Since then the site has been bought by LinkedIn and has cleaned up.</p>
<p>Each <a href="https://www.slideshare.net/remy.sharp/is-html5-ready-workshop?from_action=save">slide deck</a> includes a direct download link. You'll need a LinkedIn account (which we all know it's technically <a href="https://twitter.com/rem/status/623409255647969280">impossible</a> to not have) though.</p>
<h3>speakerdeck.com</h3>
<p>This site is my personal favourite, acquired by Github (I <em>think</em>) that also allows <a href="https://speakerdeck.com/rem/the-art-of-debugging">direct download</a> of a PDF from slides at the bottom of the slides.</p>
<p>Speakerdeck's original author is also responsible for <a href="https://github.com/jonmagic/grim">Grim</a> - a ruby gem that extracts images <em>and text</em> from PDFs. I've not used it personally, but I can see how text extraction could be useful (and Slideshare also publishes their text).</p>
<h3>noti.st</h3>
<p>The newest to the party, and beautifully presented. Notist gives the author the option as to whether they want to provide a PDF download of their slides.</p>
<p>So if it's been turned on, you can download the PDF (under the heart shaped icon), <a href="https://noti.st/jensimmons/h0XWcf/everything-you-know-about-web-design-just-changed">if not</a>, you'll need to download the individual slide images manually.</p>
<p>I'm using <a href="">jq</a> to process the JSON API that Notist (brilliantly) provides:</p>
<pre><code class="language-bash">$ <span class="token function">curl</span> https://noti.st/jensimmons/h0XWcf.json <span class="token operator">|</span> jq <span class="token string">'.data[0].attributes.slidedeck.data[0].slides | map(.image)[]'</span> -r  <span class="token operator">|</span> <span class="token function">xargs</span> -n1 <span class="token function">curl</span> -O
</code></pre>
<p>I'm doing a number of things here:</p>
<ol>
<li>Downloading and outputting the JSON for the slides</li>
<li>Processing the JSON through jq and <a href="https://jqterm.com/ab24bd7da0f8d2a99f13db2cbf1807bd?query=.data%5B0%5D.attributes.slidedeck.data%5B0%5D.slides%20%7C%20map%28.image%29%5B%5D&amp;raw=true">transforming to a plain list of URLs</a></li>
<li>Saving each individual URL locally using <code>curl -O</code></li>
</ol>
<p>Now we have an image for each slide. If the target format is PDF, we'll need to combine these into a single PDF, which I'll show you how to do next.</p>
<h2>Images to PDF</h2>
<p>The <code>convert</code> tool is required. The images that were downloaded from Notist have the name format of <code>large-[number].jpg</code>. Your filenames might be slightly different, but the hope is that there's a sequential numbering.</p>
<p>It's not enough to pass <code>large-*.jpg</code> to <code>convert</code> as the slides can be out of order. We'll need to order the filenames numerically.</p>
<p>To achieve this, we'll use the unix program <code>seq</code> that generates a sequence of numbers:</p>
<pre><code class="language-bash">$ convert <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> -f <span class="token string">"large-%g.*"</span> 0 141<span class="token variable">)</span></span> slides.pdf
</code></pre>
<p>The <code>seq</code> command is helping us with a few things:</p>
<ol>
<li>It will generate a sequence from zero to 141 - since Notist starts their slides at slide 0.</li>
<li>The output is formatted (using <code>-f</code>), <code>%g</code> is the default number (with no leading zeros), and prints the string <code>large-0.*</code></li>
<li>Since Notist provides both JPG and PNGs in their slides, it's important to use the <code>.*</code> glob to capture either file type before it's passed to <code>convert</code>.</li>
</ol>
<p>The result will now be a file called <code>slides.pdf</code> with 142 pages.</p>
<h2>PDF to images</h2>
<p>If however you need images from PDF, <code>convert</code> can also be used. The command is a lot simpler:</p>
<pre><code class="language-bash">$ convert slides.pdf slides.png
</code></pre>
<p>Again, you'll need <code>ghostscript</code> installed for this to work. The 2nd argument, the <code>slides.png</code> is a template. It tells <code>convert</code> to generate PNG (and changing the filename to <code>slides.jpg</code> will generate JPGs). It also tells convert to <em>prefix</em> the images with <code>slides-</code> (the dash <code>-</code> is automatically added).</p>
<p>Now running this command (assuming I've used the generated PDF from the earlier step) will give me 142 images starting at <code>slides-0.png</code>.</p>
<h2>HTML slides to images</h2>
<p>HTML to static images is the trickiest conversion, as we'll need to program some JavaScript and there's a lot more moving parts - in particular any <code>iframes</code> in the HTML slides may need some preparation on your side.</p>
<p>None the less, we can use the <a href="https://github.com/GoogleChrome/puppeteer">Puppetter project</a> and a relatively small amount of code to grab <em>screenshots</em> of each stage of an HTML deck and save those as images.</p>
<p>Puppeteer requires <a href="https://nodejs.org">node</a> (at least node 8, or above), once installed, node comes with <code>npm</code>. Create a new directory, and in the terminal run the following commands:</p>
<pre><code class="language-bash">$ <span class="token function">mkdir</span> html-slides
$ <span class="token function">cd</span> html-slides
$ <span class="token function">npm</span> init -f
$ <span class="token function">npm</span> i puppeteer
</code></pre>
<p>Now create a new file called <code>index.js</code> and paste in the <a href="https://gist.github.com/remy/3c4c9f2de6a95ea83ade57fc444e672f">following code</a> which I've commented to help:</p>
<pre><code class="language-js"><span class="token keyword">const</span> puppeteer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'puppeteer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token template-string"><span class="token string">`
/* this injected CSS allows me to hide elememts on the page */
`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token number">142</span><span class="token punctuation">;</span> <span class="token comment">// total number of slides</span>

<span class="token comment">// pages is an array of numbers, unless you need</span>
<span class="token comment">// a single page, which can be passed through on</span>
<span class="token comment">// the command line, ie. node index.js 120</span>
<span class="token comment">// otherwise pages will be an array [0 ... 141]</span>
<span class="token keyword">const</span> pages <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
  <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token function">parseInt</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
  <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">Array</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// generate the url for the slide number, in this</span>
<span class="token comment">// case, the slides start at index 1 so I'm</span>
<span class="token comment">// returning the correct url for the slide.</span>
<span class="token keyword">const</span> <span class="token function-variable function">url</span> <span class="token operator">=</span> <span class="token parameter">n</span> <span class="token operator">=></span> <span class="token template-string"><span class="token string">`https://talks.zx.isthe.link/#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">getPage</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">page<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token function">url</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    waitUntil<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token string">'domcontentloaded'</span><span class="token punctuation">,</span> <span class="token string">'networkidle2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">addStyleTag</span><span class="token punctuation">(</span><span class="token punctuation">{</span> content <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// add the CSS</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'capture #%s'</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">screenshot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    path<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`slides-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>n<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.jpg`</span></span><span class="token punctuation">,</span>
    type<span class="token punctuation">:</span> <span class="token string">'jpeg'</span><span class="token punctuation">,</span>
    quality<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  page<span class="token punctuation">.</span><span class="token function">setViewport</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    width<span class="token punctuation">:</span> <span class="token number">1280</span><span class="token punctuation">,</span>
    height<span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">,</span>
    deviceScaleFactor<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// a promise waterfall, will get one page</span>
  <span class="token comment">// at a time, waiting for the promise to</span>
  <span class="token comment">// settle before running the next</span>
  <span class="token keyword">await</span> pages<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> acc<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">await</span> <span class="token function">getPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> curr<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Importantly, the generation process <em>may</em> happened before the slide is fully rendered. I've told Puppeter to wait until the network has settled and the DOM is ready, but from experience this sometimes leaves one or two slides with half loaded images.</p>
<p>In these cases, I'll request that same slide again, using the named slide argument (i.e. <code>node index.js 120</code> to regenerate the single slide).</p>
<hr>
<p>That's it. I'm sure there's other ways to generate other formats, but this is what I've used for the videos for <a href="https://ffconf.org">ffconf</a> which you can see <a href="https://www.youtube.com/watch?v=eiHxns7e6EI&amp;list=PLXmT1r4krsTo5KtThq4dATD_ctsV8mdJQ">on YouTube</a> and more are being released these coming weeks.</p>
<p><em>Originally published on <a href="https://remysharp.com/2018/11/29/ways-to-extract-slides">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>ffconf v10: updates &amp; my experience</title>
      <guid isPermaLink="false">ffconf-v10-updates-my-experience</guid>
      <link>https://remysharp.com/2018/11/26/ffconf-v10-updates-my-experience</link>
      <pubDate>Mon, 26 Nov 2018 12:57:30 +0000</pubDate>
      <description><![CDATA[It's been just over two weeks since the 10th ffconf ran. I'm only just closing up the final bits of the event, and I know that Julie is still working on her side of the post event tasks.
What, a, year. Going by all the kind words during and after the conference: you loved it - which in turn makes the event even better for me and Julie.]]></description>
      <content:encoded><![CDATA[
<p>It's been just over two weeks since the 10th ffconf ran. I'm only <em>just</em> closing up the final bits of the event, and I know that <a href="https://twitter.com/julieanne">Julie</a> is still working on her side of the post event tasks.</p>
<p>What, a, year. Going by all the kind words during and after the conference: you loved it - which in turn makes the event <em>even</em> better for me and Julie.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>10 years of you</h2>
<p>At the start of each year, I've asked you all to stand for a photo and <em>attempt</em> to capture the moment right before we start our event. It's been an honour to stand in front of over 3,500 people over 10 events and welcome you all to what's essentially me finding the best people out in the world to come teach me in a beautiful cinema.</p>
<p>This collection of images doesn't do it full justice, but when I see all these faces, and all these smiles, over all this time, it really does bring warmth to my heart.</p>
<p><img src="https://remysharp.com/images/ffconf10/ffconf-people.jpg" alt="ffconf people"></p>
<h2>Our speaker family grows</h2>
<p>I'm so honoured and indebted to the truly amazing people who answered my request to have them speak at ffconf.</p>
<p>Each individual who spoke was emailed asking if they would speak on a specific topic.</p>
<p>My warmest thanks to <a href="https://twitter.com/ThisIsJoFrank">Jo</a>, <a href="https://twitter.com/EleanorHaproff">Eleanor</a>, <a href="https://twitter.com/lisi_linhart">Lisi</a>, <a href="https://twitter.com/miss_jwo">Jenny</a>, <a href="https://twitter.com/wmsbill">Willian</a>, <a href="https://twitter.com/sonniesedge">Charlie</a> and <a href="https://twitter.com/twholman">Tim</a>.</p>
<p>Then, at the last moment, I had to step up to fill in a talk which was  a twist in the story I wasn't expecting! I was also partly filled with dread as I expect so much from the ffconf speakers, and now I had to deliver my talk to the same high standard: no pressure!</p>
<p>Thankfully my talk went well and seemed to fit in really well in the curation order - to the point that allowed <a href="https://twitter.com/twholman">Tim</a> to riff off my talk as he opened his, with &quot;if you thought that (Remy's talk) was useless, wait 'til you get a load <em>true</em> useless!&quot;</p>
<p><img src="https://remysharp.com/images/ffconf10/fam.jpg" alt="ffconf 2018 team"></p>
<h2>On family…</h2>
<p>Being as it's the 10th event, as a surprise for the Friday closing notes, I gave a very short presentation on events. I love that our event has changed over the years, and the logo is the first place you'll see that. Intentionally designed to be ambiguous, here they all are in their <em>ff</em> glory!</p>
<p><img src="https://remysharp.com/images/ffconf10/logos.jpg" alt="10 years of ffconf logos"></p>
<p>And the whole time, the months and months that go on, hidden, behind the scenes is Julie and our family and as the event is such a large part of mine and Julie's lives, it has also spilled out into our kids. Who, over the years have helped to pack and prepare lanyards, stick stickers, throw t-shirts, and who have <em>always</em> made an appearance at the end of our event 😍👨‍👩‍👧‍👦❤️</p>
<p><img src="https://remysharp.com/images/ffconf10/family.jpg" alt="our family"></p>
<h2>Changing of faces</h2>
<p>The very first ffconf was a different experience to the tenth. I was ignorant to diversity (or at least my part to help) and I know our attendees were made up almost entirely of white men (sure, our event wasn't unique in it's ignorance).</p>
<p>As the years moved forward, my eyes were opened up to my role in being an organiser of ffconf. I'm proud to say that looking out to the two days of attendees and speakers our event is making good progress to changing the faces I've looked out at over the years.</p>
<p>In part, I believe that our scholarship programme has had a big hand in this change. I'm incredibly proud of our scholarship programme, and I know that Julie puts a tonne of time into planning travel and accommodation for those who need it.</p>
<p>I know that making the event inclusive for everyone is a &quot;long game&quot;, but I've also seen first hand that it's starting to pay off, and it's messages like the following that tells us we're doing the Right Thing:</p>
<blockquote>
<p>2 years ago I attended my first #ffconf on a diversity ticket, fresh out of GA bootcamp. Today my job paid my way. Next year, maybe I can afford to buy someone else's diversity ticket to pay it forward.</p>
</blockquote>
<p>…and:</p>
<blockquote>
<p>Attended #ffconf in 2016 thanks to @rem and @julieanne's scholarship. The inspirational speakers and welcoming community were a big part of giving me the confidence to keep coding, attend bootcamp and become a developer. Cheers guys, hope everyone has a great time @ffconf 😊</p>
</blockquote>
<p>…and:</p>
<blockquote>
<p>A massive thank you to everyone who helped organise #ffconf yesterday (and today). It was honestly one of the best conferences I have been to. Every speaker was incredible and engaging and the diversity both in the audience and on stage was wonderful!</p>
</blockquote>
<p>It is, and continues to be an honour to pay host to our ffconf scholarships 🙏</p>
<h2>10 years, more?</h2>
<p>In 2015 our event sold out in 6 minutes. Every ticket went, and even though Julie and I should have been pleased and happy, instead we felt guilt that so many more people were telling us the <em>really</em> wanted to attend but now couldn't.</p>
<p>So we doubled the event. Running it <a href="https://remysharp.com/2016/04/15/ffconf-2016-news#twice">twice</a>. A unique format to meet the demand that was out there.</p>
<p>We ran our double billed event for 3 great years. Over those years the conference scene has continued to change. When we ran ffconf in 2009, there was no UK JavaScript event (though I'd argue today that ffconf isn't <em>really</em> just JavaScript). When we ran our 10th event, I knew of 6 events - that's right <em>six events</em> - running on the <em>same day</em> in Europe addressing the same audience.</p>
<p>That's to say: conferences are meeting and indeed, have met demand.</p>
<p>We can also see it in the way the tickets sell throughout the lead up to our ffconf. We sold all our Friday tickets and had literally a handful left for Thursday. But that still meant that mine and Julie's time in the months before was spent on marketing, spreading the word, and trying to be sales people <em>instead</em> of doing what we do really well: just run the damn thing.</p>
<p>As such, we've decided that we <em>will</em> run ffconf 2019, and it will be a single day event. The web community wanted more events, and it now has more events.</p>
<p>Conor Haining, who came to ffconf the last two years on a student ticket, <a href="https://conorhaining.com/A-Trip-To-Brighton-FFConf/">wrote</a>:</p>
<blockquote>
<p>[Remy and Julie Sharp] create an fantastic atmosphere which is like they have invited a huge group of strangers into their front room to watch a bunch of really interesting stuff.</p>
</blockquote>
<p>Conor nails it. Bigger isn't better, in my books. Julie and I want to continue to offer that feeling year after year. This, from another attendee is what we strive for:</p>
<blockquote>
<p>The conference was fabulous: the talks were well curated; the crowd was friendly and I felt like I really belonged; the crowd felt like a giant family.</p>
</blockquote>
<p>Even as the head count of attendees will decrease, we will still promise to support student priced tickets, and we will continue to run a <strong>full</strong> scholarship programme that continues to cover travel, hotel and conference pass.</p>
<p>You can follow <a href="https://twitter.com/ffconf">@ffconf</a> or sign up to the <a href="htpps://ffconf.org/news">Insights Newsletter</a> for the latest announcements for 2019.</p>
<h2>We'll see you next year</h2>
<p>ffconf is a small intimate event that will leave you inspired and warm with the feeling that people are at the core of the web. We're going to keep doing that.</p>
<p>Thank you for reading ❤️</p>
<p><img src="https://remysharp.com/images/ffconf10/end.jpg" alt="ffconf 10 ends"></p>
<p><em>Originally published on <a href="https://remysharp.com/2018/11/26/ffconf-v10-updates-my-experience">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>Debugging vanishing text in shell scripts</title>
      <guid isPermaLink="false">shell-debugging-vanishing-text</guid>
      <link>https://remysharp.com/2018/10/29/shell-debugging-vanishing-text</link>
      <pubDate>Mon, 29 Oct 2018 08:23:25 +0000</pubDate>
      <description><![CDATA[Did you ever get a weird bash scripting issue where a variable would &quot;randomly&quot; eat characters of another command?
No…? Well, I have, quite a few times, so I figured it was time I wrote up my fix.
Tools used: curl, awk and od]]></description>
      <content:encoded><![CDATA[
<p>Did you ever get a weird bash scripting issue where a variable would &quot;randomly&quot; eat characters of another command?</p>
<p>No…? Well, I have, quite a few times, so I figured it was time I wrote up my fix.</p>
<p>Tools used: <code>curl</code>, <code>awk</code> and <code>od</code></p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>The issue</h2>
<p>I was writing a small shell function that used the output of a <code>curl</code> command to make a secondary request. Except my function would fail with no useful error.</p>
<p>My first <code>curl</code> was being piped through <code>awk</code> so I could capture the <code>Location</code> redirect URL, and use <em>that</em> URL as the source of the second request.</p>
<p>So, the first part looks like this (actual request shortened for the article):</p>
<pre><code class="language-bash"><span class="token function">curl</span> https://api.tinify.com/shrink -D /dev/stdout \
  <span class="token function">awk</span> <span class="token string">'/Location:/ { printf <span class="token variable">$2</span> }'</span>
https://api.tinify.com/output/kdn3bvw6wzb2tqj869n6c5yq0tc34gt9
</code></pre>
<p>Note that I'm using <code>printf</code> in <code>awk</code> so that a <code>\n</code> isn't added.</p>
<p>The second request would do this:</p>
<pre><code class="language-bash"><span class="token function">curl</span> <span class="token variable">$URL</span> -X POST -d <span class="token string">'{\"resize\":{\"method\":\"scale\",\"width\":1320}}'</span>
</code></pre>
<p>Except this didn't work. And when I put <code>echo</code> in front of the second curl (to validate the variables worked), it looked like this:</p>
<pre><code class="language-text"> -X POST -d '{\&quot;resize\&quot;:{\&quot;method\&quot;:\&quot;scale\&quot;,\&quot;width\&quot;:1320}}'
</code></pre>
<p>Everything before and including the <code>$URL</code> had be chomped.</p>
<h2>Debugging invisible characters</h2>
<p>I suspected some non-visible characters, but knowing what requires a tool that I occasionally turn to for looking at output in detail: <code>od</code> (<a href="https://tldr.ostera.io/od">tl;dr manual</a>)</p>
<p>If I pipe the output from my <code>awk</code> command through <code>od -c</code> (C-style escaped characters view), I get this:</p>
<pre><code class="language-text">0000000  h  t  t  p  s  :  /  /  a  p  i  .  t  i  n  i
0000020  f  y  .  c  o  m  /  o  u  t  p  u  t  /  k  d
0000040  n  3  b  v  w  6  w  z  b  2  t  q  j  8  6  9
0000060  n  6  c  5  y  q  0  t  c  3  4  g  t  9 \r
0000100
</code></pre>
<p>Specifically, notice the very last character: <code>\r</code>, carriage return. It's the carriage return that is specifically eating the text.</p>
<h2>Striping unwanted characters in ack</h2>
<p>During the <code>awk</code> script, I can remove all white-space on the fly with this change, and the offensive character (specifically the <code>\r</code> is striped):</p>
<pre><code class="language-bash">$ <span class="token function">curl</span> https://api.tinify.com/shrink -D /dev/stdout \
  <span class="token function">awk</span> <span class="token string">'/Location/ { gsub(/[[:space:]]+$/, ""); printf <span class="token variable">$2</span> }'</span> <span class="token operator">|</span> \
  od -c
```text
0000000  h  t  t  p  s  <span class="token keyword">:</span>  /  /  a  p  i  <span class="token keyword">.</span>  t  i  n  i
0000020  f  y  <span class="token keyword">.</span>  c  o  m  /  o  u  t  p  u  t  /  k  d
0000040  n  3  b  v  w  6  w  z  b  2  t  q  j  8  6  9
0000060  n  6  c  5  y  q  0  t  c  3  4  g  t  9
0000100
</code></pre>
<p>Gone!</p>
<p>Now when I use the result from the <code>curl</code> and it'll work.</p>
<p>The final result:</p>
<pre><code class="language-bash"><span class="token keyword">function</span> shrink<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment"># first upload and compress the filename argument</span>
  local URL<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> https://api.tinify.com/shrink \
    --user api:$TINIFY_KEY \
    --dump-header /dev/stdout \
    --data-binary @$1 <span class="token operator">|</span> \
    <span class="token function">awk</span> '/Location/ <span class="token punctuation">{</span> gsub<span class="token punctuation">(</span>/<span class="token punctuation">[</span><span class="token punctuation">[</span>:space:<span class="token punctuation">]</span><span class="token punctuation">]</span>+$/, <span class="token string">""</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token function">printf</span> <span class="token variable">$2</span> <span class="token punctuation">}</span><span class="token string">'
  )

  # then download and overwrite the file with the newly shrunk file
  curl -X POST <span class="token variable">$URL</span> --user api:<span class="token variable">$TINIFY_KEY</span> --dump-header /dev/stdout --output <span class="token variable">$1</span> -H '</span>content-type: application/json' -d<span class="token string">'{"resize":{"method":"scale","width":1320}}'</span>
<span class="token punctuation">}</span>
</code></pre>
<p><em>Originally published on <a href="https://remysharp.com/2018/10/29/shell-debugging-vanishing-text">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>Curation all the way</title>
      <guid isPermaLink="false">curation-all-the-way</guid>
      <link>https://remysharp.com/2018/10/05/curation-all-the-way</link>
      <pubDate>Fri, 05 Oct 2018 14:27:47 +0000</pubDate>
      <description><![CDATA[Curation is massively important to ffconf, and as of last week, ffconf now has a complete line up of speakers and sessions for ffconf v10 in early November.]]></description>
      <content:encoded><![CDATA[
<p>Curation is massively important to ffconf, and as of last week, ffconf now has a complete line up of speakers and sessions for ffconf v10 in early November.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><p>The talks are:</p>
<ol>
<li>The Future of JavaScript &amp; Machine Learning</li>
</ol>
<ul>
<li>Mentoring: Being the help you wish you'd had</li>
<li>Practical Web Animation</li>
<li>Is it possible to build a truly diverse community?</li>
<li>Back to the future of JS: the next features and amazing proposals</li>
<li>WebXR: A New Dimension For The Web</li>
<li>Dear Developer, the Web Isn't About You</li>
<li>Weird Web &amp; Curious Creation</li>
</ul>
<p>You can get your <s>Friday (sold out)</s> <strong><a href="https://ffconf.org/tickets">Thursday ticket today</a></strong>.</p>
<p><em>Remember: it's the same line up, the same content, the same amazing day.</em></p>
<h2>How and why</h2>
<p>Unlike a lot of other events, ffconf is carefully curated by me. Call For Papers (CFP) has typically only accounted for just one of the eight talks in previous years. As soon as the previous ffconf event is over, I start thinking about the <em>types of talks</em> I want to hear right away 🧠⚡️</p>
<p>The process (since 2011) has been to list the topics I want to host at ffconf, then match that content up to a potential speaker.</p>
<p>My invitations to speakers are always asking if they would speak to a particular topic or specific question.</p>
<p>As a conference speaker myself, I find it a little frustrating to receive an invitation that simply says &quot;can you speak at our event&quot;. Sure, I'd be happy to speak, but <em>why</em> are you inviting me?</p>
<p>Again, as a speaker myself, I felt like a significant number of events would use the same speaker year after year. With that in mind, I made one of ffconf's golden rules: no speaker speaks again.</p>
<p>It's a blessing and a curse for curation! It's made curation harder and harder as the years have piled on! The huge positive upshot is that ffconf has hosted 78 unique individuals since 2009 🎉</p>
<p><a href="https://ffconf.org"><img src="https://remysharp.com/images/ffconf-curation.png" alt="Our attendees love the curation"></a></p>
<p>Why don't we reveal speakers? Initially this was an accident back in 2014 they were going to be revealed - but I just forgot!</p>
<p>The following year, I realised that hiding (or blurring) the speakers only reinforced the idea that ffconf is content first. We do start to slowly reveal the speakers much closer to the time.</p>
<p>Painstakingly careful curation is absolutely one of the keys to the success of our event. If you're thinking of running an event yourself, I'd highly recommend it. And if you want to see how it works out, <strong><a href="https://ffconf.org/tickets">see it first hand at ffconf in November</a></strong>.</p>
<p>If you want to find out more about the behind the scenes of ffconf, you can also <a href="https://ffconf.org/news">subscribe to our newsletter</a></p>
<p><em>Originally published on <a href="https://remysharp.com/2018/10/05/curation-all-the-way">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>Peer Deps</title>
      <guid isPermaLink="false">peer-deps</guid>
      <link>https://remysharp.com/2018/09/27/peer-deps</link>
      <pubDate>Thu, 27 Sep 2018 20:44:53 +0000</pubDate>
      <description><![CDATA[Just using my blog to share a little tip for future me that current me keeps forgetting. Over the years when working with clients I've created reusable React components, and it's pretty important to me to ensure that dependencies like React aren't dependencies of my own work - specifically to prevent React (for instance) being included multiple times in my projects.
So…]]></description>
      <content:encoded><![CDATA[
<p>Just using my blog to share a little tip for future me that current me keeps forgetting. Over the years when <a href="https://remysharp.com/work">working with clients</a> I've created reusable React components, and it's pretty important to me to ensure that dependencies like React aren't dependencies of my own work - specifically to prevent React (for instance) being included multiple times in my projects.</p>
<p>So…</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><p>The first part of this (reasonably) simple solution is to move the dependency from my <em>regular</em> dependency to a <code>peerDependencies</code> (and as far as I know, I can't install and save directly to peer deps).</p>
<p>Now when my package is installed npm will warn on the console that React (or some other package) is a peer dependency and needs to be installed.</p>
<p><em>However</em> (of course), as soon as I <code>npm install …</code> another package, npm will (un)helpfully remove the peer dependency because npm notices that it's missing from the <em>direct</em> dependencies.</p>
<p>The solution seems more like a workaround, but it's to duplicate the peer dependency in <em>both</em> the <code>peerDependencies</code> and the <code>devDependencies</code>. That way further <code>npm install</code>s won't remove the required (development) dependency but when the project is published, the published package won't include the peer dependency.</p>
<p>As I said, one for future me 👍</p>
<p><em>Originally published on <a href="https://remysharp.com/2018/09/27/peer-deps">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>Midlife</title>
      <guid isPermaLink="false">midlife</guid>
      <link>https://remysharp.com/2018/09/13/midlife</link>
      <pubDate>Thu, 13 Sep 2018 00:34:00 +0000</pubDate>
      <description><![CDATA[40. The big one. Though, I think television and movies have a lot to answer for that one. I wrote about turning 30 (content warning: decade old writing!), and I wanted to mark this one too, somehow.]]></description>
      <content:encoded><![CDATA[
<p>40. The <em>big one</em>. Though, I think television and movies have a lot to answer for that one. I wrote about <a href="https://remysharp.com/2008/09/13/big-three-oh-happy-birthday-to-me">turning 30</a> (content warning: decade old writing!), and I wanted to mark this one too, somehow.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><div style="border: 0; display: block; padding: 10px; padding-bottom: 5px; background: #000; color: #fff; font-size: 12px; text-decoration: none"><img src="https://remysharp.com/images/gingin.jpg" alt="Photo of Remy Sharp as a young boy with his guinea pig" style="border: 0; width: 100%; max-width: 100%"><br>&nbsp;A picture of me from earlier, with Gin-Gin, my guinea pig (_little did I know of the importance of gin…gin_)</div>
<p>The above picture from a simpler time. Some months later, lightning would strike the hutch that Gin-Gin (the guinea pig) and Gibbles (our rabbit) lived in, and they both escaped to the wider world, happy somewhere in a field nibbling on hay and bits of grass. A decade later I'd realise it was a fox that helped them escape. A decade after that I'd realise there was probably no grand escape, only a grand meal, for the fox.</p>
<hr>
<p>I remember regarding being 13 as an important age to me. Nothing about being old, but entirely about the symmetry of being born on the 13th and being 13. In fact, I turned 13 on Friday 13th - I was oddly incredibly proud of this. My best man at my wedding remarked during his speech, quite accurately, that I had always liked to be different: to move against the current, to run against the grain. Being 13 on such an unlucky day fit right in with me.</p>
<p>I remember losing time starring at the night sky and wondering about stars and distant universes, and promising myself that I'd leave this awful planet and live somewhere else. I remember thinking that I'd live up until I was 23.</p>
<p>I remember turning 23 and running into some extremely complex and conflicted feelings.</p>
<p>I remember turning 30 and finally feeling like I was able to shed my teens and 20s. A wave of relief. I struggled a lot with myself during my 20s. I definitely didn't know how to drink alcohol and my friends can attest to the utter arsehole I was when I was drunk. I wasn't a bad person, or violent to other people, but goodness I was a pain.</p>
<p>Turning 30 somehow set me free of trying to be me, and let me settle in my skin for the first time. No longer trying to be the right person. That unsure version of me still exists inside of me, and comes back when I'm around those people I only knew during my 20s. I heard somewhere that it's not uncommon to revert to &quot;old self&quot; when you're around those people from your past.</p>
<hr>
<p>Today I begin my 40s. I promised myself somewhere around 38 that I'd earn myself a six-pack by the time I was 40.</p>
<p>I've just checked the mirror: that's a negatory on the six-pack.</p>
<p>In defence of myself, first of all, at 38 had I been paying attention, I would have noticed that I <em>did</em> have that six-pack (under the right lighting conditions…!). Moreover, in the last 6 months a few more important things happened: mostly breaking down in new and interesting ways.</p>
<p>In the lead up to my 40s, I managed to have tonsillitis for about 6 weeks running (even <a href="https://remysharp.com/2018/07/31/my-nhs-story">visited hospital</a> for a jolly old throat-lancing), I've had a front tooth removed (and it's still bloody well missing, occasionally I forget where I put it), I duffed my back up <em>again</em>, and for my latest trick: there's something wrong with me that I'm having full blood work tests run on me next week - yay (it's either a blood cell thing, or nervous system, though I'm hoping it's &quot;just&quot; a B12 deficiency that can be resolved with being stabbed repeatidy with vitamin B12).</p>
<p>With that lot being added to my personal baggage, I'm actually not so surprised, or in fact, not even disappointed that I failed my six-pack mission. So in a way, it's a win for me. Sort of. I think.</p>
<hr>
<p>Now as I trundle into my 40s, I'd like to promise myself a few things: I'll get some help, with my noggin. It's again time to revisit counselling. Honestly, I believe we <em>all</em> need some help with our mental baggage at some points during our lives.</p>
<p>And also that I'll try to drink more gin (more variations rather than just drinking the stuff by the gallon).</p>
<p>And I'll keep reading (important because it took me nearly 30 years to get any good at it).</p>
<p>And I promise myself I'll try to stop, and notice the moments of happiness and love that continue to happen all around me. That's to say: I love my family dearly and I want to keep reminding myself of that fact as my days come to pass.</p>
<p><em>Originally published on <a href="https://remysharp.com/2018/09/13/midlife">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>8 years on</title>
      <guid isPermaLink="false">8-years-on</guid>
      <link>https://remysharp.com/2018/08/30/8-years-on</link>
      <pubDate>Thu, 30 Aug 2018 10:19:37 +0000</pubDate>
      <description><![CDATA[This is a stream of thought that I need to get out of me, and on to my personal blog. I apologise if it rambles, and I apologise if it's a bit too raw. I don't know who this is for other than me. But I wanted to put these thoughts here, today.
I turned 32 fourteen days after Tia came into our lives. For those new to my blog, Tia, our first born, died during labour on 31-Aug 2010. She was full term, Julie (my partner) was in labour, and somewhere between labour and getting to the hospital, Tia slipped away.
It's coming up to 8 years on. She would have turned 8 this month. Our first born, our little girl. The big sister to Ellis and Seren. But she didn't. She doesn't.]]></description>
      <content:encoded><![CDATA[
<p><em>This is a stream of thought that I need to get out of me, and on to my personal blog. I apologise if it rambles, and I apologise if it's a bit too raw. I don't know who this is for other than me. But I wanted to put these thoughts here, today.</em></p>
<p>I turned 32 fourteen days after Tia came into our lives. For those new to my blog, Tia, our first born, died during labour on 31-Aug 2010. She was full term, Julie (my partner) was in labour, and somewhere between labour and getting to the hospital, Tia slipped away.</p>
<p>It's coming up to 8 years on. She would have turned 8 this month. Our first born, our little girl. The big sister to Ellis and Seren. But she didn't. She doesn't.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><p>8 years on and it all feels so recent. Especially in August. I remember a lot of the details from that day. Only because I had written it down in a private journal, so that I wouldn't lose my precious pain to grief's ability to wipe memories.</p>
<p>8 years ago I remember coming home to our empty house. A very different arrival than the one we had dreamt of. Julie and I wedged ourselves into the corners of the rooms, trying to escape the vacuum around us that wasn't filled with new life.</p>
<p>8 years ago, we crawled into bed for the first time since our life was completely derailed. I had a photo of Tia on my phone, and I propped it up against my bed so that I could burn her image into my memory. I didn't want to close my eyes or look away in fear that I'd somehow let go of the reality that Tia was once with us. As much as I wanted it to all be a terrible dream, I could and wouldn't deny Tia's pain in our lives.</p>
<p>I cried, painful and heavy tears as I tried to keep my eyes open, burning the photo into my memory. Julie and I squeezed together under the blankets in the hope that we'll have something to hang onto as the bleak darkness of grief pressed down on us.</p>
<p>When I awoke, my eyes were sore from crying in my sleep. My mind was muddled with morning grogginess and the feeling of some terrible truth was deep down inside of me, before the realising horror of what had happened flooded back. Julie and I called that day, &quot;Day One&quot;.</p>
<p>Those 8 years ago, for many more mornings, days and nights, I howled with grief. A deep cry, painful and physically heavy on my chest and heart. Long and hard. &quot;Day Two&quot;, &quot;Day Three&quot; and so on.</p>
<p>It was crushing. But that crushing pain was the only thing I had that was really real. I feared the day that it wouldn't hurt, the day that I would somehow smile again, or laugh again. If I could smile, then what did that mean? Had I betrayed Tia's memory? How could I possibly smile alongside such all encompassing grief?</p>
<p>I don't know when we forgot to name the days, but it happened eventually. One day it wasn't &quot;Day X&quot;. Our grief was still there, but it was changing shape.</p>
<p>8 years on, I still don't know how I can exist without Tia and smile or laugh. These feelings have no real way of existing together inside my mind.</p>
<hr>
<p>I don't know that I survived that time insomuch that I learnt to just live with Tia's absence in our lives. There's definitely something missing inside of me. A hole that leaves me incomplete. I've had to build my life up <em>around</em> that hole, embrace her absence, accept that she's part of who I am, even though she's never been here. Counselling helped. Always talking to Julie, always.</p>
<p>Sometimes it, <em>&quot;it&quot;</em> — Tia dying, her stillbirth, our 3 children that are 2; <em>it</em> still surprises me that I'm living that life. It catches me out at times, during some idle moment, it sneaks up on me. This kind of thing should never have happened.</p>
<p>Sometimes it feels like some story I heard, some terrible tale, and then I remember that tale belongs to me, and for a moment I'm confused: how? How could this be <em>my</em> story?</p>
<p>But then, life, my life, trundles on. My kids, the ones full of life, move me forward. They know Tia. They know she <em>would have been</em> 8. I kiss her photo goodnight each and every evening. I fantasise about the day we can turn back time and change things. I've fantasised about having all three kids running riot around me and Julie.</p>
<p>But it's just time that moves me forward. I'm not healed, I just carry on carrying my pain, loss and sadness.</p>
<p>And I carry on treasuring the little girl that I can't hold and can't tell happy birthday to, and can't tell that I love her.</p>
<p><em>Originally published on <a href="https://remysharp.com/2018/08/30/8-years-on">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>CLI: improved</title>
      <guid isPermaLink="false">cli-improved</guid>
      <link>https://remysharp.com/2018/08/23/cli-improved</link>
      <pubDate>Thu, 23 Aug 2018 18:11:05 +0000</pubDate>
      <description><![CDATA[I'm not sure many web developers can get away without visiting the command line. As for me, I've been using the command line since 1997, first at university when I felt both super cool l33t-hacker and simultaneously utterly out of my depth.
Over the years my command line habits have improved and I often search for smarter tools for the jobs I commonly do. With that said, here's my current list of improved CLI tools.]]></description>
      <content:encoded><![CDATA[
<p>I'm not sure many web developers can get away without visiting the command line. As for me, I've been using the command line since 1997, first at university when I felt both super cool l33t-hacker and simultaneously utterly out of my depth.</p>
<p>Over the years my command line habits have improved and I often search for smarter tools for the jobs I commonly do. With that said, here's my current list of improved CLI tools.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>Ignoring my improvements</h2>
<p>In a number of cases I've aliased the new and improved command line tool over the original (as with <code>cat</code> and <code>ping</code>).</p>
<p>If I want to run the original command, which is sometimes I do need to do, then there's two ways I can do this (I'm on a Mac so your mileage may vary):</p>
<pre><code class="language-bash">$ \cat <span class="token comment"># ignore aliases named "cat" - explanation: https://stackoverflow.com/a/16506263/22617</span>
$ <span class="token function">command</span> <span class="token function">cat</span> <span class="token comment"># ignore functions and aliases</span>
</code></pre>
<h2>bat &gt; cat</h2>
<p><code>cat</code> is used to print the contents of a file, but given more time spent in the command line, features like syntax highlighting come in very handy. I found <a href="https://github.com/jingweno/ccat">ccat</a> which offers highlighting then I found <a href="https://github.com/sharkdp/bat">bat</a> which has highlighting, paging, line numbers and git integration.</p>
<p>The <code>bat</code> command also allows me to search during output (only if the output is longer than the screen height) using the <code>/</code> key binding (similarly to <code>less</code> searching).</p>
<p><img src="https://remysharp.com/images/cli-improved/bat.gif" alt="Simple bat output" title="Sample bat output"></p>
<p>I've also aliased <code>bat</code> to the <code>cat</code> command:</p>
<pre><code class="language-bash"><span class="token function">alias</span> cat<span class="token operator">=</span><span class="token string">'bat'</span>
</code></pre>
<p>💾 <a href="https://github.com/sharkdp/bat">Installation directions</a></p>
<h2>prettyping &gt; ping</h2>
<p><code>ping</code> is incredibly useful, and probably my goto tool for the &quot;oh crap is X down/does my internet work!!!&quot;. But <code>prettyping</code> (&quot;pretty ping&quot; not &quot;pre typing&quot;!) gives ping a really nice output and just makes me feel like the command line is a bit more welcoming.</p>
<p><img src="https://remysharp.com/images/cli-improved/ping.gif" alt="/images/cli-improved/ping.gif" title="Sample ping output"></p>
<p>I've also aliased <code>ping</code> to the <code>prettyping</code> command:</p>
<pre><code class="language-bash"><span class="token function">alias</span> ping<span class="token operator">=</span><span class="token string">'prettyping --nolegend'</span>
</code></pre>
<p>💾 <a href="http://denilson.sa.nom.br/prettyping/">Installation directions</a></p>
<h2>fzf &gt; ctrl+r</h2>
<p>In the terminal, using <code>ctrl+r</code> will allow you to <a href="https://lifehacker.com/278888/ctrl%252Br-to-search-and-other-terminal-history-tricks">search backwards</a> through your history. It's a nice trick, albeit a bit fiddly.</p>
<p>The <code>fzf</code> tool is a <strong>huge</strong> enhancement on <code>ctrl+r</code>. It's a fuzzy search against the terminal history, with a fully interactive preview of the possible matches.</p>
<iframe class="rounded" src="https://player.vimeo.com/video/217497007?title=0&byline=0&portrait=0" width="640" height="400" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
<p>In addition to searching through the history, <code>fzf</code> can also preview and open files, which is what I've done in the video below:</p>
<iframe src="https://player.vimeo.com/video/286345188?title=0&byline=0&portrait=0" width="640" height="400" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
<p>For this preview effect, I created an alias called <code>preview</code> which combines <code>fzf</code> with <code>bat</code> for the preview and a custom key binding to open VS Code:</p>
<pre><code class="language-bash"><span class="token function">alias</span> preview<span class="token operator">=</span><span class="token string">"fzf --preview 'bat --color \"always\" {}'"</span>
<span class="token comment"># add support for ctrl+o to open selected file in VS Code</span>
<span class="token function">export</span> FZF_DEFAULT_OPTS<span class="token operator">=</span><span class="token string">"--bind='ctrl-o:execute(code {})+abort'"</span>
</code></pre>
<p>💾 <a href="https://github.com/junegunn/fzf">Installation directions</a></p>
<h2>htop &gt; top</h2>
<p><code>top</code> is my goto tool for quickly diagnosing why the CPU on the machine is running hard or my fan is whirring. I also use these tools in production. Annoyingly (to me!) <code>top</code> on the Mac is vastly different (and inferior IMHO) to <code>top</code> on linux.</p>
<p>However, <code>htop</code> is an improvement on both regular <code>top</code> and crappy-mac <code>top</code>. Lots of colour coding, keyboard bindings and different views which have helped me in the past to understand which processes belong to which.</p>
<p>Handy key bindings include:</p>
<ul>
<li><kbd>P</kbd> - sort by CPU</li>
<li><kbd>M</kbd> - sort by memory usage</li>
<li><kbd>F4</kbd> - filter processes by string (to narrow to just &quot;node&quot; for instance)</li>
<li><kbd>space</kbd> - mark a single process so I can watch if the process is spiking</li>
</ul>
<p><img src="https://remysharp.com/images/cli-improved/htop.jpg" alt="htop output" title="Sample htop output"></p>
<p>There is a weird bug in Mac Sierra that can be overcome by running <code>htop</code> as root (I can't remember exactly what the bug is, but this alias fixes it - though annoying that I have to enter my password every now and again):</p>
<pre><code class="language-bash"><span class="token function">alias</span> top<span class="token operator">=</span><span class="token string">"sudo htop"</span> <span class="token comment"># alias top and fix high sierra bug</span>
</code></pre>
<p>💾 <a href="http://hisham.hm/htop/">Installation directions</a></p>
<h2>diff-so-fancy &gt; diff</h2>
<p>I'm pretty sure I picked this one up from Paul Irish some years ago. Although I rarely fire up <code>diff</code> manually, my git commands use diff all the time. <code>diff-so-fancy</code> gives me both colour coding but also character highlight of changes.</p>
<p><img src="https://remysharp.com/images/cli-improved/diff-so-fancy.jpg" alt="diff so fancy" title="Sample diff output"></p>
<p>Then in my <code>~/.gitconfig</code> I have included the following entry to enable <code>diff-so-fancy</code> on <code>git diff</code> and <code>git show</code>:</p>
<pre><code class="language-text">[pager]
       diff = diff-so-fancy | less --tabs=1,5 -RFX
       show = diff-so-fancy | less --tabs=1,5 -RFX
</code></pre>
<p>💾 <a href="https://github.com/so-fancy/diff-so-fancy">Installation directions</a></p>
<h2>fd &gt; find</h2>
<p>Although I use a Mac, I've never been a fan of Spotlight (I found it sluggish, hard to remember the keywords, the database update would hammer my CPU and generally useless!). I use <a href="https://www.alfredapp.com/">Alfred</a> a lot, but even the finder feature doesn't serve me well.</p>
<p>I tend to turn the command line to find files, but <code>find</code> is always a bit of a pain to remember the right expression to find what I want (and indeed the Mac flavour is slightly different non-mac find which adds to frustration).</p>
<p><code>fd</code> is a great replacement (by the same individual who wrote <code>bat</code>). It is very fast and the common use cases I need to search with are simple to remember.</p>
<p>A few handy commands:</p>
<pre><code class="language-bash">$ fd cli <span class="token comment"># all filenames containing "cli"</span>
$ fd -e md <span class="token comment"># all with .md extension</span>
$ fd cli -x <span class="token function">wc</span> -w <span class="token comment"># find "cli" and run `wc -w` on each file</span>
</code></pre>
<p><img src="https://remysharp.com/images/cli-improved/fd.png" alt="fd output" title="Sample fd output"></p>
<p>💾 <a href="https://github.com/sharkdp/fd/">Installation directions</a></p>
<h2>ncdu &gt; du</h2>
<p>Knowing where disk space is being taking up is a fairly important task for me. I've used the Mac app <a href="https://daisydiskapp.com/">Disk Daisy</a> but I find that it can be a little slow to actually yield results.</p>
<p>The <code>du -sh</code> command is what I'll use in the terminal (<code>-sh</code> means summary and human readable), but often I'll want to dig into the directories taking up the space.</p>
<p><code>ncdu</code> is a nice alternative. It offers an interactive interface and allows for quickly scanning which folders or files are responsible for taking up space and it's very quick to navigate. (Though any time I want to scan my entire home directory, it's going to take a long time, regardless of the tool - my directory is about 550gb).</p>
<p>Once I've found a directory I want to manage (to delete, move or compress files), I'll use the <kbd>cmd</kbd> + click the pathname at the top of the screen in <a href="https://www.iterm2.com/">iTerm2</a> to launch finder to that directory.</p>
<p><img src="https://remysharp.com/images/cli-improved/ncdu.png" alt="ncdu output" title="Sample ncdu output"></p>
<p>There's another <a href="https://github.com/jarun/nnn">alternative called nnn</a> which offers a slightly nicer interface and although it does file sizes and usage by default, it's actually a fully fledged file manager.</p>
<p>My <code>ncdu</code> is aliased to the following:</p>
<pre><code class="language-bash"><span class="token function">alias</span> du<span class="token operator">=</span><span class="token string">"ncdu --color dark -rr -x --exclude .git --exclude node_modules"</span>
</code></pre>
<p>The options are:</p>
<ul>
<li><code>--color dark</code> - use a colour scheme</li>
<li><code>-rr</code> - read-only mode (prevents delete and spawn shell)</li>
<li><code>--exclude</code> ignore directories I won't do anything about</li>
</ul>
<p>💾 <a href="https://dev.yorhel.nl/ncdu">Installation directions</a></p>
<h2>tldr &gt; man</h2>
<p>It's amazing that nearly every single command line tool comes with a manual via <code>man &lt;command&gt;</code>, but navigating the <code>man</code> output can be sometimes a little confusing, plus it can be daunting given all the technical information that's included in the manual output.</p>
<p>This is where the TL;DR project comes in. It's a community driven documentation system that's available from the command line. So far in my own usage, I've not come across a command that's not been documented, but you can <a href="https://github.com/tldr-pages/tldr#contributing">also contribute too</a>.</p>
<p><img src="https://remysharp.com/images/cli-improved/tldr.png" alt="TLDR output for 'fd'" title="Sample tldr output for 'fd'"></p>
<p>As a nicety, I've also aliased <code>tldr</code> to <code>help</code> (since it's quicker to type!):</p>
<pre><code class="language-bash"><span class="token function">alias</span> help<span class="token operator">=</span><span class="token string">'tldr'</span>
</code></pre>
<p>💾 <a href="http://tldr-pages.github.io/">Installation directions</a></p>
<h2>ack || ag &gt; grep</h2>
<p><code>grep</code> is no doubt a powerful tool on the command line, but over the years it's been superseded by a number of tools. Two of which are <code>ack</code> and <code>ag</code>.</p>
<p>I personally flitter between <code>ack</code> and <code>ag</code> without really remembering which I prefer (that's to say they're both very good and very similar!). I tend to default to <code>ack</code> only because it rolls of my fingers a little easier. Plus, <code>ack</code> comes with the mega <code>ack --bar</code> argument (I'll let you experiment)!</p>
<p>Both <code>ack</code> and <code>ag</code> will (by default) use a regular expression to search, and extremely pertinent to my work, I can specify the file types to search within using flags like <code>--js</code> or <code>--html</code> (though here <code>ag</code> includes more files in the js filter than <code>ack</code>).</p>
<p>Both tools also support the usual <code>grep</code> options, like <code>-B</code> and <code>-A</code> for before and after context in the grep.</p>
<p><img src="https://remysharp.com/images/cli-improved/ack.png" alt="ack in action" title="Sample ack output with grep args"></p>
<p>Since <code>ack</code> doesn't come with markdown support (and I write a lot in markdown), I've got this customisation in my <code>~/.ackrc</code> file:</p>
<pre><code class="language-text">--type-set=md=.md,.mkd,.markdown
--pager=less -FRX
</code></pre>
<p>💾 Installation directions: <a href="https://beyondgrep.com">ack</a>, <a href="https://github.com/ggreer/the_silver_searcher">ag</a></p>
<p><a href="http://conqueringthecommandline.com/book/ack_ag">Futher reading on ack &amp; ag</a></p>
<h2>jq &gt; grep et al</h2>
<p>I'm a massive fanboy of <a href="https://stedolan.github.io/jq">jq</a>. At first I struggled with the syntax, but I've since come around to the query language and use <code>jq</code> on a near daily basis (whereas before I'd either drop into node, use grep or use a tool called <a href="http://trentm.com/json/">json</a> which is very basic in comparison).</p>
<p>I've even started the process of writing a jq tutorial series (2,500 words and counting) and have published a <a href="https://jqterm.com">web tool</a> and a native mac app (yet to be released).</p>
<p><code>jq</code> allows me to pass in JSON and transform the source very easily so that the JSON result fits my requirements. One such example allows me to update all my node dependencies in one command (broken into multiple lines for readability):</p>
<pre><code class="language-bash">$ <span class="token function">npm</span> i <span class="token variable"><span class="token variable">$(</span><span class="token keyword">echo</span> <span class="token punctuation">$(</span>\
  <span class="token function">npm</span> outdated --json <span class="token operator">|</span> \
  jq -r 'to_entries <span class="token operator">|</span> .<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> "\<span class="token punctuation">(</span>.key<span class="token variable">)</span></span>@\<span class="token punctuation">(</span>.value.latest<span class="token punctuation">)</span>"' \
<span class="token punctuation">))</span>
</code></pre>
<p>The above command will list all the node dependencies that are out of date, and use npm's JSON output format, then transform the source JSON from this:</p>
<pre><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"node-jq"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"current"</span><span class="token operator">:</span> <span class="token string">"0.7.0"</span><span class="token punctuation">,</span>
    <span class="token property">"wanted"</span><span class="token operator">:</span> <span class="token string">"0.7.0"</span><span class="token punctuation">,</span>
    <span class="token property">"latest"</span><span class="token operator">:</span> <span class="token string">"1.2.0"</span><span class="token punctuation">,</span>
    <span class="token property">"location"</span><span class="token operator">:</span> <span class="token string">"node_modules/node-jq"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"uuid"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"current"</span><span class="token operator">:</span> <span class="token string">"3.1.0"</span><span class="token punctuation">,</span>
    <span class="token property">"wanted"</span><span class="token operator">:</span> <span class="token string">"3.2.1"</span><span class="token punctuation">,</span>
    <span class="token property">"latest"</span><span class="token operator">:</span> <span class="token string">"3.2.1"</span><span class="token punctuation">,</span>
    <span class="token property">"location"</span><span class="token operator">:</span> <span class="token string">"node_modules/uuid"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>…to this:</p>
<pre><code class="language-text">node-jq@1.2.0
uuid@3.2.1
</code></pre>
<p>That result is then fed into the <code>npm install</code> command and voilà, I'm all upgraded (using the sledgehammer approach).</p>
<h2>Honourable mentions</h2>
<p>Some of the other tools that I've started poking around with, but haven't used too often (with the exception of ponysay, which appears when I start a new terminal session!):</p>
<ul>
<li><a href="https://github.com/erkin/ponysay">ponysay</a> &gt; cowsay</li>
<li><a href="https://csvkit.readthedocs.io/en/1.0.3/">csvkit</a> &gt; awk et al</li>
<li><a href="https://github.com/variadico/noti">noti</a> &gt; <code>display notification</code></li>
<li><a href="http://www.entrproject.org/">entr</a> &gt; watch</li>
</ul>
<h2>What about you?</h2>
<p>So that's my list. How about you? What daily command line tools have you improved? I'd love to know.</p>
<p><em>Originally published on <a href="https://remysharp.com/2018/08/23/cli-improved">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>My NHS Story</title>
      <guid isPermaLink="false">my-nhs-story</guid>
      <link>https://remysharp.com/2018/07/31/my-nhs-story</link>
      <pubDate>Tue, 31 Jul 2018 16:00:00 +0000</pubDate>
      <description><![CDATA[Today I realised that it was the end of the month and my two blog post a month, self imposed quota was going to fail.
I had a few posts planned, but I'd found myself in hospital, and I realised it was a good opportunity to a) kill some time, b) write about how amazing I think the National Health Service is.]]></description>
      <content:encoded><![CDATA[
<p>Today I realised that it was the end of the month and my two blog post a month, self imposed quota was going to fail.</p>
<p>I had a few posts planned, but I'd found myself in hospital, and I realised it was a good opportunity to a) kill some time, b) write about how amazing I think the National Health Service is.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><p>I write to you today from level 4 of The Royal Sussex Hospital, with an Intravenous (IV) drip in my arm and the knowledge that I'm being cared for.</p>
<p>Yesterday morning at 8:45am, Julie, my partner, called the General Practitioner for me to book an appointment and I was seen at 3:50pm and fully admitted to hospital at around 10am the next morning.</p>
<p>My condition, I wouldn't have called critical, but the GP deemed it sensible that I see a specialist at the hospital, whom then admitted me for full treatment.</p>
<hr>
<p>About a month ago, I had my first bout of tonsillitis. The NHS website was easy to use, easy to read and comprehensively described the symptoms, and if it was virus-based, the tonsillitis would clear itself up in around 3-4 days.</p>
<p>The website recommend sleep and fluids. And that's what I did. Eventually I got better (though the fever it came with was no fun).</p>
<p>Luckily I was better for our family holiday (which was lovely!), but upon returning home, my second wave of tonsillitis took hold.</p>
<p>I visited the GP, and they prescribed me a 10 day course of antibiotics. 80 pills in total.</p>
<p>As someone in employment (I run my own business) I pay for my prescriptions. A single flat fee of £8.80.</p>
<p>I followed the treatment, but frustratingly, 48 hours after ending, my tonsillitis came back angry as hell! Inside of a day, I went from a sore throat to fully swollen left tonsil that made it sore to swallow, unable to eat and I had difficulty drinking fluids.</p>
<p>My return to the GP referred me to the Ear Nose &amp; Throat specialist here at the hospital.</p>
<hr>
<p>Of all the people I've seen, they've all been kind, patient and helpful.</p>
<p>I had blood taken, to which I have a tendency to faint or get extremely light-headed. The nurse didn't rush me along, and waited carefully with me until my blood pressure was normal and I was able to walk myself back to my seat.</p>
<p>Since being here, I've had steroids (to help reduce the swelling), antibiotics, adrenaline, anesthetics, fluids and more. The doctor has punctured the tonsil causing me grief (6 times - it hurt even with the anesthetic!) and I've had a ECG (the steroids did something weird to me that they wanted to check out).</p>
<p>I'm now due to stay in overnight. I've been offered morphine to help me sleep, and food and drink has been offered.</p>
<p>I've paid, and all I'll have paid, for this series of treatment, is £8.80.</p>
<hr>
<p>Long before this, in 2010, Julie and I lost Tia at birth, and the staff were incredible with us during this extremely bleak and dark period of grief.</p>
<p>The midwives looked after us, gave us all the time we need, and helped us navigate through the worst day of our lives.</p>
<p>Again, the NHS, no money paid, and utmost professionalism.</p>
<hr>
<p>This service is available to all, regardless of age, gender, race or religion. This is a free service for <em>everyone</em>.</p>
<p>When the NHS was founded, three core principles were at its heart:</p>
<ul>
<li>that it meet the needs of everyone</li>
<li>that it be free at the point of delivery</li>
<li>that it be based on clinical need, not ability to pay</li>
</ul>
<p>I think the NHS is an inspiring organisation, from what I understand, is the largest employer in the UK. The people that I've met today, on the ground so to speak, have been nothing but kind, patient, attentive and professional.</p>
<p>I know no organisation is perfect, but I pray that this service survives to serve my children and their children.</p>
<p>Thank you NHS. Thank you to the nurses, the support staff and the doctors that have seen me.</p>
<p>A service for everyone is a service worth thanking, and fighting for.</p>
<p><em>Originally published on <a href="https://remysharp.com/2018/07/31/my-nhs-story">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>When helpful turns into super bad security!</title>
      <guid isPermaLink="false">when-helpful-turns-into-super-bad-security</guid>
      <link>https://remysharp.com/2018/07/25/when-helpful-turns-into-super-bad-security</link>
      <pubDate>Wed, 25 Jul 2018 19:36:31 +0000</pubDate>
      <description><![CDATA[A shortish post partly to point out a bad…no, terrible practise, and in part to remind myself to never do this again!
The short version: I wrote code that allows anyone to expose secrets (i.e. environment values) in my application.]]></description>
      <content:encoded><![CDATA[
<p>A shortish post partly to point out a bad…no, <em>terrible</em> practise, and in part to remind myself to never do this again!</p>
<p>The short version: I wrote code that allows anyone to expose secrets (i.e. environment values) in my application.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>Trying to help</h2>
<p>In writing <a href="https://jsonbin.org">jsonbin</a> I found that it was pretty common for tiny slips in JSON to be included, and to be <em>helpful</em>, I decided I would try to help the user along and encode the JSON to an object as if it were <em>like</em> JavaScript (this allows for things like unquoted keys, trailing commas and the like).</p>
<p>For example, this request would work:</p>
<pre><code class="language-bash">$ <span class="token function">curl</span> https://jsonbin.org/me/data-points \
     -H <span class="token string">"authorization: token <span class="token variable">$JSONBIN_TOKEN</span>"</span> \
     -H <span class="token string">"Content-Type: application/json"</span> \
     -d <span class="token string">"[{ score: 12 }, { score: 20 },]"</span>
</code></pre>
<p>I allowed these types of requests because I believe that my code should be error friendly, and if it's obvious what you were intending to do, then my code would help the request along its way.</p>
<p>Except…there's a super massive security hole (that I <em>just</em> patched).</p>
<h2>My hidden bad code</h2>
<p>This was the original code:</p>
<pre><code class="language-js"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
req<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token parameter">chunk</span> <span class="token operator">=></span> data <span class="token operator">+=</span> chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    req<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mime <span class="token operator">===</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// try again otherwise throw error</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        req<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'return '</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span> code<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'Invalid JSON structure'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      req<span class="token punctuation">.</span>body <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>The &quot;magic&quot; line was this:</p>
<pre><code class="language-js">req<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'return '</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Zoomed in, the problem becomes glaringly obvious to me, but tucked away in all that code, I didn't spot it right away. This single line of code is a front door to all the private state of my code <em>and</em> the chance to modify object prototypes with some nasty code. This single line is the same as an <code>eval</code>. It's bad.</p>
<p>To exploit this, a single curl command can expose hidden secrets on the server:</p>
<pre><code class="language-bash">$ <span class="token function">curl</span> https://jsonbin.org/me/secret \
     -H <span class="token string">"authorization: token <span class="token variable">$JSONBIN_TOKEN</span>"</span> \
     -H <span class="token string">"Content-Type: application/json"</span> \
     -d <span class="token string">"{ id: <span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>process.env.MONGO_URL<span class="token punctuation">}</span><span class="token variable">`</span></span> }"</span>
</code></pre>
<p>Now in my own account, under the property of <code>secret</code>, the username and password to the mongo database has been stored. 😱</p>
<p>The moral of the story should be don't use <code>eval</code>, even if it dressed up in lamb's clothing and looking like a <code>new Function</code>!</p>
<h2>A (node) solution</h2>
<p>Node already has a sandboxing feature that I should have been making use of: the <a href="https://nodejs.org/api/vm.html">vm</a> module.</p>
<p>Specifically the same support can be provided, but instead using the <code>vm.runInNewContext</code> method (where <code>data</code> is the user's request body as a string):</p>
<pre><code class="language-js"><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vm'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> scope <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  vm<span class="token punctuation">.</span><span class="token function">runInNewContext</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`___result = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span> code<span class="token punctuation">:</span> <span class="token number">422</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'Invalid JSON structure'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
req<span class="token punctuation">.</span>body <span class="token operator">=</span> scope<span class="token punctuation">.</span>___result<span class="token punctuation">;</span>
</code></pre>
<p>Now trying to access the <code>process</code> or modifying object prototypes doesn't affect the main application and indeed throws an exception (which eventually goes back to the user) 🔒👍</p>
<p>Filed under &quot;Oh shit, I tried to be too clever (again)&quot;.</p>
<p><em>Originally published on <a href="https://remysharp.com/2018/07/25/when-helpful-turns-into-super-bad-security">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>An adventure in sparse arrays</title>
      <guid isPermaLink="false">an-adventure-in-sparse-arrays</guid>
      <link>https://remysharp.com/2018/06/26/an-adventure-in-sparse-arrays</link>
      <pubDate>Tue, 26 Jun 2018 14:28:42 +0000</pubDate>
      <description><![CDATA[I offered to coach JavaScript recently, and an exercise I dreamt up was to implement every array (prototype) method, and write tests that they work.
Since I'd come down with tonsillitis which apparently comes with a full on bedridden fever, I thought I'd have a go myself. And I learnt a few things along the way. Today, I wanted to share the swiss cheese wonder of sparse arrays!
(see what I did there? 🧀)]]></description>
      <content:encoded><![CDATA[
<p>I offered to coach JavaScript recently, and an exercise I dreamt up was to implement every array (prototype) method, and write tests that they work.</p>
<p>Since I'd come down with tonsillitis which apparently comes with a full on bedridden fever, I thought I'd have a go myself. And I learnt a few things along the way. Today, I wanted to share the swiss cheese wonder of sparse arrays!</p>
<p>(see what I did there? 🧀)</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><p>There is a <a href="#in-summary-aka-tldr">TLDR</a> if you really want to skip all my lovely words!</p>
<h2>A closer look</h2>
<p>A sparse array is an an array with <em>&quot;holes&quot;</em>. Holes tend to look like <code>undefined</code> (when logging), but they're not really not defined. It's just that JavaScript doesn't have a value for a hole, which…one might argue is undefined, but alas, that value for undefined value is already in use!</p>
<p><small>More recently Chrome started using <code>empty</code> for holes…which makes sense, but spoils my fun…</small></p>
<p>A few fun ways to view sparse arrays:</p>
<pre><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// hole × 1</span>
<span class="token punctuation">[</span> <span class="token punctuation">,</span> <span class="token punctuation">]</span> <span class="token comment">// hole × 1</span>
<span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">]</span> <span class="token comment">// int(1), no holes, length: 1</span>
<span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">]</span> <span class="token comment">// int(1) and hole × 1</span>
</code></pre>
<p>Obviously that last example is super precious, you're left to spot the difference between the comma that causes the sparse array, and the comma that's treated as a trailing comma and is ignored entirely by JavaScript.</p>
<p>Then there's the fun confusion of trying to look at a hole…which I'm now starting to liken to a black hole in my mind (to be interpreted both ways.).</p>
<pre><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>
</code></pre>
<p>These values are both undefined, but not because they're both undefined. WAT? <code>a[0]</code> points a set array element containing the value undefined. Whereas <code>a[1]</code> is <em>not</em> set to any value (it's a hole remember), but any value not defined is undefined. So, they kinda look the same.</p>
<p>There still be hope! A one line <code>prop in object</code> can tell us if we're looking at a hole:</p>
<pre><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre>
<p>So we're all safe now right? we've escaped the clutches of the unknown undefined but not undefined hole. Nope, as <a href="https://twitter.com/BrendanEich/status/1011325822261575681">The O.G. Daddy of JavaScript pointed out on Twitter</a>, there's potential risk if there's any 3rd party scripts or libraries involved (which unless your code is 100% siloed, is likely at some level). A 3rd party could tamper with the array prototype and:</p>
<pre><code class="language-js"><span class="token comment">// elsewhere in boobooland</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'fool!'</span>
<span class="token comment">// and in my code</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token comment">// true … 😱</span>
</code></pre>
<p>As with most things in JavaScript, the <em>proper</em> way of checking whether there's a hole or not requires using a method I barely remembered even existed:</p>
<pre><code class="language-js"><span class="token comment">// elsewhere in boobooland</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'fool!'</span>
<span class="token comment">// and in my code</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token comment">// 👊 have some of that boobooland</span>
</code></pre>
<p>Since <code>hasOwnProperty</code> is from the days of ES3, using that method allows you to officially call yourself a <em>Retro Scripter</em>.</p>
<h2>But why?</h2>
<p>Performance is a really good reason these holes exist. Say you create a <code>new Array(10000000)</code> (10 million). There's not actually 10 million allocated values in that array, and the browser isn't storing anything.</p>
<h2>Tripping over maps</h2>
<p>The cherry on the top, is that I always trip up on sparse arrays combined with map, forEach and filter (though I'm sure it has some funsies effects on other callback-based methods too).</p>
<p>The callback passed to <code>forEach</code> will skip over holes. Makes sense. It seems right that a fully sparse array doesn't have any <em>for-eaches</em>:</p>
<pre><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>
a<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 0 - the callback is never called</span>
</code></pre>
<p>It is worth noting that the array is still walked, and the larger the array, the longer the <code>forEach</code> will take, even if it's sparse. Oddly, I ran some (contrived) tests that showed it took ~85ms to run <code>forEach</code> on a 10 million sparse array, but over 20 seconds for 100 million. Weird.</p>
<p>Then there's <code>map</code>. The <code>map</code> function, like <code>forEach</code> doesn't call on the hole, but it will <em>always</em> return the hole in your result.</p>
<pre><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> res <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token keyword">typeof</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// [ "undefined", hole × 1, "boolean" ]</span>
</code></pre>
<p>This <code>map</code> with sparse arrays also explains why my goto method for generating an array of numbers from 1 to 9 (for instance) would never work:</p>
<pre><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// hole × 10</span>
<span class="token comment">// not 1, 2, 3 … etc 😢</span>
</code></pre>
<p>And then <code>filter</code> is just like, &quot;meh, screw you all, no one wants sparse arrays&quot;, so it just removes them no matter what:</p>
<pre><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> res <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// [ undefined, true ] - no hole 🤔</span>
</code></pre>
<p>…which, I guess makes sense, since the result of a filter is every element whose callback returned a truthy value, and since the hole wasn't invited to the party (as we saw in <code>forEach</code>), then it's never even considered, so the <code>filter</code> result is <em>never</em> sparse.</p>
<h2>Walking in sparseland</h2>
<p>There's two ways to guarantee iterating over the elements that don't exist in a sparse array. The first is a &quot;classic&quot; loop (I'm using a <code>for</code>, but a <code>while</code> or <code>do/while</code> will work too):</p>
<pre><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// logs 0…2 + undefined</span>
<span class="token punctuation">}</span>
</code></pre>
<p>In addition, there's the new ES6 array methods <code>values</code> and <code>keys</code>, both of which include sparse elements. This also means that array spread will translate holes into <code>undefined</code>. This is because under the hood, array spread is using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols">iterator protocol</a>.</p>
<p>This means that if you intend to copy an array, you should be very wary of spread and possible stick to slice.</p>
<pre><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token operator">...</span>a <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre>
<p>Here's a &quot;clever&quot; (read: not very good or even remotely clever) emoji sequence to help you in the future: 🔪🙅🍞👍</p>
<h2>Sometimes sparse is okay</h2>
<p>As I mentioned earlier, a sparse array is going to outperform to generation time when compared to using <code>Array.from({ length })</code>. Here's some very rough timings I got from Chrome Canary:</p>
<pre><code class="language-js"><span class="token keyword">const</span> length <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span> <span class="token comment">// 1 million 🧐</span>
<span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ~5ms</span>
Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// ~150ms</span>
</code></pre>
<p>The reason <code>Array.from</code> is so much slower, is that it's populated with <em>real</em> <code>undefined</code> values, and not holes. For typical daily use cases, I suspect that it won't really matter which you use. If you were working with something that handles a lot of data, perhaps audio samples, then a sparse array is clearly (I think) the way to go.</p>
<h2>In summary aka TLDR</h2>
<p>A trailing comma in array syntax is simply ignored.</p>
<pre><code class="language-js"><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">]</span> <span class="token comment">// no hole at the end, just a regular trailing comma</span>
</code></pre>
<p>Empty values between commas create holes and thus sparse arrays - these are known as: holes, empty or an elision (apparently)</p>
<pre><code class="language-js"><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">]</span> <span class="token comment">// hole at index(1) aka empty</span>
</code></pre>
<p>Detecting a hole is done using <code>array.hasOwnProperty(index)</code></p>
<pre><code class="language-js"><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// false: index(1) does not exist, thus a hole</span>
</code></pre>
<p>Iterating methods, such as <code>map</code>, <code>forEach</code>, <code>every</code>, etc won't call your callback for the hole</p>
<pre><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> ctr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ctr<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 - the callback was never called</span>
</code></pre>
<p><code>map</code> will return a new array <em>including</em> the holes</p>
<pre><code class="language-js"><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token comment">// [ 1, &lt;empty>, 4 ]</span>
</code></pre>
<p><code>filter</code> will return a new array <em>excluding</em> the holes</p>
<pre><code class="language-js"><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// [ 1, 2 ]</span>
</code></pre>
<p><code>keys</code> and <code>values</code> return iterator functions that do iterate over hole (ie. includes them in a <code>for key of array.keys()</code>)</p>
<pre><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token string">'b'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>index<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> a<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* logs:
- 0 'a'
- 1 undefined
- 2 'b'
*/</span>
</code></pre>
<p>Array spread <code>[...array]</code> will transform holes into <code>undefined</code> (which will also increase memory and affect performance)</p>
<pre><code class="language-js"><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">[</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token string">'b'</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment">// ['a', undefined, 'b']</span>
</code></pre>
<p>Large sparse array creation is fast - much faster than <code>Array.from</code>.</p>
<pre><code class="language-js"><span class="token keyword">const</span> length <span class="token operator">=</span> <span class="token number">10000000</span><span class="token punctuation">;</span> <span class="token comment">// 10 million</span>
<span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// quick</span>
Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// less quick</span>
</code></pre>
<hr>
<p>In practise though, for me, it just helps to remember these pitfalls (a pun, yes), as they rarely cause me any real trouble day-to-day.</p>
<p><em>Originally published on <a href="https://remysharp.com/2018/06/26/an-adventure-in-sparse-arrays">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>Manual Aspire</title>
      <guid isPermaLink="false">manual-aspire</guid>
      <link>https://remysharp.com/2018/06/19/manual-aspire</link>
      <pubDate>Tue, 19 Jun 2018 15:21:07 +0000</pubDate>
      <description><![CDATA[As part of my research for the talk I gave at jsconf.eu 2018, I bought a ZX Spectrum 48K. I purchased the machine from eBay, but it was indeed an original 1980's Spectrum with a few internals cleaned up.
In fact, it even came with the original manual which I had long forgotten. Except the manual isn't a manual at all (in actually fact, it never even claimed to be!).]]></description>
      <content:encoded><![CDATA[
<p>As part of my research for the <a href="https://2018.jsconf.eu/speakers/remy-sharp-using-a-modern-web-to-recreate-1980s-horribly-slow-and-loud-loading-screens.html">talk I gave at jsconf.eu 2018</a>, I bought a ZX Spectrum 48K. I purchased the machine from eBay, but it was indeed an original 1980's Spectrum with a few internals cleaned up.</p>
<p>In fact, it even came with the original manual which I had long forgotten. Except the manual isn't a manual at all (in actually fact, it never even claimed to be!).</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><p>The manual is an instruction book on <em>how</em> to program the Spectrum. It's a full book, with detailed directions and information on how the machine works, how the programming language works, includes human readable sentences explaining logic and even goes so far as touching on what hex values perform which assembly functions.</p>
<p>This book stirs a passion inside of me that tells me that I can <em>make something new</em> from an existing thing. It reminds me of the 80s Lego boxes: unlike today's Lego, the back of a Lego box would include pictures of creations that you <em>could</em> make with your Lego set. It didn't include any instructions to do so, but it always made me think to myself: <em>&quot;I can make something more with these bricks&quot;</em>.</p>
<div class="centre">
<p><img src="https://remysharp.com/images/speccy-manual/lego-back.jpg" alt=""></p>
</div>
<p>The book cover art is like something from Star Wars: a megacity, high above the clouds. When I casually flicked through the pages, I found explanations of how to create music and graphics, detailed written prose on how expressions work. Even how to pronounce hex values and a table of all the hex values and each of 256 associated assembly functions.</p>
<div class="grid-2x2">
<img src="https://remysharp.com/images/speccy-manual/cover.jpg" alt="ZX Spectrum manual cover">
<img src="https://remysharp.com/images/speccy-manual/music.jpg" alt="Directions on how to play music">
<img src="https://remysharp.com/images/speccy-manual/graphics.jpg" alt="How to create graphics with the limited pixels the Spectrum had available">
<img src="https://remysharp.com/images/speccy-manual/expressions.jpg" alt="Human readable explanations of how expressions work">
<img src="https://remysharp.com/images/speccy-manual/hex.jpg" alt="A gentle hand holding explaining hex, how it works and how it's pronounced">
<img src="https://remysharp.com/images/speccy-manual/asm.jpg" alt="Finally, a table of hex values and their associated assembly function - all 256 of them.">
</div>
<p>What I find so elegant about this book being provided to you, the consumer, and the Lego ideas on the back of the box, is that it was <em>given</em> to the consumer. The very act of owning the <em>thing</em> plants the seed that greater things can be done with this <em>thing</em>.</p>
<p>Today we have a ocean of knowledge at our fingertips with the internet, but more often than not, you'll be expected to swim out by yourself with no guide or direction. And frankly, it's a lot easier to sit on the shore and just tinker with the thing until the next shiny thing comes along.</p>
<p>I want to see more seed planting!</p>
<p><em>Originally published on <a href="https://remysharp.com/2018/06/19/manual-aspire">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>The story of 42 million bins</title>
      <guid isPermaLink="false">the-story-of-42-million-bins</guid>
      <link>https://remysharp.com/2018/05/31/the-story-of-42-million-bins</link>
      <pubDate>Thu, 31 May 2018 22:09:33 +0000</pubDate>
      <description><![CDATA[This past month of April I had a bit of an adventure in server fires (though thankfully not literal) so I thought it might be interesting to share my experience, what I did, tools I used, discovered and created.]]></description>
      <content:encoded><![CDATA[
<p>This past month of April I had a bit of an adventure in server fires (though thankfully not literal) so I thought it might be interesting to share my experience, what I did, tools I used, discovered and created.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><p>Originally posted to <a href="https://remysharp.com/subscribe">my newsletter</a> last month.</p>
<h2>It started with a retirement notice…</h2>
<p>One morning a few weeks ago I got the following email from Amazon telling me an instance had been marked for retirement:</p>
<p><img src="https://remysharp.com/images/jsbin-notice.png" alt=""></p>
<p>I've highlighted the &quot;your instance could already be unreachable&quot; because 6 hours prior that machine had been unreachable - according to my status monitors!</p>
<p><strong>🛠<a href="https://updown.io/r/tx47y">updown.io</a> is a fantastic and simple tool for monitoring uptime - then I have the notifications go via email and hit webhooks that I have setup to ping</strong> <a href="https://remysharp.com/2016/12/18/tech-things-in-2016#lametric"><strong>my lametric</strong></a></p>
<p><img src="https://remysharp.com/images/updown-io.png" alt=""></p>
<p>Being a &quot;normal&quot; developer, I'm not an ops expert, so had to manually recreate the machine, and as it turned out, it was the main <strong>database server</strong> that had been hosed.</p>
<h2>Foresight from previous burns</h2>
<p>This isn't the first time the database server has exploded, so I had the foresight (perhaps obvious to you) to make sure the data for the database was stored on an entirely separate volume (so it could be mounted to a new machine if needs be).</p>
<p>In fact, the entire recovery process to getting the database running again took about an hour.</p>
<p>But what about when it happens again?</p>
<h2>My database is a bottleneck</h2>
<p>I run a fairly large MySQL database that requires a lot of memory (for something that you might consider reasonably simple from a tech stack perspective). In fact, it's the most expensive part of the JS Bin stack in AWS. Equally, every time someone loads the full output URL (like jsbin.com/foo/) the Node.js server goes to MySQL, gets the record, runs various checks (for permissions, etc), then runs each block of code through a transpiler (if required, i.e. markdown to HTML), then constructs it all as an HTML page, then returns it.</p>
<p>The obvious problem: these pages never change once the author is done with the bin. So why keep doing all that processing?</p>
<p>So if you've been following me on Twitter this last month, you'll have seen super interesting tweets like this:</p>
<p><img src="https://remysharp.com/images/10-million.png" alt="Just passed 1,000,000. Only 40,000,000 to go."></p>
<p>I've written a script that is incrementally working its way through every-single-bin (of 42 million and change) and storing a static HTML file. That's stage one of The Grand Plan!</p>
<h2>Storage options</h2>
<p>I did a canvas of Twitter, and did a little reading around, and although my original plan was to store the static HTML for each bin in AWS' S3 service, I settled for Backblaze. It's a similar-ish service with very low costs.</p>
<p>To date I'm storing 111GB (36 million bins) and it'll cost me 10¢ a month. Hardly breaking the bank.</p>
<p><strong>🛠<a href="https://www.backblaze.com/">backblaze.com</a> - I'm using this to store all the static output from the 42 million bins (it also has node modules and a reasonably straight forward API)</strong></p>
<p>The process of storing was a little tricky though. I started with a single CPU EC2 machine running through batches of 20 bins at a time, and the original estimate was the task would be complete in around 54 days. That's <strong>nearly two months!!!</strong></p>
<p>The first job was to scale the machine to a multi-cpu instance (I went with 4 CPUs) so that I could shard the process across CPUs (which makes sense, but since Node is single threaded, you have to manage this yourself - I just use a modulus 4 on the bin.id and continued if it matched the job number).</p>
<p>The <a href="https://github.com/jsbin/output/blob/d3ea7e5701e3acd0d2e430d87dccad76bf90d228/routes/blaze.js#L90">script I wrote is here</a> which accepts a bin record and then attempts to transform the bin into HTML. The <a href="https://github.com/jsbin/bin-to-file">bin to HTML</a> is another library that's used throughout old JS Bin and the new JS Bin - <strong>importantly</strong> the final output contains <em>all</em> the original source as well as the transpiled code. i.e. if you used markdown, then HTML is rendered, and there's a <code>script[type=&quot;source/markdown&quot;]</code> included in the source (but hidden from the visitor). This is important because it'll serve me later on.</p>
<h2>Inevitable crashing</h2>
<p>Due to the nature of JS Bin, and allowing for processors like Pug (previously Jade), Less, SCSS and so on, the user code can run arbitrary JavaScript, including gems such as:</p>
<pre><code>.columns
  \- for (var i=0; i &lt; 30; ++i)
    .col
    \- for (var i=0; i &lt; 20; ++i)
        .cell
</code></pre>
<p>…which, only results in an infinite loop and CPU going to &gt;100%, which… 🤷‍ and then the export process eventually dies.</p>
<p><strong>🛠screen is a unix tool that lets you run a session in the background that doesn't close when you end your own connection (tmux is a more powerful alternative). I ran 4 separate screens with individual logging. I <a href="https://remysharp.com/2015/04/27/screen">wrote about screen</a> a few years back.</strong></p>
<p>So now I've got millions of static files, how do I get them out again? CloudFlare's workers.</p>
<p><strong>🛠<a href="https://blog.cloudflare.com/cloudflare-workers-unleashed/">CloudFlare workers</a> are (sort of) like cloud functions, but expose a service worker-like environment and let you do background fetches and pre-process incoming requests.</strong></p>
<h2>Retrieval and faking an API</h2>
<p>I've got a new (temporary) domain jsbin.me pointing to CloudFlare, and I'm using CloudFlare's new worker service ($5/month for the first 10 million requests) to parse JS Bin URLs and to collect the source content from BackBlaze.</p>
<p>With a single script that follows Service Worker-like conventions (responding to fetch events), I'm able to proxy requests using the original URL format (and eventually I could swap out the original output.jsbin.com for this new system) to Backblaze <strong>and</strong> support more interesting requests like the source JavaScript, or CSS or even the pre-processed content.</p>
<p>For example:</p>
<ul>
<li><a href="http://jsbin.me/vojilipite/2">http://jsbin.me/vojilipite/2</a> the fully rendered static page</li>
<li><a href="http://jsbin.me/vojilipite/2.css">http://jsbin.me/vojilipite/2.css</a> rendered CSS</li>
<li><a href="http://jsbin.me/vojilipite/2.scss">http://jsbin.me/vojilipite/2.scss</a> original (pre-processed) CSS panel content</li>
<li><a href="http://jsbin.me/vojilipite/2.api">http://jsbin.me/vojilipite/2.api</a> full bin object</li>
</ul>
<p>This <strong>all</strong> comes from the static HTML file.</p>
<p>The tricky part is testing, but I wrote a tool that lets me replicate CloudFlare's worker environment so that I could even deploy my own cloud worker to a different hosting platform.</p>
<p><strong>🛠<a href="https://www.npmjs.com/package/cloud-worker">cloud-worker is a node package</a> that consumes a script with similar features of a Service Worker - <em>and</em> allows me to automate my testing for the CloudFlare worker</strong></p>
<p>And that's the story so far! The export finished a few weeks back completing the 42 million bins and finding them a new home. As to what the next move is, and how I maintain that process going forward, I'm still unsure!</p>
<p><em>Originally published on <a href="https://remysharp.com/2018/05/31/the-story-of-42-million-bins">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>My extinguished kindle</title>
      <guid isPermaLink="false">my-extinguished-kindle</guid>
      <link>https://remysharp.com/2018/05/18/my-extinguished-kindle</link>
      <pubDate>Fri, 18 May 2018 13:02:11 +0000</pubDate>
      <description><![CDATA[Last night I reached for my Kindle to continue reading 1984. I had just started part 3 of the book and a big turn of events had just happened. Except, I couldn't. My Kindle's screen had cracked. Or the e-paper in particular.
After doing some quick reading, it seems that this is fairly fatal for a Kindle and it was time to renew the device.
But I felt sad about saying goodbye to it. Goodbye to an inanimate object…?]]></description>
      <content:encoded><![CDATA[
<p>Last night I reached for my Kindle to continue reading 1984. I had <em>just</em> started part 3 of the book and a big turn of events had just happened. Except, I couldn't. My Kindle's screen had cracked. Or the e-paper in particular.</p>
<p>After doing some quick reading, it seems that this is fairly fatal for a Kindle and it was time to renew the device.</p>
<p>But I felt sad about saying goodbye to it. Goodbye to an inanimate object…?</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><p><img src="https://remysharp.com/images/my-kindle.jpg" alt="My Kindle"></p>
<p>Sure, I'm going to buy a new Kindle, and not replace it with the same 4th generation. Not because the 4th gen was any less of a Kindle, but because I could get a new device delivered faster (shame on me…a terrible trait: impatience).</p>
<p>All of a sudden my Kindle was destined for the bin (or rather the electronics scrap at the tip).</p>
<p>And I felt weird, very weird about that. Somehow, I felt weird about throwing away a bit of consumer technology. Except, the Kindle to me, wasn't that at all. I hold a great fondness to this little device, and that's an odd concept for me to grasp.</p>
<p>I didn't even want to buy a Kindle. I was buying myself a birthday present 6 years ago, and the cashier told me if I spend £15 more, then I qualify for a free Kindle (the present for myself wasn't cheap, I can assure you!). So I thought: what the hell, and may as well.</p>
<p>From there the Kindle lay dormant for years, until the very end of 2016. I decided I'd give this thing called “reading” a shot.</p>
<p>I'd struggled reading books in the past for a number of reasons: I used to use glasses to help my focus when reading (when I was 18), the size of the books were daunting to me (it took me 6 solid months to read Frankenstein on paperback), and all of this cumulative to a very slow and painful reading process, which put me off the entire experience.</p>
<p>The Kindle changed a few things for me: firstly, I had no idea the size of the book, and I've never really understood the percentage progress (or my thumb is over it intentionally). Secondly, I found that raising the font size and increasing the line height made the pages entirely readable for me.</p>
<p>Since that December in 2016 and mid-2018, I've read nearly 50 books. This is a huge deal for me, and my Kindle was there for every page.</p>
<p>If you were told that your favourite childhood Teddy was torn and headed for the bin, I believe many of us would chose to keep Teddy, even in their state of disrepair. And yet Teddy is also an inanimate object.</p>
<p>What makes Teddy different for you and me, is that they are infused with our memories and thus holds its own personality. Personality. That's what makes <em>things</em> come to life.</p>
<p>My Kindle went everywhere with me. To the gym, on the walking machine, on flights and trains. I've <a href="https://twitter.com/rem/status/996376422322229248">shared photos of it</a>, taken it on holiday, and, as many others, taken it to bed.</p>
<p>It had little wear marks all over, including <em>in</em> the screen. Each page i turned had small unique marks that only <em>my</em> Kindle had. It was my Kindle's personality.</p>
<p>That is why I am a little sad about losing this &quot;inanimate object&quot;.</p>
<p>I'm sure I won't keep it, like I kept my childhood Teddy, but it will be remembered fondly, and it will be missed.</p>
<p>Objects are only inanimate if we choose so. And as more and more digital and electronic <em>things</em> become extensions and representations of ourselves, we will infuse them with personality, and thus, when they're gone, they will be missed.</p>
<hr>
<p>Related reading: Seventy-Two Letters by Ted Chiang, part of <a href="https://www.goodreads.com/book/show/223380.Stories_of_Your_Life_and_Others?from_search=true">Stories of Your Life and Others</a></p>
<p><em>Originally published on <a href="https://remysharp.com/2018/05/18/my-extinguished-kindle">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>✂📋 How I copy &amp; paste in the terminal</title>
      <guid isPermaLink="false">how-i-copy-paste-in-the-terminal</guid>
      <link>https://remysharp.com/2018/04/25/how-i-copy-paste-in-the-terminal</link>
      <pubDate>Wed, 25 Apr 2018 09:28:35 +0000</pubDate>
      <description><![CDATA[I use the terminal a lot and aliases are a great way to both personalise my command line experience, but also to make some tasks a little easier (and sometimes, smarter 😎).]]></description>
      <content:encoded><![CDATA[
<p>I use the terminal a <em>lot</em> and aliases are a great way to both personalise my command line experience, but also to make some tasks a little easier (and sometimes, smarter 😎).</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><p>This isn't rocket science, but I've got special aliases for my copy and paste commands. Since I use a Mac, the command line paste command is <code>pbpaste</code>, which…well doesn't immediately sprint to mind. Equally, copy is <code>pbcopy</code> and quite often I want to copy to my clipboard but also see what was copied.</p>
<p>There's just one addition that I like to add to the copy command: I find it useful to also copy the contents of files occasionally. So <code>copy</code> for me is actually a function:</p>
<pre><code class="language-bash"><span class="token comment"># make copy a function that checks whether there's an</span>
<span class="token comment"># argument being passed, and if so, cat the file and pipe</span>
<span class="token comment"># through copy. otherwise, pipe stdin into copy, then</span>
<span class="token comment"># finally paste to stdout</span>
copy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">[</span> -t 0 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token function">cat</span> <span class="token variable">$@</span> <span class="token operator">|</span> pbcopy
  <span class="token keyword">else</span>
    pbcopy <span class="token operator">&lt;</span> /dev/stdin
  <span class="token keyword">fi</span>
  pbpaste
<span class="token punctuation">}</span>

<span class="token comment"># and now alias paste to pbpaste, because gosh darnit!</span>
<span class="token function">alias</span> paste<span class="token operator">=</span>pbpaste
</code></pre>
<p>Now I can pipe commands to copy or pass it a filename:</p>
<pre><code class="language-bash">$ <span class="token function">ps</span> <span class="token operator">|</span> copy
<span class="token comment"># copies and shows output from `ps`</span>
$ copy blog-post.md
<span class="token comment"># copies and shows contents of `blog-post.md` via `cat`</span>
</code></pre>
<p>Caution: there is an <a href="https://en.m.wikipedia.org/wiki/Paste_(Unix)">existing <code>paste</code> command</a> which this will overwrite. If you want to invoke the original command use <code>command paste</code>.</p>
<p>I hope that's useful. If you want to learn more, check out my <a href="https://terminal.training/?utm_source=blog&amp;utm_medium=link&amp;utm_campaign=blog-post">terminal.training</a> course.</p>
<p><em>Originally published on <a href="https://remysharp.com/2018/04/25/how-i-copy-paste-in-the-terminal">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>Quick tip for node modules</title>
      <guid isPermaLink="false">quick-tip-for-node-modules</guid>
      <link>https://remysharp.com/2018/04/12/quick-tip-for-node-modules</link>
      <pubDate>Thu, 12 Apr 2018 11:43:50 +0000</pubDate>
      <description><![CDATA[When writing my node modules, I've come to really quite enjoy using Jest for testing (I've written about how I used tap and it's quite similar).
Sometimes however, being able to execute the module on the command line and passing some arbitrary data can be pretty handy, and I've used the following technique on a growing handful of modules I've written.]]></description>
      <content:encoded><![CDATA[
<p>When writing my node modules, I've come to really quite enjoy using Jest for testing (I've written about <a href="https://remysharp.com/2016/03/01/from-tests-to-debugging-node-workflow">how I used tap</a> and it's quite similar).</p>
<p>Sometimes however, being able to execute the module on the command line and passing some arbitrary data can be pretty handy, and I've used the following technique on a growing handful of modules I've written.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>Exporting to the CLI</h2>
<p>I've written a module called <code>bin-to-file</code>. It's an old JS Bin module that takes a bin structure and returns a single HTML string with everything smooshed together.</p>
<p>The module has tests, but I want to be able to quickly test the output using the command line like this:</p>
<pre><code class="language-bash">$ <span class="token function">cat</span> __test__/foo.json <span class="token operator">|</span> node lib/index.js
‣ <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>html…
</code></pre>
<p>In my <code>lib/index.js</code> (the source for the module), right where I'm exporting the function out, my code includes the following lines:</p>
<pre><code class="language-js"><span class="token comment">// if the module isn't being required be another module</span>
<span class="token comment">// and there's something being piped in, then —</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>module<span class="token punctuation">.</span>parent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>process<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>isTTY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> stdin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 = STDIN</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span><span class="token function">exports</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>stdin<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>And that's it. Now I can use my module on the command line for arbitrary testing.</p>
<p><em>Originally published on <a href="https://remysharp.com/2018/04/12/quick-tip-for-node-modules">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>Why I have a limited company</title>
      <guid isPermaLink="false">why-i-have-a-limited-company</guid>
      <link>https://remysharp.com/2018/03/29/why-i-have-a-limited-company</link>
      <pubDate>Thu, 29 Mar 2018 19:43:31 +0000</pubDate>
      <description><![CDATA[I've been asked a number of times over the years why I chose to run my business under a limited company, specifically Left Logic instead of running the business under my own name – since, for the majority, hiring Left Logic is hiring Remy Sharp. So I thought it would be useful to post it here (partly for me, partly for you).]]></description>
      <content:encoded><![CDATA[
<p>I've been asked a number of times over the years why I chose to run my business under a limited company, specifically <a href="https://leftlogic.com">Left Logic</a> instead of running the business under my own name – since, for the majority, hiring Left Logic is hiring Remy Sharp. So I thought it would be useful to post it here (partly for me, partly for you).</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>TL;DR</h2>
<p>This post is definitely rambly, so the short version is:</p>
<ul>
<li>There's a bit more gravitas attached to a name of a company over an individuals' name</li>
<li>Using my own name didn't make sense if I wanted to have employees</li>
<li>I wanted a limited company that would partly protect me from liability of catastrophic failure, but also to simplify my tax processing</li>
<li>Selling or handing the business over to another entity feels weird if it were my name</li>
</ul>
<p>If you're interested in the inner workings of my head, read on dear visitor…</p>
<h2>Sole trader vs. limited company</h2>
<p>This question is going to be slightly different depending on your own country, but I imagine the idea of a <em>limited</em> company is universal. The main difference (to me) is that as a limited company has limited liability (when the shit hits the fan). In theory, if things go wrong, the home that I own with Julie (or <em>hope to own one day</em>) isn't a potential source for funds to the company.</p>
<p>It's not as cut and dry as that, but having a limited company allowed me to separate my business affairs with my personal affairs (usually things like purchases, renting of property and so on). As a sole trader, I'd collect money from my clients, and pay taxes in a different way at the end of the year.</p>
<p>For my own business, I have a separate bank account for business and personal, and if I'm having a business meeting, I'll use my business card, and not rely on my personal bank card to avoid the potential mess of personal expense claims.</p>
<h2>Impressions</h2>
<p>I had heard first hand that some potential clients won't work with non-limited companies. Though the delivered product is no different, I imagine the liability of working with a limited company benefits the client (somehow?). Though I imagine that sole traders would have insurance, but this was always something I figured would be easier to just set up a limited company and avoid any potential awkward situations.</p>
<h2>Perceptions of one</h2>
<p>During the weeks preceding the creation of my company I was brainstorming some ideas for a company name. I've got the original scrap of paper somewhere, but I ended up settling on two potential names:</p>
<ul>
<li>remitech</li>
<li>left logic</li>
</ul>
<p>Although I didn't seriously consider &quot;Remy Sharp Ltd&quot;, <em>remitech</em> was effectively the same thing.</p>
<p>The impression that remitech gives is that it's Remy you're hiring. Not a company, not a team, just a single person. Which, is not inherently bad (although arguably the name <em>remitech</em> was pretty bad!), but it did mean that it wouldn't allow for any growth in perception.</p>
<p>My original plans were always to grow my business into a very small team (I got hung up on 6 people but never made it), but under the name remitech, a potential client might expect a single individual behind the company and not a small crack team of developers. I didn't want this to hamper that impression with a name tied to me.</p>
<h2>Top dogs 👎</h2>
<p>I'm not a fan of top dogs, and hero worship in any industry or working place. <a href="https://twitter.com/Julieanne">Julie</a> (my IRL partner) works for Left Logic as an equal to me focusing on running events for companies and running logistics in Left Logic. It makes me cringe to think that they might work for Remy Sharp Ltd.</p>
<p>By having my name on the company (<em>to me</em>) it gives the impression of importance, and I don't want that in my own working environment. My company has grown and decreased over the years, and I've had a number of employees over time all of which had their own individual strengths. When I think of other companies I've known of that ran under an individuals' name, I always imagine (perhaps unfairly) that this particular individual was the cream of their crop.</p>
<p>By having my name on the company (<em>to me</em>) it gives the impression of importance, and I don't want that in my own working environment. My company has grown and decreased over the years, and I've had a number of employees over time all of which had their own individual strengths. When I think of other companies I've known of that ran under an individuals' name, I always imagine (perhaps unfairly) that this particular individual was the cream of their crop and everyone else was an underling…otherwise wouldn't the underling's name be on the letter head?!</p>
<h2>The reality of work acquisition</h2>
<p>The actual reality, due to my own poor marketing techniques, is that most people I work amongst and work for, don't know about Left Logic. They know <em>me</em> through my blog, or my open source work, or through speaking (though those days have dwindled some what).</p>
<p>I've come to accept this isn't so bad, and certainly there's more I can do to promote my business, but whilst we're a business of two individuals (at time of writing) there's no urgency to do any over the top marketing the name Left Logic. To be honest, many of my peers don't even <em>know</em> what I do, let along that I trade under Left Logic!!!</p>
<h2>Side note: name</h2>
<p>The name, Left Logic, is based on properties that I wanted to include. I'm left handed, but also I consider myself a logic individual who uses logic to solve problems (well…yeah, like most developers I guess!). Also, the left side of the brain is responsible for logic and problem solving. Almost as importantly, the dot-com domain was available and it was easy to say to another person (I created the company during the time we saw a slew of incorrectly spelt dot-coms launching…like flicker, without the 'e'!).</p>
<p>So <em>Left Logic</em> secretly hides some traits I find important, so it has meaning to me without particularly having to mention me directly.</p>
<p><em>Originally published on <a href="https://remysharp.com/2018/03/29/why-i-have-a-limited-company">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>Last minute node debugging</title>
      <guid isPermaLink="false">last-minute-node-debugging</guid>
      <link>https://remysharp.com/2018/03/03/last-minute-node-debugging</link>
      <pubDate>Sat, 03 Mar 2018 13:02:49 +0000</pubDate>
      <description><![CDATA[I'm working on a node project that I need to debug, but I didn't start it with the --inspect flag. Moreover, I'm using nodemon to restart node (which makes this process a little trickier).]]></description>
      <content:encoded><![CDATA[
<p>I'm working on a node project that I need to debug, but I didn't start it with the <code>--inspect</code> flag. Moreover, I'm using nodemon to restart node (which makes this process a little trickier).</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>Finding the node process id</h2>
<p>The first task is to find the node process id (aka PID). The way <em>I</em> do this when running with nodemon is to:</p>
<pre><code class="language-bash">$ <span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> nodemon <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token function">grep</span>
 4359 ttys001    0:00.49 node /…/bin/nodemon
18357 ttys002    0:01.40 node /…/bin/nodemon --ignore public -i views
</code></pre>
<p>This command is doing three things:</p>
<ol>
<li>Listing <em>all</em> the processes running that I've started/own</li>
<li>I'm <em>grepping</em> to filter only the lines that match &quot;nodemon&quot;</li>
<li>Since the <code>grep</code> for nodemon was running, I need to filter <em>out</em> the word &quot;grep&quot; (using <code>grep -v …</code>)</li>
</ol>
<p>There's other tools that you can install like <code>pgrep</code> and <code>pidof</code> - but I tend to find this is the friendliest method to finding the PID.</p>
<p>Now I know the PID (18357 for nodemon (in my case I have two different instances of nodemon, so I need to be savvy to work out exactly which I'm working with), I need to look at the <em>process tree</em> to find the PID of the child node process (this is because nodemon will spawn your node process, and I want to debug the child process, rather than nodemon itself).</p>
<pre><code class="language-bash">$ <span class="token function">ps</span> -g 18357
  PID TTY           TIME CMD
18357 ttys002    0:01.40 node /…/bin/nodemon --ignore public -i views
67827 ttys002    0:02.41 /…/bin/node lib/index.js
</code></pre>
<p>The <code>-g</code> flag on <code>ps</code> asks for the group of subprocesses that my main nodemon process is responsible for. So now I can see the PID of my child node process (67827) and I'm ready to enable the debugger.</p>
<h2>Turning on the debugger on a running node process</h2>
<p>There's two ways to switch a node process into debugging mode. Using a small node script (and this should be cross compatible for all platforms). The <code>process</code> object in node has a <code>_debugProcess(PID)</code> method (which I think is undocumented though it's been around since <em>at least</em> mid-2014).</p>
<p>I'm running the node script as an inline eval'ed script:</p>
<pre><code class="language-bash">$ node -e <span class="token string">'process._debugProcess(67827)'</span>
</code></pre>
<p>Now my nodemon process emits the following log:</p>
<pre><code class="language-text">[nodemon] restarting due to changes...
[nodemon] starting `node lib/index.js`
listening on http://localhost:3009 @ 2018-03-03T12:29:58.675Z
Debugger listening on ws://127.0.0.1:9229/08eddfe1-9e9f-48bd-8d39-8225383ec206
For help see https://nodejs.org/en/docs/inspector
Debugger attached.
</code></pre>
<p>Turning now to Chrome devtools, I will find the green node debugging icon, then clicking on that will take me to devtools for the node process:</p>
<p><img src="https://remysharp.com/images/node-debug-icon.png" alt="Node debugging icon"></p>
<h2>Alternative method</h2>
<p>Another method to triggering the debugger is to send a <code>SIGUSR1</code> signal to the PID (though I'm not entirely sure how to do this on Windows). This is done using the <code>kill</code> command as so:</p>
<pre><code class="language-bash">$ <span class="token function">kill</span> -SIGUSR1 67827
</code></pre>
<p>I like this method just because it's just a little more succinct.</p>
<p><em>Originally published on <a href="https://remysharp.com/2018/03/03/last-minute-node-debugging">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>Headless Raspberry Pi setup</title>
      <guid isPermaLink="false">headless-raspberry-pi-setup</guid>
      <link>https://remysharp.com/2018/02/18/headless-raspberry-pi-setup</link>
      <pubDate>Sun, 18 Feb 2018 09:53:11 +0000</pubDate>
      <description><![CDATA[The following information is scattered around the web and it's taken me a few times to find it each time, so I'm putting it here for safe keeping.
As much as I love the Raspberry Pi's, I rarely have a mouse and keyboard handy for setup, and nearly all concessions, I want to run the Pi in headless mode (and ssh into the machine). This guide is a bullet point tick list to getting the Pi accessible on the network.]]></description>
      <content:encoded><![CDATA[
<p>The following information is scattered around the web and it's taken me a few times to find it each time, so I'm putting it here for safe keeping.</p>
<p>As much as I love the Raspberry Pi's, I rarely have a mouse and keyboard handy for setup, and nearly all concessions, I want to run the Pi in headless mode (and ssh into the machine). This guide is a bullet point tick list to getting the Pi accessible on the network.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>Prerequisites</h2>
<p>A Raspberry Pi (I quite like <a href="https://shop.pimoroni.com/">this UK store</a>), min 8gb micro SD card (with cradle) class 6 to 10 (ideally), and disk image flashing software, <a href="https://etcher.io/">Etcher</a> is a pretty nice cross platform solution.</p>
<ol>
<li>Download the <a href="https://www.raspberrypi.org/downloads/raspbian/">Raspbian Stretch Lite image</a>.</li>
<li>Using <a href="https://etcher.io/">Etcher</a> and select the downloaded zip file, and flash onto an SD card. Once flashed, remove and reinsert, and navigate to the <code>/boot</code> drive.</li>
</ol>
<h2>Configuration</h2>
<p>Create two files in the root of the <code>boot</code> directory/drive:</p>
<ol>
<li><code>ssh</code> - an <em>empty file</em>, this boots the Pi with SSH turned on</li>
<li><code>wpa_supplicant.conf</code> - this is the wifi configuration, as follows:</li>
</ol>
<pre><code>ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1

network={
    ssid=&quot;[YOUR-SSID]&quot;
    psk=&quot;[YOUR-PASSWORD]&quot;
    scan_ssid=1
}
</code></pre>
<p><strong>Important note about wifi</strong> the Pi Zero doesn't have 5Ghz wifi support (so make sure you connect to the appropriate wifi network).</p>
<h2>Connecting</h2>
<p>Once the Pi is running, you'll want to discover the IP address on the network. For a Mac, there's a couple of methods to discover devices on the network.</p>
<p>The following command will list all the IP addresses on your network (assuming your machine is on the same network as your Pi). It's useful if there's a small list of IP addresses:</p>
<pre><code class="language-bash">$ arp -a <span class="token comment"># lists all IP addresses on network</span>
? <span class="token punctuation">(</span>192.168.1.1<span class="token punctuation">)</span> at 2c:03:33:d4:98:70 on en0 ifscope <span class="token punctuation">[</span>ethernet<span class="token punctuation">]</span>
? <span class="token punctuation">(</span>192.168.1.5<span class="token punctuation">)</span> at 78:db:cf:f2:ab:71 on en0 ifscope <span class="token punctuation">[</span>ethernet<span class="token punctuation">]</span>
? <span class="token punctuation">(</span>192.168.1.100<span class="token punctuation">)</span> at 6c:40:23:94:1e:1c on en0 ifscope permanent <span class="token punctuation">[</span>ethernet<span class="token punctuation">]</span>
? <span class="token punctuation">(</span>192.168.1.115<span class="token punctuation">)</span> at c0:ef:fb:53:11:1e on en0 ifscope <span class="token punctuation">[</span>ethernet<span class="token punctuation">]</span>
? <span class="token punctuation">(</span>192.168.1.124<span class="token punctuation">)</span> at 9c:21:77:7e:ce:bf on en0 ifscope <span class="token punctuation">[</span>ethernet<span class="token punctuation">]</span>
<span class="token comment"># etc</span>
</code></pre>
<p>For a more detailed (and useful) report, you can use <a href="https://nmap.org">nmap</a> to scan your router for devices and their hardware name (and using <code>grep</code> to filter to the string &quot;raspberry&quot;), in my case <code>[ROUTER-IP]</code> is <code>192.168.1.1</code>:</p>
<pre><code class="language-bash">$ <span class="token function">sudo</span> nmap -sn <span class="token punctuation">[</span>ROUTER-IP<span class="token punctuation">]</span>/24 <span class="token operator">|</span> <span class="token function">grep</span> -i raspberry -B 2

Nmap scan report <span class="token keyword">for</span> <span class="token operator">&lt;</span>strong<span class="token operator">></span>192.168.1.143<span class="token operator">&lt;</span>/strong<span class="token operator">></span>
Host is up <span class="token punctuation">(</span>0.20s latency<span class="token punctuation">)</span>.
MAC Address: B9:20:E9:DB:32:88 <span class="token punctuation">(</span>Raspberry Pi Foundation<span class="token punctuation">)</span>
</code></pre>
<p>Now I've found the ip address of the IP on my network, I can connect using <code>ssh pi@&lt;ip-address&gt;</code> with the default password of <code>raspberry</code> (which I'll change immediately).</p>
<p><em>Originally published on <a href="https://remysharp.com/2018/02/18/headless-raspberry-pi-setup">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>How to cross post to Medium</title>
      <guid isPermaLink="false">how-to-cross-post-to-medium</guid>
      <link>https://remysharp.com/2018/02/01/how-to-cross-post-to-medium</link>
      <pubDate>Thu, 01 Feb 2018 11:54:41 +0000</pubDate>
      <description><![CDATA[At some point during 2017, Medium decided to pull their IFTTT applets that allows content to be posted into Medium. Which I think is a pretty shitty move since there was no notification that the applet was pulled (I only noticed after Medium just didn't contain a few of my posts), and it smacks of &quot;Medium should be the original source&quot;…which may be fine for some people, but I'm expecting my own content to outlast the Medium web site.
Anyway. I got this working again with a bit of knowledge of the Medium API and working IFTTT (RSS) applets, and it would seem this would be useful to others too.]]></description>
      <content:encoded><![CDATA[
<p>At some point during 2017, Medium decided to pull their <abbr title="If This, Then That">IFTTT</abbr> applets that allows content to be posted <em>into</em> Medium. Which I think is a pretty shitty move since there was no notification that the applet was pulled (I only noticed after Medium just didn't contain a few of my posts), and it smacks of &quot;Medium should be the original source&quot;…which may be fine for some people, but I'm expecting my own content to outlast the Medium web site.</p>
<p>Anyway. I got this working again with a bit of knowledge of the Medium API and working IFTTT (RSS) applets, and it would seem this would be useful to others too.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>TL;DR</h2>
<p>It's tricky to do a TL;DR as there's some setup required, but if you're comfortable:</p>
<ol>
<li>Create an IFTTT webhook applet that reads a feed (your RSS feed)</li>
<li>Make a <code>POST</code> web request to <a href="https://medium-poster.glitch.me">https://medium-poster.glitch.me</a></li>
<li>Post the body of the article, and include your Medium publication Id and your Medium API token.</li>
</ol>
<p>Full detail on each part follows (in particular, the exact format of the <code>POST</code> or how to host your own copy).</p>
<h2>Required tokens</h2>
<p>To complete this process, you need your publication Id and API token from Medium.</p>
<p>Firstly, head over to your <a href="https://medium.com/me/settings">Medium settings</a> and generate a new integration token (use any name you like):</p>
<p><img src="https://remysharp.com/images/medium-integrations.png" alt="Medium integration screenshot"></p>
<p>Next you need a publication Id. To get this, you need a <a href="https://medium.com/me/publications">new (or existing) publication</a> (…le-sigh). Once this is setup, you can <a href="https://help.medium.com/hc/en-us/articles/226875507-How-to-find-your-publication-ID-for-IFTTT-">get your publication Id</a> by visiting your publication, and adding <code>?format=json</code> and you'll find your id under the path: <code>.payload.collection.id</code>.</p>
<p>Keep these values handy.</p>
<h2>Medium Poster Service</h2>
<p>I've set this <a href="https://glitch.com/edit/#!/medium-poster">up on glitch</a> (which also means you can peruse the code), so it means you can either reuse my version, or you can <a href="https://glitch.com/remix/#!/medium-poster">remix your own version</a>.</p>
<p>This service does two things:</p>
<ol>
<li>Allows you to POST to the service, and it will forward the content to Medium (as a new draft - but you can change this too).</li>
<li>Provides a (very basic looking) UI to load an RSS feed and submit to Medium manually.</li>
</ol>
<p>I'm going to assume you want to automate the process in a way that when you publish on your own site, and a new RSS feed item is created, it automatically posts to Medium (i.e. not the manual way described in step 2 above).</p>
<p><strong>Important:</strong> note that my version of the glitch service will post to Medium in <strong>draft</strong> form. If you want this to publish, remix the code, and <a href="https://glitch.com/edit/#!/medium-poster?path=medium.js:18:29">edit the publish status</a> to read:</p>
<pre><code class="language-js">publishStatus<span class="token punctuation">:</span> <span class="token string">"public"</span><span class="token punctuation">,</span>
</code></pre>
<p>The <code>publishStatus</code> can take the following values: <code>public</code>, <code>draft</code>, or <code>unlisted</code>.</p>
<h2>Triggering the post from IFTTT</h2>
<p>When a new post is published, and it hits your RSS feed, IFTTT will pick up the feed item, and post it across to our medium poster service.</p>
<p>Start by <a href="https://ifttt.com/create">creating a new applet</a>, click &quot;this&quot; and search for the <em>RSS Feed</em> service. Select the &quot;New feed item&quot; (or the other trigger if appropriate to your needs), and enter the URL to your RSS feed.</p>
<p>Next click &quot;that&quot; and search for <em>Webhook</em> action service. Then select the &quot;Make a web request&quot; action.</p>
<p>Here are the values I used for each field (note that if you're hosting your own Medium poster service, you'll want to update the URL):</p>
<ul>
<li><strong>URL:</strong> https://medium-poster.glitch.me/draft</li>
<li><strong>Method:</strong> POST</li>
<li><strong>Content-type:</strong> application/json</li>
<li><strong>Body:</strong></li>
</ul>
<pre><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"&lt;&lt;&lt;{{EntryTitle}}>>>"</span><span class="token punctuation">,</span>
  <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"&lt;&lt;&lt;{{EntryUrl}}>>>"</span><span class="token punctuation">,</span>
  <span class="token property">"content"</span><span class="token operator">:</span> <span class="token string">"&lt;&lt;&lt;{{EntryContent}}>>>"</span><span class="token punctuation">,</span>
  <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"YOUR_INTEGRATION_TOKEN"</span><span class="token punctuation">,</span>
  <span class="token property">"pubId"</span><span class="token operator">:</span> <span class="token string">"YOUR_PUBLICATION_TOKEN"</span>
<span class="token punctuation">}</span>
</code></pre>
<p>A few important notes about the body request. Firstly, make sure to swap out the <code>YOUR_…</code> values with your <em>real</em> tokens you created <a href="#required-tokens">earlier</a>. Secondly, notice the IFTTT values have <em>three</em> angle brackets around them - this makes sure the content is correctly escaped.</p>
<p>Remember that my glitch service will post the Medium article in a <em>draft</em> status (so that I can manually schedule the post), but if you want to publish it automatically from IFTTT, add the following line into the body:</p>
<pre><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"&lt;&lt;&lt;{{EntryTitle}}>>>"</span><span class="token punctuation">,</span>
  …
  <span class="token property">"pubId"</span><span class="token operator">:</span> <span class="token string">"YOUR_PUBLICATION_TOKEN"</span><span class="token punctuation">,</span>
  <span class="token property">"publishStatus"</span><span class="token operator">:</span> <span class="token string">"public"</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Lastly, save the applet and go ahead and post on your web site.</p>
<h2>Odd caveat</h2>
<p>This entire workflow is solid, but I've noticed on the very odd occasion that glitch sometimes doesn't respond to IFTTT quickly enough, and I've read somewhere that glitch has rate limits (though I very much doubt I've hit these).</p>
<p>If you're seeing problems with posts being dropped, you may want to look at another hosted platform (<a href="https://zeit.co">Zeit</a>, <a href="https://heroku.com">Heroku</a>, <a href="https://www.google.co.uk/search?q=hosted+node.js+server">etc</a>).</p>
<p>Good luck, and if you're reading this on Medium, you now know how the post got there 👋</p>
<p><em>Originally published on <a href="https://remysharp.com/2018/02/01/how-to-cross-post-to-medium">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>Open source with a cap in hand</title>
      <guid isPermaLink="false">open-source-with-a-cap-in-hand</guid>
      <link>https://remysharp.com/2018/01/10/open-source-with-a-cap-in-hand</link>
      <pubDate>Wed, 10 Jan 2018 13:31:03 +0000</pubDate>
      <description><![CDATA[Nodemon was first released in Oct 2010 (via twitter no less). To date, nodemon has had 1,024 commits - 184 of which were the community, the rest being from me - runs with over 150 tests (mostly integration tests) had 144 releases into npm, starred over 13,000 times, has had 883 issues closed, merged 331 PRs (mostly mine…sorry), and in the last month, has had just shy of 3 million installations.
So what? Well, up to around 4 months ago, nodemon's development and maintenance had pretty much ground to a halt. No one was contributing pull requests, and my motivation to make changes was nil.
So how can I go about changing that?]]></description>
      <content:encoded><![CDATA[
<p>Nodemon was first released in Oct 2010 (<a href="https://twitter.com/rem/statuses/26267574735">via twitter no less</a>). To date, nodemon has had 1,024 commits - 184 of which were the community, the rest being from me - runs with over 150 tests (mostly integration tests) had 144 releases into npm, starred over 13,000 times, has had 883 issues closed, merged 331 <abbr title="pull requests">PRs</abbr> (mostly mine…sorry), and in the last month, has had just shy of <strong>3 million installations</strong>.</p>
<p>So what? Well, up to around 4 months ago, nodemon's development and maintenance had pretty much ground to a halt. No one was contributing pull requests, and my motivation to make changes was nil.</p>
<p>So how can I go about changing that?</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>The spammy banner</h2>
<p>Yup, if you install nodemon today, you'll see this message reading:</p>
<figure>
<p><img src="https://remysharp.com/images/nodemon-postinstall.png" alt="nodemon postinstall"></p>
<figcaption>Love nodemon? You can support the project!</figcaption>
</figure>
<p>Specifically I'm asking users to support me, financially, through <a href="https://opencollective.com/nodemon/order/2597">open collective</a> <small>(go on…a measly $2 a month…go on…)</small>.</p>
<p>I've already received one pull request to remove it (claiming &quot;spammy&quot; as the reason) and a few twitter exchanges (of course) as to why I should work for free.</p>
<p>Personally, I hate this kind of stuff and first <a href="https://github.com/developit/preact/blob/e6deb5efe2a3060bd8abaa716c9e6cf63610c065/package.json#L39">saw it on Preact</a>, but then within a week of adding this banner, nodemon got its first backer. This wasn't particularly overwhelming, but it was still early days. Didn't stop me whinging though!</p>
<blockquote>
<p>nodemon: 2.3 million downloads per month. I totally fucking nailed the open source thing 💪<br><br>&quot;Estimated annual budget based on donations: $8&quot; 😟…</p>
<p><a href="https://twitter.com/rem/status/941068325785886721">via Twitter</a></p>
</blockquote>
<p>Still, as the weeks pressed on a few more people joined the backers - either as a one off donation or money. Then Avi at SparkPost emailed to sponsor nodemon for 3 months. Wow.</p>
<p>Lesson: though this does feel spammy, and sure, if every does it it'll be a clusterfuck, the message was working.</p>
<h2>The money motivator</h2>
<p>Yeah, that dirty word <em>money</em>. Sorry, but it's true. Particularly for me. I run my own business, so any time spent working on open source (aka: working for nothing) actually leads to loss of income.</p>
<p>So now nodemon had drawn a little bit of income from SparkPost's sponsored donation and the possibility to get the stickers I bought covered, it's a far cry from the value I charge a client, but it was a monitory acknowledgement of work on nodemon.</p>
<p>What happened? Those small donations have given the maintenance and moreover, the development of nodemon a new lease of life. <strong>Since the banner was introduced a month ago (<a href="https://github.com/remy/nodemon/commit/6a4fb226028b43ff502cbf70dd586c47a6e3b6f7">5 Dec 2017</a>) there have been 17 new releases in 5 weeks</strong>.</p>
<p>Money, particularly individuals donating towards a project that eats my personal time, is a <em>huge</em> motivator. I recognise that your donations as an intimate acknowledgement of the work of an individual.</p>
<h2>200+ issues and counting</h2>
<p>Up until around November, nodemon had a growing number of open issues, well over 200. In fact, <a href="https://github.com/jsbin/jsbin/issues">jsbin</a> is in a similar situation with 622 open issues (to date). When this happens, for me, I simply feel a benevolence towards actioning new issues.</p>
<p>What's the point in deal with issue number 231 when there's another 230 open issues? Which ones are actually important? Where on earth do I start? How long would it take <em>just to read</em> those issues? How many a simple replies, which require major changes, which require a headache of a technical setup to replicate? Who knows?</p>
<p>Frankly with that type of attitude, I might as well accept that I was ignoring the issues altogether. So I needed to change it.</p>
<p>The solution I've started seeing across the web was the <a href="https://github.com/apps/stale">StaleBot</a>.</p>
<p>Now, the message isn't the greatest, even after I customised it myself, because it will automatically flag stale issues (where there's been no comment) after 30 days of inactivity. Anyone can comment on the issue and the StaleBot will back off. If there's still no activity in the following week, StaleBot will close the issue.</p>
<p>The StaleBot closed out all but around 18 issues. A few where individuals replied saying the issue was still active, but all of a sudden the open issues becomes manageable, and some random issue from 2014 is closed because it's long forgotten.</p>
<p>Today, there's a single open issue. Just one. And new issues are being fixed, closed and released pretty quickly now - but that's entirely down to the desire to keep the open issues as close to zero as possible.</p>
<p>So, sure this can be a bit of a sledgehammer approach, but it has given new life to the management of new issues, and issues are dealt with quickly (rather than those whacked out 6 year issues!):</p>
<p><img src="https://remysharp.com/images/nodemon-issue-stats.png" alt="nodemon issue stats"></p>
<h2>Smaller projects die without support</h2>
<p>There's many hugely popular, integral and well supported open source projects. jQuery, Babel, Webpack and many more. Some started by individuals, some started by friends, some by companies, but they're fortunate to have achieved a critical mass which keeps them running.</p>
<figure>
<p><img src="https://remysharp.com/images/black-mirror-open-source.png" alt="lol"></p>
  <figcaption>[By @mabekatz](https://twitter.com/maybekatz/status/950963356139057154): The truth be said, amen!</figcaption>
</figure>
<p>I'm not entirely sure how nodemon is doing so well after all this time. It was never featured on the npm homepage (whereas alternatives like <a href="https://www.npmjs.com/package/forever">forever</a> and <a href="https://www.npmjs.com/package/pm2">pm2</a> were - both great tools <abbr title="by the way">btw</abbr>), compounded by nodemon coming from a non-US country (which, yes, does have an impact on adoption). I suspect the largest factors were that it came early on in Node's timeline and that it didn't require changes to your code (i.e. <abbr title="keep it simple, sillypoops">K.I.S.S</abbr>).</p>
<p>Nodemon probably would have gone fully stale if I hadn't made these two key changes. Money <em>is</em> a motivator, and making open source sustainable sadly isn't the dream story I'd love it to be. Here's <a href="https://gratipay.news/the-end-cbfba8f50981">Gratipay dying</a>, <a href="https://hackernoon.com/why-funding-open-source-is-hard-652b7055569d">CodeSponsor bailing</a> and my own <a href="https://remysharp.com/2015/09/17/jsbin-toxic-part-4#part-4-the-cost">struggles with JS Bin</a>.</p>
<p>Maybe these smaller open source projects aren't supposed to last 8+ years, but nodemon certainly has (and JS Bin is coming up on a decade this September). But whilst I'm still running these projects, there needs to be a constant motivator to create constant motivation to work on the project, and for that, I don't apologise.</p>
<h2>Maintainers: what can you do?</h2>
<p>This all really comes down to the popularity and the burden you bear running the project. I've got projects that are open source but pretty much just serve me (<a href="https://github.com/remy/express-router-cli">express router cli</a>, <a href="https://github.com/remy/undefsafe">undefsafe</a>, <a href="https://github.com/remy/bitcalc">bitcalc</a> and many more!) and the issues raised and non-me usage is pretty low. i.e. there's no problem here.</p>
<p>If, however, the project is starting to attract users which leads to different use cases, I'd strongly recommend some way to manage issues - StaleBot worked well for me, but was met with the odd grumble.</p>
<p><strong>Maintaining a project in your own time is not a norm.</strong> <em>If</em> you work for a company, then hopefully they see the benefit to their business to let you work on the project during business hours. If you work for yourself, I believe, <strong>strongly</strong>, that you should be compensated in some way. If you can get that compensation through the pure satisfaction of helping someone, then good for you. If it takes something else,</p>
<p>I've shared <a href="https://remysharp.com/2015/01/09/dont-like-open-source">my thoughts on open source</a> and how I believe that code and publishing code is a distant 2nd to your own well-being.</p>
<p>If you're a creator, then here's a list of platforms that I've collected that you might be able to use to help generate some support from (please note that I've not personally used all of these):</p>
<ul>
<li><a href="https://www.patreon.com">patreon</a> - pretty much dominating the platforms at the moment</li>
<li><a href="https://opencollective.com">open collective</a> - full platform that includes discoverability</li>
<li><a href="https://liberapay.com">liberapay</a> - one off or regular donation platform (similar to -now gone-gratipay?)</li>
<li><a href="https://d.rip">drip</a> - Reinvented Drip by Kickstarter - currently invite only</li>
<li><a href="https://streamlabs.com">streamlabs</a> - for streaming content publishers</li>
<li><a href="https://www.paypal.me">paypal.me</a> - not a platform, but easy to link to</li>
<li><a href="https://ko-fi.com">ko-fi</a> - basically a nice front end to a one off PayPal donation</li>
<li><a href="https://medium.com/creators">medium</a> - move your content to Medium…</li>
<li><a href="https://steadyhq.com/en">steadyhq</a> - similar to Medium's partner program</li>
</ul>
<p>This resource on the <a href="https://github.com/nayafia/lemonade-stand">&quot;lemonade stand&quot;</a> was sent to me today, and looks hugely useful and comprehensive (definitely bookmark that <a href="https://github.com/nayafia/lemonade-stand">link</a>).</p>
<h2>Users: what can <em>you</em> do?</h2>
<p>Putting aside my thoughts, consider your position at your business. Are there projects that you business relies on? Go find their repositories and either try to get your business to donate a monthly amount (find them on sites like <a href="https://opencollective.com/">Open Collective</a>, <a href="https://www.patreon.com/">Patreon</a> and even the repo itself) and if that's too much hassle, donate a one off, even if it's the price of a coffee - imagine for a moment the contribution that developer has made to your business.</p>
<h2>Me: what will I do?</h2>
<p>Starting today, I've set aside a personal yearly budget of £1,200  ($1,600 / €1,350) to donate back to developers in a similar position to me: working in their own time, making a difference. This will be in addition to our yearly ffconf <a href="https://remysharp.com/2015/08/28/diversity-scholarships">scholarships</a>.</p>
<p>I'm not 100% sure how I'll find these people and projects, I have an idea of a few, but I'll find a way and hopefully publish what I'm doing.</p>
<p>If any of this resonates with you, and you use nodemon, maybe <strong><a href="https://opencollective.com/nodemon/order/2597">support nodemon today</a></strong>. Thank you ❤️</p>
<p><em>Originally published on <a href="https://remysharp.com/2018/01/10/open-source-with-a-cap-in-hand">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>A clean exit</title>
      <guid isPermaLink="false">a-clean-exit</guid>
      <link>https://remysharp.com/2018/01/08/a-clean-exit</link>
      <pubDate>Mon, 08 Jan 2018 10:18:06 +0000</pubDate>
      <description><![CDATA[I was running some tests recently using Mocha and I wanted to re-run the tests when files changed. Typically this kind of functionality is built into test runners, but a) I'm not that familiar with Mocha (meh, it's just a tool) and b) I've got nodemon (which I wrote) 🙌.
The thing is: when I ran a failing test with nodemon and mocha, the way mocha exits (in this particular case) makes nodemon think that the command totally failed with process failed, unhandled exit code (2). Cleaning the exit is a good trick to know.]]></description>
      <content:encoded><![CDATA[
<p>I was running some tests recently using <a href="https://mochajs.org/">Mocha</a> and I wanted to re-run the tests when files changed. Typically this kind of functionality is built into test runners, but a) I'm not that familiar with Mocha (meh, it's just a tool) and b) I've got nodemon (which I wrote) 🙌.</p>
<p>The thing is: when I ran a failing test with nodemon and mocha, the way mocha exits (in this particular case) makes nodemon <em>think</em> that the command totally failed with <code>process failed, unhandled exit code (2)</code>. Cleaning the exit is a good trick to know.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>Exit codes</h2>
<p>When a process runs (in a unix-based system…I'm unsure how much applies to Windows), it will exit with a code. There's only a handful of standardised <a href="http://tldp.org/LDP/abs/html/exitcodes.html">exit codes</a>, but the ones of most interest are:</p>
<ul>
<li><strong><code>exit 0</code></strong> → success</li>
<li><strong><code>exit 1</code></strong> → failure</li>
</ul>
<p>If you try this in your terminal, the terminal will just close (since you're running <code>exit</code>). But to test this, you can run the following:</p>
<pre><code class="language-bash">$ sh -c <span class="token string">"exit 0"</span>
$ <span class="token keyword">echo</span> <span class="token variable">$?</span>
0
$ sh -c <span class="token string">"exit 1"</span>
$ <span class="token keyword">echo</span> <span class="token variable">$?</span>
1
</code></pre>
<p>Running <code>sh -c &quot;…&quot;</code>  runs the string as a bash command and returns the result. Then the shell value <code>$?</code> is the numerical status of the exit code from the last executed command.</p>
<h2>Changing exit codes</h2>
<p>When I ran mocha, it was returning an exit code of 2. This is a <a href="https://github.com/mochajs/mocha/issues/2438">weirdness of mocha that (misuses) the exit status</a> reporting the <em>number</em> of failing tests.</p>
<p>The &quot;fix&quot; is only a few characters though. When I run mocha inside of nodemon, I use an bash <em>or</em> statement that reads &quot;if this fails, fail with an exit 1&quot;:</p>
<pre><code class="language-bash">$ nodemon --exec <span class="token string">"mocha bad.test.js || exit 1"</span>
</code></pre>
<p>Now if mocha fails with <code>exit 2</code> it'll exit nodemon's <em>exec</em> with an <code>exit 1</code> which nodemon sees as a failure.</p>
<h3>Wait, that's not how <em>or</em> works!</h3>
<p>If you've used to an <code>or</code> statement in code then you (like me) might think that <code>exit 0 || exit 1</code> would result in <code>1</code> - since <code>0</code> is generally <em>falsy</em>. Except in exit codes, remember, <code>0</code> is success (truthy), and <code>1</code> is failure (<em>falsy</em>).</p>
<p>So <code>||</code> (or) reads as: if it failed then do X. You can see the results here:</p>
<pre><code class="language-bash">$ sh -c <span class="token string">'sh -c "exit 0" || exit 1'</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$?</span>
0 <span class="token comment"># the OR was not used</span>

$ sh -c <span class="token string">'sh -c "exit 1" || exit 1'</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$?</span>
1 <span class="token comment"># the OR _was_ used</span>

$ sh -c <span class="token string">'sh -c "exit 2" || exit 1'</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$?</span>
1 <span class="token comment"># again, the OR _was_ used with exit 2 - failure</span>
</code></pre>
<p><em>Explanation of the lines above</em>: the inner <code>sh -c</code> is a script that exits with the given code. The outer <code>sh -c</code> will run the first script (the inner <code>sh -c</code>) and if that fails, it will run <code>exit 1</code> as specified with the <code>||</code> operator.</p>
<h2>Elsewhere</h2>
<p>I've used this same trick to fix a <code>postinstall</code> <a href="https://github.com/remy/nodemon/issues/1154">problem</a> where the <code>postinstall</code> command in npm was failing which causes the entire <code>npm install</code> process to blow up.</p>
<p>So I change the <code>package.json</code> from:</p>
<pre><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"postinstall"</span><span class="token operator">:</span> <span class="token string">"node -e \"console.log('Hi there')"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>To:</p>
<pre><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"postinstall"</span><span class="token operator">:</span> <span class="token string">"node -e \"console.log('Hi there') || exit 0"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>The <code>|| exit 0</code> will cleanly exit the <code>postinstall</code> if there's <em>any</em> error. Of course, if the <code>node</code> command is successful it'll exit with <code>0</code> and the <code>|| exit 0</code> does not run and is ignored.</p>
<p>So it's always good to understand exit codes and how to manipulate them if you need to.</p>
<p><em>Originally published on <a href="https://remysharp.com/2018/01/08/a-clean-exit">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>To gist and back again</title>
      <guid isPermaLink="false">to-gist-and-back-again</guid>
      <link>https://remysharp.com/2018/01/05/to-gist-and-back-again</link>
      <pubDate>Fri, 05 Jan 2018 12:32:56 +0000</pubDate>
      <description><![CDATA[I've recently been using gists to help debug user issues on nodemon. The process is two parts: firstly getting the original files up into a gist (ideally pared down), and secondly downloading each file to my local dev environment.
Using two tools, I'm able to simplify this workflow pretty nicely, so I can go to gist and back again.]]></description>
      <content:encoded><![CDATA[
<p>I've recently been using <a href="https://gist.github.com">gists</a> to help debug user issues on nodemon. The process is two parts: firstly getting the original files up into a gist (ideally pared down), and secondly downloading each file to my local dev environment.</p>
<p>Using two tools, I'm able to simplify this workflow pretty nicely, so I can go to gist and back again.</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>Caveats first</h2>
<p>For the time being, directory structure is not supported, which is a bit of a limitation, but perhaps something like the <code>tree</code> command mixed in with the tree generation command (I wrote) called <a href="https://www.npmjs.com/package/eert">eert</a> could help.</p>
<h2>Up: to gist</h2>
<p>To get files online, you <em>could</em> upload them individually to the gist website, or better than that: install the <code>gist</code> <a href="https://github.com/defunkt/gist#installation">command line tool</a>.</p>
<p>For Mac users, I'd recommend using the <code>brew install gist</code> (and get brew, the package installer from <a href="https://brew.sh/">brew.sh</a>). Otherwise, <code>gem install gist</code> (though my own track record for using <code>gem install…</code> is fairly shaky, so hopefully you have more luck).</p>
<p>Then you specify the files to send up:</p>
<pre><code class="language-bash">$ gist index.js package.json
https://gist.github.com/a24b93601b8b2a68b8e978460bf6e4e1
</code></pre>
<p>That URL can/should be then shared on the issue.</p>
<h2>Down: from gist</h2>
<p>Now for the fun part, pulling a gist down and generating all the individual files in a single command 💪😃</p>
<p>Using <a href="https://stedolan.github.io/jq/">jq</a> (a lightweight and flexible command-line JSON processor), a well formed command can use Github's public API for reading gist (though won't work on secret gists unless you also use an auth token…outta scope for this post though).</p>
<p>First, here's the full working command (assuming you've installed <code>jq</code> and you have <code>curl</code> on your machine - most do):</p>
<pre><code class="language-bash">$ <span class="token function">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -L https://git.io/vbSgz \
  <span class="token operator">|</span> jq -r '.files
  <span class="token operator">|</span> to_entries
  <span class="token operator">|</span> .<span class="token punctuation">[</span><span class="token punctuation">]</span>.value
  <span class="token operator">|</span> @sh "echo \<span class="token punctuation">(</span>.content<span class="token variable">)</span></span> > \(.filename)"</span>'<span class="token punctuation">)</span>"
$ tree
<span class="token keyword">.</span>
├── index.js
└── package.json
</code></pre>
<h3>What's actually happening?</h3>
<p>The <code>jq</code> is given a &quot;script&quot; to run against the JSON result of the gist API call. You can play with an <a href="https://jqterm.com/#!/4e98ce1584b6b34a9c6edff4d9432143?query=.files%20%7C%20to_entries%20%7C%20.%5B%5D.value%20%7C%20@sh%20%22echo%20%5C%28.content%29%20%3E%20%5C%28.filename%29%22">interactive jq toy I built</a> and see the effects of tweaking the query.</p>
<p>To explain the query:</p>
<ul>
<li><a href="https://jqterm.com/#!/4e98ce1584b6b34a9c6edff4d9432143?query=.files"><code>.files</code></a>: reads the <code>files</code> property.</li>
<li><a href="https://jqterm.com/#!/4e98ce1584b6b34a9c6edff4d9432143?query=.files%20%7C%20to_entries"><code>to_entries</code></a>: transforms the objects into an array that exposes the property from each unique filename into a common property name.</li>
<li><a href="https://jqterm.com/#!/4e98ce1584b6b34a9c6edff4d9432143?query=.files%20%7C%20to_entries%20%7C%20.%5B%5D.value"><code>.[].value</code></a>: returns a list (not an array) of objects that contain the filename and contents for plucking.</li>
<li><a href="https://jqterm.com/#!/4e98ce1584b6b34a9c6edff4d9432143?query=.files%20%7C%20to_entries%20%7C%20.%5B%5D.value%20%7C%20@sh%20%22echo%20%5C%28.content%29%20%3E%20%5C%28.filename%29%22"><code>@sh &quot;echo \(.content) &gt; \(.filename)&quot;</code></a>: generates a &quot;shell safe&quot; string that is the <code>echo</code> command piped into a file as named by the <code>.filename</code> property in our object. The <code>\(.&lt;prop&gt;)</code> syntax is the template syntax for jq.</li>
</ul>
<p>This query is passed to <code>jq -r</code> - the <code>-r</code> part returns the result as a bare string (rather than quoted as you'll see the result in the Jace tool links).</p>
<p>Finally the <strong>entire</strong> result is <code>eval</code>ed through the command line which is the same as copying and pasting each line into the command line.</p>
<p>The result: <strong>individual files with the contents from the gists.</strong></p>
<p><em>Originally published on <a href="https://remysharp.com/2018/01/05/to-gist-and-back-again">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
    <item>
      <title>My 2017</title>
      <guid isPermaLink="false">my-2017</guid>
      <link>https://remysharp.com/2017/12/31/my-2017</link>
      <pubDate>Sun, 31 Dec 2017 10:48:21 +0000</pubDate>
      <description><![CDATA[Continuing with my previous run of year in reviews (going back to 2007), here's my little entry to close out 2017 on my blog.
I use these posts as a place to allow myself to both look back at my year, but also in future years to time travel back to what I did. Having just read my 2016 entry a lot of crap went down. Somehow I actually thought all those bad things (in the world, Prince dying, etc) happened this year, so either 2017 was slightly less shitty in the world, or 2016 was really shitty!]]></description>
      <content:encoded><![CDATA[
<p>Continuing with my previous run of year in reviews (going back to 2007), here's my little entry to close out 2017 on my blog.</p>
<p>I use these posts as a place to allow myself to both look back at my year, but also in future years to time travel back to what I did. Having just read my <a href="https://remysharp.com/my-2016">2016</a> entry a <em>lot</em> of crap went down. Somehow I actually thought all those bad things (in the world, Prince dying, etc) happened this year, so either 2017 was slightly less shitty in the world, or 2016 was <em>really</em> shitty!</p>
<p><a href="https://terminal.training/?utm_source=feed&utm_medium=banner&utm_campaign=remysharp-ad1"><img src="https://remysharp.com/images/inline-cli-course.png"></a><h2>Professional</h2>
<p>Although this is my &quot;professional&quot; section, I'm also including personal and side projects I work on. Most of which don't make money, but occasionally they do, which helps with the self-employed situation.</p>
<ul>
<li><strong>Brad Frost's untitled project</strong>: I got to work with Brad on a (currently unreleased) project using React and Next.js.</li>
<li><strong>AMA</strong>: A different kind of business, I've started offering a (type of) &quot;Ask Me Anything&quot; consultancy offering which I ran for two companies in 2017 and it went very well. The work ranged from reviewing specifications, proposals, reviewing code and offering advice on technical decisions. <a href="mailto:info@leftlogic.com?subject=AMA">Get in touch if you'd like to enquire about this for your company</a></li>
<li><strong>ffconf 2018</strong>: twice, again - it was <a href="https://remysharp.com/2017/11/17/thoughts-and-learning-from-ffconf-2017">excellent</a>!</li>
<li><strong>Speaking</strong>: I was able to reprise my debugging talk twice this year and it went down extremely well. I also created a new talk about a creative project I worked on: the ZX Spectrum loading process. The talk still needs a lot refinement but I hope to give an updated version later on in 2018.</li>
<li><strong>terminal.training</strong>: I released a video series to complement the <em>Working the Command Line</em> book I released in 2016. The launch went pretty well, and though it's a far cry from quitting the &quot;day job&quot;, I've already got a few other series lined up including Universal React and Devtools.</li>
</ul>
<p>When I look back over the professional services I offered last year, I do worry that it's rather lacking and that I focused <em>a lot</em> more on side projects and tinkering. The upshot I guess is that I'm sharpening my skills.</p>
<h3>Side Projects</h3>
<ul>
<li><strong>JS Bin refactor</strong>: I've been working hard on a complete overhaul of JS Bin, &quot;V5&quot; by any other name. It's still in progress, and I intend to release it for public beta in early 2018.</li>
<li><strong>jsconsole refactor</strong>: Before I started the JS Bin refactor, I left jsconf.eu 2017 in dire need to code, so on the plane and train back from Berlin to Brighton, I wrote the majority of jsconsole anew using React and following closely in the footsteps of Chrome and Firefox's own developer console.</li>
<li><strong>___.isthe.link</strong>: a growing <a href="https://isthe.link">collection of mini projects</a> I've built, including <a href="https://bitcalc.isthe.link/">bitcalc</a>, <a href="https://jqterm.com/">jqterm</a> and others.</li>
<li><strong>Unreleased ZX Spectrum project</strong>: I've also given two talks on… the final project allows me to take a photo with my phone, the <em>play</em> the audio binary over an audio jack into my laptop which renders the full 1986 loading effect of a ZX Spectrum!</li>
<li><strong>Nodemon</strong> finally got some love and long needed attention and has had a <a href="https://github.com/remy/nodemon/releases">slew of updates</a> in the last month - you too can <a href="https://opencollective.com/nodemon/donate">support the project too now</a> ❤️</li>
</ul>
<p>Last year I also imposed a new rule for myself about domains. I said that if I hadn't deployed the intended project, I'd not renew the domain (latest count: 51 domains… 😱). So today I'm knowingly letting 7 of those domains lapse during 2018. But I will break my own rule for <a href="https://cron.jobs">cron.jobs</a>…but shame on me if I keep it for 2 years and get nowhere!</p>
<h2>Personal</h2>
<ul>
<li><strong>26 books</strong> (including 4 graphic novels and a few I didn't log). You can see my complete <a href="https://www.goodreads.com/user/year_in_books/2017/63680802">book journey on Goodreads</a>. My favourite book of 2017 was <a href="https://www.goodreads.com/book/show/30326408-a-boy-made-of-blocks">A Boy Made of Blocks</a> - I found as I was coming to the end of the book that I was wishing it would last longer so I could spend longer with the characters. I <em>really</em> bonded with the characters and the story of this book. I have a terrible history of reading, and this is kind of a huge deal to me (previously, over the last few decades I've read a total of handful of books!)</li>
<li><strong>Health</strong>: I've continued progress at the gym and learning and experimenting with different diet changes. Most recently I spent 3 months in a high fat-low carb diet (and added fasting 16:8 to the mix - but I wouldn't recommend changing two variables at once!) - the results were very positive for fat burning (for me). I also suffered a couple of semi-serious injuries…which weren't so fun! I managed to pull my score card from PureGym's web site, can you spot where I had my injury?! 😃</li>
</ul>
<p><img src="https://remysharp.com/images/gym-2017.png" alt="Gym life score card"></p>
<p>A personal low point: <a href="https://remysharp.com/2017/10/30/dear-dizzy">our cat Dizzy</a> fell ill very quickly in October and we had to make the tough decision to let him go. He was very much loved by our family and is still dearly missed.</p>
<h2>Onwards to 2018</h2>
<p>I don't really do new years resolutions, but I do have a big <em>deadline</em> that I turn 40 years young and I have a personal aim that I'm shooting for. In fact, it's something I've wanted since I was 15…so there's a tonne of pressure on myself and a fairly high chance of failure.</p>
<p>Here's a short list of things I'd like to change/do in 2018:</p>
<ol>
<li>Less time on twitter, a heck of lot less time replying to twitter</li>
<li>Continue to blog consistently</li>
<li>Revisit my retro (ZX Spectrum) conference talk…somehow</li>
<li>Continue to read. In fact, probably read more</li>
<li>Get outside</li>
<li>Get off the damn laptop</li>
</ol>
<p><em>Happy new year ❤️🎉 — Remy (and family)</em></p>
<p><img src="https://remysharp.com/images/family-2017.jpg" alt="Happy new year!"></p>
<p><em>Originally published on <a href="https://remysharp.com/2017/12/31/my-2017">Remy Sharp's b:log</a></em></p>]]></content:encoded>
    </item>
  </channel>
</rss>
